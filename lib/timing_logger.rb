require 'logger'
require 'forwardable'

# This is a wrapper around the regular Ruby logger
# It allows us to keep track of how long a task took since its last invocation
class TimingLogger
  extend Forwardable

  attr_accessor :logger

  def_delegators :logger, # <-- inner object, v-- delegated methods --v
   :<<, :add, :close, :datetime_format, :datetime_format=, :debug, :debug?,
   :error, :error?, :fatal, :fatal?, :info?, :level=, :log, :reopen,
   :sev_threshold=, :unknown, :warn, :warn?

  def initialize(out = STDOUT, progname = '')
    @logger = Logger.new(out, progname: progname)
    @last_info = Time.now
    @logger.formatter = proc do |severity, datetime, progname, msg|
      t = datetime.strftime("%Y-%m-%d %T")
      "[#{severity} #{t} #{progname}] #{msg}\n"
    end
  end

  def info(msg = '')
    now = Time.now
    time_took = now - @last_info
    msg = "%-40s" % msg
    time_took_str = "%8s" % "(#{time_took.seconds}s)"
    @logger.info msg + time_took_str
    @last_info = now
  end

end
