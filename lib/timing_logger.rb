require 'logger'
require 'forwardable'

# This is a wrapper around the regular Ruby logger
# It allows us to keep track of how long a task took since its last invocation
class TimingLogger
  extend Forwardable

  attr_accessor :logger

  def_delegators :logger, # <-- inner object, v-- delegated methods --v
   :<<, :add, :close, :datetime_format, :datetime_format=, :debug, :debug?,
   :error, :error?, :fatal, :fatal?, :info?, :level=, :log, :reopen,
   :sev_threshold=, :unknown, :warn?

  @@START_OF_ALL_TIME = nil # basically when Ruby was fired up.
  @@VHP_WARNING_SUMMARY = {}    # yeah yeah global variable blah blah

  def initialize(out = STDOUT, progname = '')
    @logger = Logger.new(out, progname: progname)
    @@LAST_TIME = Time.current
    @logger.formatter = proc do |severity, _datetime, progname, msg|
      severity =  "\e[31mWARN\e[0m" if severity == 'WARN'
      severity =  "\e[31mERROR\e[0m" if severity == 'ERROR'
      t = Time.current.strftime("%Y-%m-%d %T")
      preamble = '%-50s' % "[#{severity} #{t} #{progname}]"
      "#{preamble} #{msg}\n"
    end
  end

  def info(msg = '')
    @@START_OF_ALL_TIME ||= Time.current # store only the very first time
    now = Time.current
    time_took = now - @@LAST_TIME
    time_took_str = "%2d" % time_took.seconds
    @logger.info " #{time_took_str}s | #{msg}"
    @@LAST_TIME = now
  end

  def warn(msg = '')
    @@VHP_WARNING_SUMMARY[@logger.progname] ||= 0
    @@VHP_WARNING_SUMMARY[@logger.progname] += 1
    @logger.warn msg
  end

  def done
    t = Time.current - @@START_OF_ALL_TIME
    sec = '%.1f' % t.seconds
    min = '%.1f' % (t.seconds / 60.0)
    info "All done! Total time: #{sec}s or #{min} minutes"
    if @@VHP_WARNING_SUMMARY.any?
      info "==WARNING SUMMARY=="
      @@VHP_WARNING_SUMMARY.each do |(progname, count)|
          info progname.to_s.ljust(30, " ") + count.to_s.rjust(4, " ")
      end
    else
      info "Wow! No warnings! Good work."
    end
  end

end
