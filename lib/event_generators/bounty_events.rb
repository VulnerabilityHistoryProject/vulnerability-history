class BountyEvents

  def initialize(project)
    @project = project
    @desc = File.read(File.expand_path("markdown/bounty.md", __dir__,))
  end

  def generate
    Vulnerability.where(project: @project).each do |vuln|
      if has_bounty? vuln
        if valid_date? vuln, vuln.notes['bounty']['date']
          e = Event.create!(
            style: style,
            title: "Bounty awarded for #{vuln.cve}",
            event_type: 'bounty',
            date: vuln.notes['bounty']['date'],
            description: Writing.embed_details(@desc, vuln)
          )
          vuln.events << e
          vuln.save
        end
      end
    end
  end

  private

  # Returns true if the vulnerability has a bounty
  def has_bounty?(v)
    !v.notes['bounty']['amount'].nil?
  end

  def valid_date?(vuln, str)
    begin
      Date.parse(str.to_s)
    rescue ArgumentError
      puts "ERROR on #{vuln.cve}: Bounty Date incorrect"
      return false
    end
    return true
  end

  def style
    @style ||= Style.find_or_create_by!(
      name: 'bounty',
      icon: 'monetization_on',
      color: '#25C322'
    )
  end

end
