class CommitEvents

  def initialize
    tmpl = File.expand_path("../markdown/commit.md", __FILE__,)
    @desc = File.read(tmpl)
  end

  def generate
    vuln_events = []
    Commit.all.each do |commit|
      unless already_exists?(commit)
        e = Event.create!(
          detail: commit,
          style: style,
          title_template: 'Edit: :title:',
          description_template: @desc
        )
        vulnerable_file_ids = commit.filepaths.pluck(:id)
        vulns = Vulnerability.
                  joins(fixes: { commit: :filepaths}).
                  where('filepaths.id' => vulnerable_file_ids).
                  distinct
        vulns.each do |v|
          vuln_events << VulnerabilityEvent.new(vulnerability: v,
                                                event: e)
        end
      end
    end
    VulnerabilityEvent.import vuln_events
  end

  def style
    @style ||= Style.find_or_create_by!(
      name: 'commit',
      icon: 'edit',
      color: '#6AA5E5'
    )
  end

  # Don't generate Fix events, VCC events, and InterestingCommits
  # We'll do those separately
  def already_exists?(commit)
     Fix.exists?(commit: commit) ||
     Vcc.exists?(commit: commit) ||
     InterestingCommit.exists?(commit: commit)
  end

end
