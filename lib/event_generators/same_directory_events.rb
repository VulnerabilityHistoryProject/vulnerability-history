require_relative '../../app/helpers/application_helper'
require 'timing_logger'

class SameDirectoryEvents
  include ApplicationHelper

  def initialize(project, log = TimingLogger.new(STDOUT, 'data:events:same_dir'))
    @project = project
    @logger = log
  end

  def generate
    events = []
    query = <<~EOSQL
      SELECT DISTINCT v1.id AS vuln1_id,
                      v2.id AS vuln2_id,
                      v2.announced AS announced,
                      v2.cve AS cve,
                      fp1.filepath AS fp,
                      fp2.filepath
      FROM vulnerabilities AS v1
        INNER JOIN vulnerabilities AS v2 ON (v1.id <> v2.id AND v1.project_id = v2.project_id)
        INNER JOIN fixes AS f1 ON (f1.vulnerability_id = v1.id)
        INNER JOIN fixes AS f2 ON (f2.vulnerability_id = v2.id)
        INNER JOIN commits AS c1 ON c1.id = f1.commit_id
        INNER JOIN commits AS c2 ON c2.id = f2.commit_id
        INNER JOIN commit_filepaths AS cf1 ON cf1.commit_id = c1.id
        INNER JOIN commit_filepaths AS cf2 ON cf2.commit_id = c2.id
        INNER JOIN filepaths AS fp1 ON cf1.filepath_id = fp1.id
        INNER JOIN filepaths AS fp2 ON cf2.filepath_id = fp2.id
        WHERE fp1.dir = fp2.dir
              AND fp1.is_code = TRUE
              AND fp2.is_code = TRUE
              AND fp1.project_id = fp2.project_id
              AND fp1.project_id = '#{@project.id}'
    EOSQL
    @logger.info "Execute SQL query"
    results = ActiveRecord::Base.connection.execute(query)
    @logger.info "Build records for import"
    results.each do |result|
      dir = result['fp'].split('/')[0...-1].join('/')
      e = {
        event_type: 'same directory',
        title: "#{result['cve']} fixed in same directory #{dir}",
        date:  result['announced'],
        icon: 'bug_report',
        color: '#ffaa00',
        description: (<<~EOSTR
            A vulnerability, #{result['cve']} that was also fixed in this
            vulnerability's directory (#{dir}) was announced.
          EOSTR
        ),
        start_hidden: false,
        vulnerability_id: result['vuln1_id']
      }
      events << e
    end
    @logger.info 'Import events'
    columns = [:event_type, :title, :date, :description,
               :icon, :color, :start_hidden, :vulnerability_id]
    Event.import events
  end
end
