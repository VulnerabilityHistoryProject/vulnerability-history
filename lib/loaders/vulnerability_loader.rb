require 'timing_logger'

class VulnerabilityLoader

  def initialize
    @log = TimingLogger.new(STDOUT, 'data:load:vulns')
  end

  def load_data(repo_path, project)
    vulnerabilities = []
    fixes = []
    vccs = []
    @log.info 'Parsing YMLs and making models'
    Dir["#{repo_path}/cves/*.yml"].each do |file|
      begin
        start = Time.now
        yml = File.open(file) { |f| YAML.load(f) }
        v   = create_vulnerability(yml, project)
        unless v.nil?
          fixes += create_fixes(v, yml)
          vccs += create_vccs(v, yml)
          vulnerabilities << v
        end
        @log.warn "Slow load on #{file}" if Time.now - start > 1.second
      rescue => e
        @log.error "Error loading vuln file #{file}. Cause: #{e.full_message}"
        # byebug
      end
    end
    @log.info 'Importing vulnerabilities...'
    Vulnerability.import vulnerabilities, validate: false
    @log.info 'Importing fixes...'
    Fix.import fixes, validate: false
    @log.info 'Importing vccs...'
    Vcc.import vccs, validate: false
  end

  def create_vulnerability(yml, project)
    if yml["announced"].nil?
      @log.warn "ANNOUNCED DATE MISSING for #{yml['CVE']} in #{project.name}"
      return nil
    else
      Vulnerability.new(
        cve: yml["CVE"],
        announced: yml["announced"],
        description: yml["description"].to_s,
        upvotes: yml["upvotes"].to_i,
        nickname: yml["nickname"].to_s,
        project: project,
        notes: yml,
      )
    end
  end

  def create_fixes(v, yml)
    fixes = []
    yml['fixes']&.each do | entry |
      hash = entry['commit'] || entry[:commit]
      commit = Commit.find_by(commit_hash: hash)
      if commit.nil?
        # puts "WARNING: Missing commit data for #{hash}. Fix not created."
      else
        fixes << Fix.new(
          vulnerability: v,
          commit: commit,
          notes: commit.notes.merge( { note: entry['note'] } )
        )
      end
    end
    return fixes
  end

  def create_vccs(v, yml)
    vccs = []
    yml['vccs']&.each do | entry |
      hash = entry['commit'] || entry[:commit]
      commit = Commit.find_by(commit_hash: hash)
      if commit.nil?
        # puts "WARNING: Missing commit data for #{hash}. Fix not created."
      else
        vccs << Vcc.new(
          vulnerability: v,
          commit: commit,
          notes: commit.notes.merge( { note: entry['note'] } )
        )
      end
    end
    return vccs
  end

end
