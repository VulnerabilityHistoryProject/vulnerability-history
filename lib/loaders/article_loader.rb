require_relative '../../app/helpers/application_helper'
require 'timing_logger'

class ArticleLoader
  include ApplicationHelper

  def load_data(repo_path)
    Dir["#{repo_path}/articles/*.md"].each do |file|
      logger = TimingLogger.new(STDOUT, 'data:load:articles')
      content = File.read(file)
      md = YAML.load(content)

      if md['title'].nil? or md['art'].nil? or md['blurb'].nil?
        logger.warn "INVALID ARTICLE: title, art, or blurb is missing in #{file}"
      else

        article = Article.create!(
          title: md['title'],
          art: md['art'],
          blurb: markdown(md['blurb']),
          fulltext: markdown(content.split("---")[2])
        )

        if md['cves'].is_a?(Enumerable)
          md['cves'].each do |cve|
            ArticleVulnerability.create!(
              article: article,
              vulnerability: Vulnerability.find_by(cve: cve)
            )
          end
        elsif not md['cves'].nil?
          logger.warn "INVALID FIELD: failed to parse cve entry in #{file}"
        end

        if md['tags'].is_a?(Enumerable)
          md['tags'].each do |tag|
            ArticleTag.create!(
              article: article,
              tag: Tag.find_by(shortname: tag)
            )
          end
        elsif not md['tags'].nil?
          logger.warn "INVALID FIELD: failed to parse tag entry in #{file}"
        end

        if md['filepaths'].is_a?(Enumerable)
          md['filepaths'].each do |f|
            ArticleFilepath.create!(
              article: article,
              filepath: Filepath.find_by(filepath: f)
            )
          end
        elsif not md['filepaths'].nil?
          logger.warn "INVALID FIELD: failed to parse filepath entry in #{file}"
        end
      end
    end
  end
end
