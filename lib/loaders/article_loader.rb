class ArticleLoader
  def load_data(repo_path)
    Dir["#{repo_path}/articles/*.md"].each do |file|
      content = File.read(file)
      md = YAML.load(content)

      if md['title'].nil? or md['art'].nil? or md['blurb'].nil?
        puts "INVALID ARTICLE: title, art, or blurb is missing."
      else
        article = Article.create!(
          title: md['title'],
          art: md['art'],
          blurb: md['blurb'],
          fulltext: content.split("---")[2]
        )

        if md['cve'].is_a?(Enumerable)
          md['cve'].each do |cve|
            ArticleVulnerability.create!(
              article: article,
              vulnerability: Vulnerability.find_by(cve: cve)
            )
          end
        elsif not md['cve'].nil?
          puts "ARTICLES: cannot parse cve entry in #{file}"
        end

        if md['tag'].is_a?(Enumerable)
          md['tag'].each do |tag|
            ArticleTag.create!(
              article: article,
              tag: Tag.find_by(shortname: tag)
            )
          end
        elsif not md['tag'].nil?
          puts "ARTICLES: cannot parse tag entry in #{file}"
        end

        if md['filepath'].is_a?(Enumerable)
          md['filepath'].each do |f|
            ArticleFilepath.create!(
              article: article,
              filepath: Filepath.find_by(filepath: f)
            )
          end
        elsif not md['filepath'].nil?
          puts "ARTICLES: cannot parse filepath entry in #{file}"
        end
      end
    end
  end
end
