require_relative '../../app/helpers/application_helper'
require 'timing_logger'

class ArticleLoader
  include ApplicationHelper

  def load_data(repo_path)
    logger = TimingLogger.new(STDOUT, 'data:load:articles')
    Dir["#{repo_path}/articles/*.md"].each do |file|
      begin
        content = File.read(file)
        md = YAML.load(content)
        if md['title'].nil? or md['art'].nil? or md['blurb'].nil?
          logger.warn "INVALID ARTICLE: title, art, or blurb missing in #{file}"
          continue
        end

        article = Article.create!(
          title: md['title'],
          author: md['author'],
          art: md['art'],
          blurb: md['blurb'],
          fulltext: content.split("---")[2]
        )

        md['cves']&.each do |cve|
          vuln = Vulnerability.find_by(cve: cve)
          if vuln.nil?
            logger.warn("BAD ARTICLE METADATA: can't find #{cve} in #{file}")
          else
            ArticleVulnerability.create!(article: article, vulnerability: vuln)
          end
        end

        md['tags']&.each do |tag|
          db_tag = Tag.find_by(shortname: tag)
          if db_tag.nil?
            logger.warn("BAD ARTICLE METADATA: can't find #{tag} in #{file}")
          else
            ArticleTag.create!(article: article, tag: db_tag)
          end
        end

        md['filepaths']&.each do |f|
          db_filepath = Filepath.find_by(filepath: f)
          if db_filepath.nil?
            logger.warn("BAD ARTICLE METADATA: can't find #{tag} in #{file}")
          else
            ArticleFilepath.create!(article: article, filepath: db_filepath)
          end
        end
      rescue => e
        logger.error("Exception in #{file}: #{e}")
        logger.error(e.full_message)
      end
    end
    logger.info('Done.')
  end

end
