class Writing

  def self.tag_article(slug, warn_missing = true)
    slug_file = "tmp/checkout/vhp-writing/tags/#{slug}.md"
    begin
      return File.read slug_file
    rescue
      $stderr.puts "WARNING: #{slug_file} not found" if warn_missing
      return ''
    end
  end

  def self.event_article(slug, warn_missing = true)
    slug_file = "tmp/checkout/vhp-writing/events/#{slug}.md"
    begin
      return File.read slug_file
    rescue
      $stderr.puts "WARNING: #{slug_file} not found" if warn_missing
      return ''
    end
  end

  def self.embed_details(str, model)
    new_str = str.strip

    # puts("#{model.commit.notes}\n\n\n")

    new_str.gsub!(':title:',       model.title) if model.respond_to? :title
    new_str.gsub!(':description:', model.description) if model.respond_to? :description
    new_str.gsub!(':type:',        model.type) if model.respond_to? :type
    new_str.gsub!(':commit_hash:', model.commit.commit_hash) if model.respond_to? :commit and model.commit.respond_to? :commit_hash
    new_str.gsub!(':date:',        model.date.rfc2822) if model.respond_to? :date

    # if model.class == Fix
    #   new_str.gsub!(':notes~insertions:', model.commit.notes['insertions'])
    #   new_str.gsub!(':notes~deletions:', model.commit.notes['deletions'])
    # end

    new_str = new_str.split(/(:notes[~\w]*:)/).each do |note|
      notes_tag = note.scan(/~(\w+)/).flatten
      # p notes_tag
      # p model.notes
      if !notes_tag.empty?
        if model.class == Fix || model.class == Vcc
          note.gsub!(/:notes[~\w]*:/, model.commit.notes.dig(*notes_tag).to_s)
        elsif !model.notes.empty?
          note.gsub!(/:notes[~\w]*:/, model.notes.dig(*notes_tag).to_s)
        end
      end
      # unless notes_tag.empty? || model.notes.empty?
      #   note.gsub!(/:notes[~\w]*:/, model.notes.dig(*notes_tag).to_s)
      # end
    end

    # return new_str
    # puts(new_str.join)
    return new_str.join
  end

  # This is a more updated version of embed_details - caller customizes the embeds.
  # Only requirement is that the keys are :like_this:
  def self.interpolate_details(template, embeds)
     template.gsub /:[\w]+:/, embeds
  end

end
