require 'git'
require 'yaml'
require 'fileutils'
require 'find'
require 'timing_logger'
require_all 'lib/event_generators/*.rb'
require_all 'lib/loaders/*.rb'
require_all 'lib/taggers/*.rb'

# Clones, builds, and manipulates data for the projects.
class DataBuilder 
  # Project has a name and designated logger 
  def initialize(project_name)
    @project_name = project_name
    @logger = TimingLogger.new(STDOUT, "data:#{project_name}")
    @repo_name = "#{project_name}-vulnerabilities"
    @git_address = "git://github.com/VulnerabilityHistoryProject/#{@repo_name}.git"
    @git_dir = "./tmp/checkout/#{@repo_name}"
    @git_branch = ENV['VHP_DATA_BRANCH'] || 'master'
  end
  
  # Checks to see if the project is currently built.
  def check_exist
    if Project.exists? subdomain: @project_name
      puts "\n\nWARNING: " + @project_name + " data already loaded. Run data:clear first."
    end
  end
  
  # Clones project data from the set Git repository.
  def clone_git_repo
    @logger.info "Removing git folders..."
    FileUtils.rm_rf @git_dir if (File.exist?(@git_dir))
    @logger.info "Cloning repo from GitHub on #{@git_branch}..."
    
    g = Git.clone(@git_address, 
      @repo_name,
      path: './tmp/checkout',
      branch: @git_branch,
      depth: 1)
      @logger.info "Loaded data version: #{g.object('HEAD').sha[0..10]}"
    end
    
  # Load base data into db.
  def load_data
    ProjectLoader.new.load_data(@git_dir)
    project = Project.find_by(subdomain: @project_name)
    [
      GitLoader,
      CodeNoteLoader,
      ReleaseLoader,
      VulnerabilityLoader,
    ].each do |loader|
      @logger.info "Running #{loader}..."
      loader.new.load_data(@git_dir, project)
    end
  end
  
  # Load only vulnerability YMLs in - for merging-and-testing PRs efficiently.
  def load_vulns_only
    ProjectLoader.new.load_data(@git_dir)
    project = Project.find_by(subdomain: @project_name)
    [
      VulnerabilityLoader,
    ].each do |loader|
      @logger.info "Running #{loader}..."
      loader.new.load_data(@git_dir, project)
    end
  end
  
  # Generate event models.
  def generate_events
    project = Project.find_by(subdomain: @project_name)
    [
      VulnerabilityEvents,
      SameCweEvents,
      SameDirectoryEvents,
      FixEvents,
      VccEvents,
      BountyEvents
    ].each do |generator|
      @logger.info "Generating #{generator.to_s.tableize.humanize.downcase}"
      generator.new(project).generate
    end
    @logger.info "Generating weekly report events and tags"
    WeeklyReportEvents.new(project).generate(@git_dir)
  end
  
  # Generate and apply tags.
  def generate_tags
    project = Project.find_by(subdomain: @project_name)
    [
      LifetimeTagger,
      BountyTagger,
      DEPSTagger,
      ErrorOfOmissionTagger,
      CWETagger,
      CVSSTagger,
      DiscoveryTagger,
      ErrorOfOmissionTagger,
      LanguageTagger,
      LessonsTagger,
      FixTagger,
      SubsystemTagger,
      UnitTestTagger,
      VCCTagger,
      ForgottenCheckTagger,
      StackTraceTagger,
      VouchTagger,
      DiscussionTagger,
      SandBoxTagger,
      SpecificationTagger,
      AutoDiscoverableTagger
      I18nTagger
    ].each do |tagger|
      @logger.info "Tagging with #{tagger}"
      t = tagger.new(project)
      t.create_tags
      t.apply_tags
    end
    orig = OriginTagger.new(project)
    orig.create_tags
    orig.apply_tags(@git_dir)
    
    project_tagger = ProjectTagger.new(@git_dir, project)
    project_tagger.create_tags
    project_tagger.apply_tags
  end
end
  