require 'git'
require 'yaml'
require 'fileutils'
require 'find'
require 'timing_logger'
require_relative 'project_constants'
require_relative 'version'
require_all 'lib/event_generators/*.rb'
require_all 'lib/loaders/*.rb'
require_all 'lib/taggers/*.rb'

# Clones, builds, and aggregates data for the projects.
class DataBuilder
  # Project has a name and designated logger
  def initialize
    @logger = TimingLogger.new(STDOUT, "data:build")
    @logger.clear_warning_logs!
    @logger.info "Data build starting. PID: #{Process.pid}"

    @git_branch = ENV['VHP_DATA_BRANCH'] || 'master'

    @vuln_git_address = "https://github.com/VulnerabilityHistoryProject/vulnerabilities.git"
    @vuln_git_dir = "./tmp/checkout/vulnerabilities"
    @mining_git_address = "https://github.com/VulnerabilityHistoryProject/vhp-mining.git"
    @mining_git_dir = "./tmp/checkout/vhp-mining"

    GC.auto_compact = true
  end

  # Checks to see if the data is currently built.
  def check_exist
    @logger.warn "Data already loaded. Run data:clear first." if Project.any?
  end

  # Clones project data from the set Git repository.
  def clone_vuln_repo
    @logger.info "Removing vulnerabilities git folder..."
    FileUtils.rm_rf @vuln_git_dir if File.exist?(@vuln_git_dir)

    @logger.info "Cloning vuln repo from GitHub on #{@git_branch}..."
    g = Git.clone(@vuln_git_address, 'vulnerabilities',
      path: './tmp/checkout',
      branch: @git_branch,
      depth: 1)

    version_file_path = "./tmp/checkout/vulnerabilities/version.yml"
    raw_version = YAML.load_file(version_file_path)
    version = raw_version["version"] #this is the version
    current_commit_hash = g.object('HEAD').sha[0..10]

    version_commit = version + "-" + current_commit_hash
    @logger.info "Loaded vulnerability data version: #{version_commit}"
    VhpMetadata.create(key: 'data version', value: version_commit)
  end

  def clone_mining_repo
    @logger.info "Removing vhp-mining git folders..."
    FileUtils.rm_rf @mining_git_dir if File.exist?(@mining_git_dir)

    @logger.info "Cloning mining repo from GitHub on #{@git_branch}..."
    g = Git.clone(@mining_git_address, 'vhp-mining',
      path: './tmp/checkout',
      branch: @git_branch,
      depth: 1)

    mining_sha = g.object('HEAD').sha[0..10]
    @logger.info "Loaded mining data version: #{mining_sha}"
    VhpMetadata.create(key: 'vhp-mining version', value: mining_sha)
  end

  def save_web_version
    # TOOD Doesn't work on Heroku, disabling for now but would be nice to have
    # web_version = VHP_WEB_VERSION + "-" + Git.open('.').object('HEAD').sha[0..10]
    web_version = VHP_WEB_VERSION
    @logger.info "Loading to web version: #{web_version}"
    VhpMetadata.create(key: 'web version', value: web_version)
    VhpMetadata.create(key: 'web version build time', value: Time.now.to_s)
  end

  # Load base data into db.
  def load_data
    [
      ProjectLoader.new(@vuln_git_dir),
      GitLoader.new(@mining_git_dir, @vuln_git_dir),
      # CodeNoteLoader.new(@vuln_git_dir),
      # ReleaseLoader.new(@vuln_git_dir),
      VulnerabilityLoader.new(@vuln_git_dir),
      CurationTemplateLoader.new(@vuln_git_dir),
    ].each do |loader|
      @logger.info "Running #{loader.class}..."
      loader.load_data
      GC.start  # triggering garbage collection
    end
  end

  # Load only vulnerability YMLs in - for merging-and-testing PRs efficiently.
  def load_vulns_only
    [
      ProjectLoader.new(@vuln_git_dir),
      VulnerabilityLoader.new(@vuln_git_dir),
    ].each do |loader|
      @logger.info "Running #{loader.class}..."
      loader.load_data
    end
  end

  # Generate event models.
  def generate_events
    TagGrouping.build_all!
    [
      VulnerabilityEvents,
      SameCweEvents,
      SameDirectoryEvents,
      FixEvents,
      VccEvents,
      BountyEvents
    ].each do |generator|
      @logger.info "Generating #{generator.to_s.tableize.humanize.downcase}"
      generator.new.generate
      GC.start
    end
    @logger.info "Generating weekly report events and tags"
    WeeklyReportEvents.new.generate(@vuln_git_dir, @mining_git_dir)
  end

  # Generate and apply tags.
  def generate_tags
    [
      LifetimeTagger,
      BountyTagger,
      DEPSTagger,
      ErrorOfOmissionTagger,
      CWETagger,
      CVSSTagger,
      DiscoveryTagger,
      ErrorOfOmissionTagger,
      LanguageTagger,
      LessonsTagger,
      FixTagger,
      SubsystemTagger,
      UnitTestTagger,
      VCCTagger,
      ForgottenCheckTagger,
      OrderOfOperationsTagger,
      StackTraceTagger,
      VouchTagger,
      DiscussionTagger,
      SandBoxTagger,
      SpecificationTagger,
      AutoDiscoverableTagger,
      I18nTagger,
      UtilTagger,
      ProjectTagger
    ].each do |tagger|
      @logger.info "Tagging with #{tagger}"
      t = tagger.new
      t.create_tags
      t.apply_tags
    end
    @logger.info "Tagging with OriginTagger"
    orig = OriginTagger.new
    orig.create_tags
    orig.apply_tags(@vuln_git_dir, @mining_git_dir)
  end
end
