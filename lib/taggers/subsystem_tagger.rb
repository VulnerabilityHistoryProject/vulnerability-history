require_relative '../writing'
class SubsystemTagger

  def initialize(project)
    @project = project
    @cache = {}
    @log = TimingLogger.new(STDOUT, 'data:tag:subsystem')
  end

  def create_tags
    # Collect all tags from all project's vulnerabilities
    subs = Vulnerability.where(project: @project)
                        .select("DISTINCT notes->'subsystem'->'name' AS subs")
                        .map {|rs| rs.subs }
                        .flatten # handle arrays
                        .compact # remove nil
    subs.each do |sub|
      name = normalized sub
      begin
        sname = shortname(name)
        t = Tag.find_by(shortname: sname) || Tag.create!(
          name: "#{@project.name} subsystem: #{name}",
          shortname: sname,
          color: @project.fg_color,
          icon: 'cogs',
          description: <<~EOS
            #{Writing.tag_article(sname, false)}

            #{Writing.tag_article('subsystem')}
          EOS
        )
        @cache[name] = t
      rescue => e
        @log.warn "Bad subsystem insert: #{sub}. Full message: #{e.message}"
      end
    end
  end

  def apply_tags
    Vulnerability.where(project: @project).each do |v|
      Array(v.notes.dig('subsystem', 'name')).each do |sub|
        unless sub.empty?
          t = @cache[normalized(sub)]
          VulnerabilityTag.create!(vulnerability: v, tag: t)
        end
      end
    end
  end

  def normalized(name)
    name.to_s.downcase.strip
  end

  def shortname(name)
    "subsystem-#{@project.subdomain}-#{name.to_s.strip.parameterize}"
  end
end
