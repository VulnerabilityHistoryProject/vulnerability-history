require_relative '../writing'
class SubsystemTagger

  def initialize
    @log = TimingLogger.new(STDOUT, 'data:tag:subsystem')
  end

  def create_tags
    @cache = {}
    # Collect all tags from all project's vulnerabilities
    Project.all.each do |project|
      subs = Vulnerability.select("DISTINCT notes->'subsystem'->'name' AS subs")
        .where(project_id: project.id)
        .map {|rs| rs.subs }
        .flatten # handle arrays
        .compact # remove nil
      subs.each do |sub|
        name = normalized sub
        begin
          sname = shortname(project.subdomain, name)
          t = Tag.find_by(shortname: sname) || Tag.create!(
            name: "#{project.name} subsystem: #{name}",
            shortname: sname,
            color: project.fg_color,
            icon: 'cogs',
            description: <<~EOS
              #{Writing.tag_article(sname, false)}

              #{Writing.tag_article('subsystem')}
            EOS
            family: ''
          )
          @cache[name] = t
        rescue => e
          @log.warn "Bad subsystem insert: #{sub}. Full message: #{e.message}"
        end
      end
    end
  end

  def apply_tags
    Vulnerability.all.each do |v|
      Array(v.notes.dig('subsystem', 'name')).each do |sub|
        unless sub.empty?
          t = @cache[normalized(sub)]
          VulnerabilityTag.create!(vulnerability: v, tag: t)
        end
      end
    end
  end

  def normalized(name)
    name.to_s.downcase.strip
  end

  def shortname(subdomain, name)
    "subsystem-#{subdomain}-#{name.to_s.strip.parameterize}"
  end
end
