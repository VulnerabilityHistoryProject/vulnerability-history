require 'set'
class LanguageTagger
  def create_tags
    @c_tag = Tag.create!(
        name: 'Language: C',
        shortname: 'C',
        color: '#890808',
        description: "The fix for this vulnerability involved changing C code"
    )

    @cpp_tag = Tag.create!(
        name: 'Language: C++',
        shortname: 'C++',
        color: '#890808',
        description: "The fix for this vulnerability involved changing C++ code"
    )

    @js_tag = Tag.create!(
        name: 'Language: Javascript',
        shortname: 'JS',
        color: '#890808',
        description: "The fix for this vulnerability involved changing Javascript code"
    )

    @java_tag = Tag.create!(
        name: 'Language: Java',
        shortname: 'Java',
        color: '#890808',
        description: "The fix for this vulnerability involved changing Java code"
    )

    @py_tag = Tag.create!(
        name: 'Language: Python',
        shortname: 'Python',
        color: '#890808',
        description: "The fix for this vulnerability involved changing Python code"
    )
  end

  def apply_tags
    Vulnerability.all.each do |v|
      findTags(v)
      @tags.each do |t|
        if t
          VulnerabilityTag.create!(
            vulnerability: v,
            tag: t
          )
        end
      end
    end
  end

  def findTags(v)
    @tags = Set[]
    Filepath.vulnerable(v).each do |vf|
      fields = vf.filepath.split('.')
      extension = fields[-1]
      if (extension == 'c')
        @tags << @c_tag
      elsif (extension == 'cc' or extension == 'cpp')
        @tags << @cpp_tag
      elsif (extension == 'java')
        @tags << @java_tag
      elsif (extension == 'js')
        @tags << @js_tag
      elsif (extension == 'py')
        @tags << @py_tag
      end
    end
  end
end
