require 'set'
require_relative '../writing'
class LanguageTagger

  def initialize
  end

  def create_tags
    @c_tag = Tag.find_or_create_by!(
        name: 'Language: C',
        shortname: 'language-c',
        color: '#890808',
        icon: 'c',
        description: Writing.tag_article('language-c'),
        family: 'language',
        tag_grouping: TagGrouping.find_by(slug: 'language'),
    )

    @cpp_tag = Tag.find_or_create_by!(
        name: 'Language: C++',
        shortname: 'language-cpp',
        icon: 'cpp',
        color: '#890808',
        description: Writing.tag_article('language-cpp'),
        family: 'language',
        tag_grouping: TagGrouping.find_by(slug: 'language'),
    )

    @js_tag = Tag.find_or_create_by!(
        name: 'Language: Javascript',
        shortname: 'language-js',
        icon: 'javascript',
        color: '#890808',
        description: Writing.tag_article('language-js'),
        family: 'language',
        tag_grouping: TagGrouping.find_by(slug: 'language'),
    )

    @java_tag = Tag.find_or_create_by!(
        name: 'Language: Java',
        shortname: 'language-java',
        icon: 'java',
        color: '#890808',
        description: Writing.tag_article('language-java'),
        family: 'language',
        tag_grouping: TagGrouping.find_by(slug: 'language'),
    )

    @py_tag = Tag.find_or_create_by!(
        name: 'Language: Python',
        shortname: 'language-python',
        icon: 'python',
        color: '#890808',
        description: Writing.tag_article('language-python'),
        family: 'language',
        tag_grouping: TagGrouping.find_by(slug: 'language'),
    )

    @rb_tag = Tag.find_or_create_by!(
        name: 'Language: Ruby',
        shortname: 'language-ruby',
        color: '#CC0505',
        icon: 'ruby',
        description: Writing.tag_article('language-ruby'),
        family: 'language',
        tag_grouping: TagGrouping.find_by(slug: 'language'),
    )
  end

  def apply_tags
    Vulnerability.all.each do |v|
      findTags(v)
      @tags.each do |t|
        if t
          VulnerabilityTag.create!(
            vulnerability: v,
            tag: t
          )
        end
      end
    end
  end

  def findTags(v)
    @tags = Set[]
    Filepath.vulnerable(v).each do |vf|
      fields = vf.filepath.split('.')
      extension = fields[-1]
      if (extension == 'c')
        @tags << @c_tag
      elsif (extension == 'cc' or extension == 'cpp')
        @tags << @cpp_tag
      elsif (extension == 'java')
        @tags << @java_tag
      elsif (extension == 'js')
        @tags << @js_tag
      elsif (extension == 'rb')
        @tags << @rb_tag
      elsif (extension == 'py')
        @tags << @py_tag
      end
    end
  end
end
