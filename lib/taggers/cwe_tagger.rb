class CWETagger

  def create_tags
    @tagged_cwes.each do |cwe_id, entry|
        Tag.find_or_create_by!(entry)
    end
  end

  def apply_tags
    vuln_tags = []
    untagged = []
    Vulnerability.all.each do |v|
      if @tagged_cwes.key? normalized_cwe_string(v.notes['CWE'])
        vuln_tags << VulnerabilityTag.new(
          vulnerability: v,
          tag: find_tag(v.notes['CWE']),
          note: ''
        )
      else
        puts "WARNING: Un-tagged CWE: #{v.notes['CWE']} in #{v.cve}" unless v.notes['CWE'].to_s.blank?
        untagged << normalized_cwe_string(v.notes['CWE'])
      end
    end
    VulnerabilityTag.import vuln_tags
    # puts "Untagged, normalized: #{untagged.sort}"
  end

  # If people entered in text here, just take the number
  # e.g. CWE-122 ==> 122
  def normalized_cwe_string(cwe)
    cwe.to_s.gsub(/[^0-9]/,'').to_i
  end

  def find_tag(cwe_str)
    shortname = @tagged_cwes[normalized_cwe_string(cwe_str)][:shortname]
    Tag.find_by(shortname: shortname)
  end

  # TODO When we do Issue #332, this should not be hardcoded anymore
  def initialize
    @tagged_cwes = {
      20 => {
        name: 'CWE-20: Improper Input Validation',
        shortname: 'cwe-20',
        color: '#99ccff',
        description: <<~EOS
          Input validation is the defensive coding practice of blocking data unless it passes rules. This is typically done with whitelisting or blacklisting. Doing this correctly typically requires thorough testing, making automated regression testing a more worthwhile practice.

          From the Common Weakness Enumeration:

          > When software does not validate input properly, an attacker is able to craft the input in a form that is not expected by the rest of the application. This will lead to parts of the system receiving unintended input, which may result in altered control flow, arbitrary control of a resource, or arbitrary code execution.

          For more information, read the full article on [CWE 20](http://cwe.mitre.org/data/definitions/20.html) at the Common Weakness Enumeration.

        EOS
      },
      22 => {
        name: 'CWE-22: Path Traversal',
        shortname: 'cwe-22',
        color: '#99ccff',
        description: <<~EOS
          Also known as "Improper Limitation of a Pathname to a Restricted Directory", the Path Traversal comes from taking a file or path name from a user and failing to properly restrict the files that it can refer to. For example, using a "../" to go to the parent directory.

          For more information, read the full article on [CWE 22](http://cwe.mitre.org/data/definitions/22.html) at the Common Weakness Enumeration.

        EOS
      },
      79 => {
        name: 'CWE-79: Cross-site Scripting',
        shortname: 'cwe-79',
        color: '#99ccff',
        description: <<~EOS
          Also known as "Improper Neutralization of Input During Web Page Generation" or XSS, the XSS comes from injecting characters into a web application such that it executes on another user's machine.

          For more information, read the full article on [CWE 79](http://cwe.mitre.org/data/definitions/79.html) at the Common Weakness Enumeration.

        EOS
      },
      119 => {
        name: 'CWE-119: Memory Corruption',
        shortname: 'cwe-119',
        color: '#99ccff',
        description: <<~EOS
          Also called "Improper Restriction of Operations within the Bounds of a Memory Buffer", this is a generic term for the mis-management of memory. This problem can be something as specific as the classic buffer overflows (e.g. [CWE-122 Heap-based Buffer Overflow](http://cwe.mitre.org/data/definitions/416.html), [CWE-120 Buffer Overflow](http://cwe.mitre.org/data/definitions/120.html),
          [CWE-119 Use after free](http://cwe.mitre.org/data/definitions/119.html)

          For more information, read the full article on [CWE 416](http://cwe.mitre.org/data/definitions/416.html) at the Common Weakness Enumeration.

          EOS
        },
      122 => {
        name: 'CWE-122: Heap-based Buffer Overflow',
        shortname: 'cwe-122',
        color: '#99ccff',
        description: <<~EOS
          Heap-based buffer overflows are memory corruption problems that often result in crashes, but can result in aribtrary code execution.

          From the Common Weakness Enumeration:

          > A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc().


          For more information, read the full article on [CWE 122](http://cwe.mitre.org/data/definitions/122.html) at the Common Weakness Enumeration.

        EOS
      },
      189 => {
        name: 'CWE-189: Numeric Errors',
        shortname: 'cwe-189',
        color: '#99ccff',
        description: <<~EOS
          This is a broad category in the CWE relating to the mishandling of numbers, such as casting types, arithmetic problems, or other domain-specific miscalculations.

          For more information, read the full article on [CWE 189](http://cwe.mitre.org/data/definitions/189.html) at the Common Weakness Enumeration.

          EOS
        },
      264 => {
        name: 'CWE-264: Permissions, Privileges, and Access Controls',
        shortname: 'cwe-264',
        color: '#99ccff',
        description: <<~EOS
          This is a broad category in the CWE relating to security features that restrict access via permissions, privileges, and access controls.

          For more information, read the full article on [CWE 264](http://cwe.mitre.org/data/definitions/264.html) at the Common Weakness Enumeration.

          EOS
        },
      284 => {
        name: 'CWE-284: Improper Access Control',
        shortname: 'cwe-284',
        color: '#99ccff',
        description: <<~EOS
          For more information, read the full article on [CWE 284](http://cwe.mitre.org/data/definitions/284.html) at the Common Weakness Enumeration.

          EOS
        },
      346 => {
        name: 'CWE-346: Origin Validation Error',
        shortname: 'cwe-346',
        color: '#99ccff',
        description: <<~EOS
          This vulnerability is when not properly verify the source of communication is valid."

          For more information, read the full article on [CWE 346](http://cwe.mitre.org/data/definitions/346.html) at the Common Weakness Enumeration.

          EOS
        },
      416 => {
        name: 'CWE-416: Use After Free',
        shortname: 'cwe-416',
        color: '#99ccff',
        description: <<~EOS
          A "use after free" vulnerability is a memory corruption problem that results from attempting to use memory after it is freed. This typically leads to crashes, but in some specialized circumstances it can lead to arbitrary code execution.

          For more information, read the full article on [CWE 416](http://cwe.mitre.org/data/definitions/416.html) at the Common Weakness Enumeration.

        EOS
      },
      451 => {
        name: 'CWE-451: UI Misrepresentation of Critical Information',
        shortname: 'cwe-451',
        color: '#99ccff',
        description: <<~EOS
          From the CWE: "The user interface (UI) does not properly represent critical information to the user, allowing the information - or its source - to be obscured or spoofed. This is often a component in phishing attacks."

          For more information, read the full article on [CWE 451](http://cwe.mitre.org/data/definitions/451.html) at the Common Weakness Enumeration.

        EOS
      },
      680 => {
        name: 'CWE-680: Integer Overflow to Buffer Overflow',
        shortname: 'cwe-680',
        color: '#99ccff',
        description: <<~EOS
          When calculating the size of a buffer, a number was allowed to wrap around. This lead to memory corruption, which could be a crash or even arbitrary code execution.

          For more information, read the full article on [CWE 680](http://cwe.mitre.org/data/definitions/680.html) at the Common Weakness Enumeration.

        EOS
      },
    }
  end

end
