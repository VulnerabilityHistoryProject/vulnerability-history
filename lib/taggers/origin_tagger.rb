require 'yaml'
require_relative '../writing'

class OriginTagger

  def initialize
  end

  def create_tags
    @origin_tag = Tag.find_or_create_by!(
      name: 'Origin Vulnerability',
      shortname: 'Origin',
      color: '#d845e0',
      icon: 'origin',
      description: Writing.tag_article('origin'),
      family: 'origin',
      tag_grouping: TagGrouping.find_by(slug: 'lifetime'),
    )
  end

  def make_where(commits)
    where = "commit_hash in ("
    commits.each do |commit|
      where += "'#{commit}',"
    end
    where = where[0...-1]
    return where + ')'
  end

  def apply_tags(vuln_git_dir, mining_git_dir)
    vtags = []
    commits = []

    Dir["#{vuln_git_dir}/projects/*.yml"] do |f|
      yml = load_yml_the_vhp_way(f)
      commits += yml[:origin_commits].map { |entry| entry[:commit] }
    end

    unless commits.empty?
      vulns = Vulnerability
                .joins([:project, vccs: :commit])
                .where(make_where(commits))
      vulns.each do |v|
        t = VulnerabilityTag.new(
          vulnerability: v,
          importance: 0.25, # somewhat important
          tag: @origin_tag
        )
        vtags << t
      end
      VulnerabilityTag.import vtags
    end
  end
end
