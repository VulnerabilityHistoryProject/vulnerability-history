require_relative '../writing'
class FixTagger

  def initialize(project)
    @project = project
  end

  def create_tags
    @big_fix_tag = Tag.find_or_create_by(
      name: 'Fix: Big',
      shortname: 'big-fix',
      color: '#9FE69F',
      icon: 'big'
      description: Writing.tag_article('big-fix')
    )
    @small_fix_tag = Tag.find_or_create_by(
      name: 'Fix: Small',
      shortname: 'small-fix',
      color: '#9FE69F',
      icon: 'small',
      description: Writing.tag_article('small-fix')
    )
  end

  def apply_tags
    tags = []
    query = "SELECT DISTINCT vulnerabilities.id,
                    SUM(total_churn) as total_churn,
                    SUM(insertions) as insertions,
                    SUM(deletions) as deletions
              FROM commit_filepaths
                INNER JOIN fixes ON commit_filepaths.commit_id = fixes.commit_id
                INNER JOIN vulnerabilities ON fixes.vulnerability_id = vulnerabilities.id
              WHERE vulnerabilities.project_id = '#{@project.id}'
              GROUP BY vulnerabilities.id,fixes.commit_id
              HAVING SUM(total_churn) > 100;"
    # no, sql injection isn't possible here because project.id can only be an int.
    results = ActiveRecord::Base.connection.execute(query)

    results.each do |r|
      t = VulnerabilityTag.new(
        vulnerability_id: r['id'],
        tag: @big_fix_tag,
        importance: 0.45, # somewhat important
        note: "#{r['total_churn']} lines changed, #{r['insertions']} added / #{r['deletions']} deleted"
      )
      tags << t
    end

    query = "SELECT DISTINCT vulnerabilities.id,
                    SUM(total_churn) as total_churn,
                    SUM(insertions) as insertions,
                    SUM(deletions) as deletions
               FROM commit_filepaths
                    INNER JOIN fixes ON commit_filepaths.commit_id = fixes.commit_id
                    INNER JOIN vulnerabilities ON fixes.vulnerability_id = vulnerabilities.id
              WHERE vulnerabilities.project_id = '#{@project.id}'
              GROUP BY vulnerabilities.id,fixes.commit_id
              HAVING SUM(total_churn) < 20;"
    results = ActiveRecord::Base.connection.execute(query)

    results.each do |r|
      t = VulnerabilityTag.new(
        vulnerability_id: r['id'],
        tag: @small_fix_tag,
        importance: 0.45, # somewhat important
        note: "#{r['total_churn']} lines changed, #{r['insertions']} added / #{r['deletions']} deleted"
      )
      tags << t
    end

    VulnerabilityTag.import tags
  end
end
