require_relative '../writing'
require_relative '../timing_logger'

class LifetimeTagger

  @@SECONDS_IN_DAY = 86400.0
  @@SECONDS_IN_YEAR = 31556952.0

  def initialize
  end

  def make_tag(name, shortname, color)
    Tag.find_or_create_by!(
      name: "Lifetime: #{name}",
      shortname: "lifetime-#{shortname}",
      icon: 'hourglass',
      color: color,
      description: Writing.tag_article('lifetime'),
      family: 'lifetime',
      tag_grouping: TagGrouping.find_by(slug: 'lifetime'),
    )
  end

  def create_tags
    @tag_hash = {
      0..30.days         => make_tag('Less than 30 days',  '30d', '#d6989b'),
      30.days..90.days   => make_tag('30 to 90 days',      '3mo', '#bf777a'),
      90.days..180.days  => make_tag('90 to 180 days',     '90d180d', '#bd5e62'),
      180.days..1.year   => make_tag('180 days to 1 year', '180d1y', '#bd4b51'),
      1.year..2.years    => make_tag('1 to 2 years',       '1y2y', '#b83035'),
      2.years..5.years   => make_tag('2 to 5 years',       '2y5y', '#ba181el'),
      5.years..100.years => make_tag('5+ years',           '5y', '#c4020b'),
    }
  end

  # This is my arbtirary attempt to scale by compute_importance
  # Based on existing HTTPD data, the longest lifetime is 4000 days
  # Scaling that to about 99% importance is what we're going for
  @@LIFETIME_SCALE = 8.6
  def compute_importance(duration_s)
    Math.log(duration_s) / @@LIFETIME_SCALE
  end

  def apply_tags(logger = TimingLogger.new(STDOUT, 'data:taggers:lifetime'))
    tags = []
    query = "SELECT  v.id, v.cve,
              MAX(fix_commit.date_created) fix_date,
              MIN(vcc_commit.date_created) vcc_date,
              MAX(fix_commit.date_created) - MIN(vcc_commit.date_created) AS duration_raw,
              EXTRACT(EPOCH FROM
                (MAX(fix_commit.date_created) - MIN(vcc_commit.date_created)))
                AS duration
             FROM vulnerabilities AS v
              INNER JOIN fixes AS fix ON fix.vulnerability_id = v.id
              INNER JOIN vccs AS vcc ON vcc.vulnerability_id = v.id
              INNER JOIN commits AS vcc_commit ON vcc_commit.id = vcc.commit_id
              INNER JOIN commits AS fix_commit ON fix_commit.id = fix.commit_id
             GROUP BY v.id
             "
    results = ActiveRecord::Base.connection.execute(query)
    results.each do |v|
      if v['duration'] < 0
        logger.warn "Lifetime of VCC to fix for #{v['cve']} is negative"
      else
        dur_days = '%.1f' % (v['duration'] / @@SECONDS_IN_DAY)
        dur_years = '%.1f' % (v['duration'] / @@SECONDS_IN_YEAR)
        note = "#{dur_days} days, or #{dur_years} years"
        t = VulnerabilityTag.new(
          vulnerability_id: v['id'],
          importance: compute_importance(v['duration']),
          tag: (@tag_hash.find { |(range, _t)| range.include? v['duration'] })[1],
          note: note
        )
        tags << t
      end
    end
    VulnerabilityTag.import tags
  end
end
