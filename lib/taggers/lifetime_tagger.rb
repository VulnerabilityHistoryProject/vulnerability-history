require_relative '../writing'

class LifetimeTagger

  def initialize(project)
    @project = project
  end

  def make_tag(shortname, name)
    Tag.find_or_create_by!(
      name: "Lifetime: #{name}",
      shortname: "lifetime-#{name}",
      icon: 'hourglass',
      color: '#e0454d',
      description: Writing.tag_article('long-running')
    )
  end

  def create_tags
    @tag_hash = {
      0..30.days         => make_tag('Less than 30 days month', 'lifetime-30d'),
      30.days..90.days   => make_tag('30 to 90 days', 'lifetime-3mo'),
      90.days..180.days  => make_tag('90 to 180 days', 'lifetime-90d180d'),
      180.days..1.year   => make_tag('180 days to 1 year', 'lifetime-180d1y'),
      1.year..2.years    => make_tag('1 to 2 years', 'lifetime-1y2y'),
      2.years..5.years   => make_tag('2 to 5 years', 'lifetime-2y5y'),
      5.years..100.years => make_tag('5+ years', 'lifetime-5y'),
    }
  end

  def apply_tags
    logger = Logger.new(STDOUT, progname: 'data:taggers:lifetime')
    tags = []
    query = "SELECT  v.id, v.cve,
              EXTRACT(MILLISECONDS FROM
                (MAX(fix_commit.date_created) - MIN(vcc_commit.date_created)))
                AS duration
             FROM vulnerabilities AS v
              INNER JOIN fixes AS fix ON fix.vulnerability_id = v.id
              INNER JOIN vccs AS vcc ON vcc.vulnerability_id = v.id
              INNER JOIN commits AS vcc_commit ON vcc_commit.id = vcc.commit_id
              INNER JOIN commits AS fix_commit ON vcc_commit.id = fix.commit_id
             GROUP BY v.id
             HAVING v.project_id = '#{@project.id}'
             " # no SQL injection here!!
    results = ActiveRecord::Base.connection.execute(query)
    results.each do |v|
      puts v['duration']
      if v['duration'] < 0
        logger.warn "Lifetime of VCC to fix for #{v['cve']} is negative"
      else
        puts "We're good!"
        t = VulnerabilityTag.new(
          vulnerability_id: v['id'],
          importance: 0.4, # Pretty important. TODO scale this out according to multiple tags, one for each year. e.g. Lifetime: 1 year, etc. Then change importance based on that.
          tag: (@tag_hash.find { |(rng, _t)| rng.include? v['duration'] })[1]
        )
        tags << t
      end
    end
    VulnerabilityTag.import tags
  end
end
