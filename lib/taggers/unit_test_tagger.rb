require_relative '../writing'
class UnitTestTagger

  def initialize
  end

  def create_tags
    @lacked_tag = Tag.find_by(shortname: 'lacked-test')
    if not @lacked_tag
      @lacked_tag = Tag.create!(
          name: 'Lesson: Lacked Test',
          shortname: 'lacked-test',
          color: '#009696',
          icon: 'running',
          description: Writing.tag_article('lacked-test'),
          family: 'unit_test',
          tag_grouping: TagGrouping.find_by(slug: 'testing'),
      )
    end

    @untested_tag = Tag.find_by(shortname: 'untested')
    if not @untested_tag
      @untested_tag = Tag.create!(
          name: 'Lesson: Fix Untested',
          shortname: 'untested',
          color: '#009696',
          icon: 'stamp',
          description: Writing.tag_article('untested'),
          family: 'unit_test',
          tag_grouping: TagGrouping.find_by(slug: 'testing'),
      )
    end
  end

  def apply_tags
    Vulnerability.all.each do |v|
      tags = findTags(v)
      tags.each do |t|
        VulnerabilityTag.create!(
                            vulnerability: v,
                            tag: t,
                            importance: 0.35, # these are higher on the importance scale, but all the same for this tagger
                            note: <<~EOS
                              #{v.notes.dig('unit_tested', 'answer').to_s.sub("\n", ' ')}
                            EOS
        )
      end
    end
  end

  def findTags(v)
    tags = []
    if v.notes.dig('unit_tested', 'code') == false
      tags << @lacked_tag
    end
    if v.notes.dig('unit_tested', 'fix') == true
      tags << @untested_tag
    end
    return tags
  end

end
