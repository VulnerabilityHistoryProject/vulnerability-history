require_relative '../writing'

class DiscoveryTagger

  def initialize(project)
    @project = project
  end

  def create_tags
    @automated_tag = Tag.find_by(shortname: 'discover-automated')
    if not @automated_tag
      @automated_tag = Tag.create!(
          name: 'Discovered Automatically',
          shortname: 'discover-automated',
          color: '#9999ff',
          icon: 'robot',
          description: Writing.tag_article('discover-automated')
      )
    end

    @manual_tag = Tag.find_by(shortname: 'manual')
    if not @manual_tag
      @manual_tag = Tag.create!(
          name: 'Discovered Manually',
          shortname: 'manual',
          color: '#9999ff',
          icon: 'hand-pointer',
          description: Writing.tag_article('manual')
      )
    end

    @internal_tag = Tag.find_by(shortname: 'internal')
    if not @internal_tag
      @internal_tag = Tag.create!(
          name: 'Discovered Internally',
          shortname: 'internal',
          color: '#9999ff',
          icon: 'internal',
          description: Writing.tag_article('internal')
      )
    end

    @external_tag = Tag.find_by(shortname: 'external')
    if not @external_tag
      @external_tag = Tag.create!(
          name: 'Discovered Externally',
          shortname: 'external',
          color: '#9999ff',
          icon: 'external',
          description: Writing.tag_article('external')
      )
    end

    @contest_tag = Tag.find_by(shortname: 'contest')
    if not @contest_tag
      @contest_tag = Tag.create!(
          name: 'Discovered in Contest',
          shortname: 'contest',
          color: '#9999ff',
          icon: 'contest',
          description: Writing.tag_article('contest')
      )
    end
  end

  def apply_tags
    Vulnerability.where(project: @project).each do |v|
      findTags(v)
      @tags.each do |t|
        VulnerabilityTag.create!(
                            vulnerability: v,
                            tag: t,
                            importance: 0.27, #somewhat important
                            note: <<~EOS
                              #{v.notes.dig('discovered', 'answer').to_s.sub("\n", ' ')}
                            EOS
        )
      end
    end
  end

  def findTags(v)
    @tags = []
    if v.notes.dig('discovered', 'automated') == true
      @tags << @automated_tag
    end
    if v.notes.dig('discovered', 'automated') == false
      @tags << @manual_tag
    end
    if v.notes.dig('discovered', 'google') == true
       @tags << @internal_tag
    end
    if v.notes.dig('discovered', 'google') == false
      @tags << @external_tag
    end
    if v.notes.dig('discovered', 'contest') == true
      @tags << @contest_tag
    end
  end

end
