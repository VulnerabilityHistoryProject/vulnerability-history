class DiscoveryTagger

  def create_tags
    @automated_tag = Tag.find_by(shortname: 'automated')
    if not @automated_tag
      @automated_tag = Tag.create!(
          name: 'Automated Discovery',
          shortname: 'automated',
          color: '#99ccff',
          description: <<~EOS
        This tag is applied to all vulnerabilities that were discovered in an automated test.
      EOS
      )
    end

    @manual_tag = Tag.find_by(shortname: 'manual')
    if not @manual_tag
      @manual_tag = Tag.create!(
          name: 'Manual Discovery',
          shortname: 'manual',
          color: '#ff8080',
          description: <<~EOS
        This tag is applied to all vulnerabilities that were discovered manually.
      EOS
      )
    end

    @internal_tag = Tag.find_by(shortname: 'internal')
    if not @internal_tag
      @internal_tag = Tag.create!(
          name: 'Internally Found',
          shortname: 'internal',
          color: '#cccccc',
          description: <<~EOS
        This tag is applied to all vulnerabilities that were discovered internally by Google.
      EOS
      )
    end

    @external_tag = Tag.find_by(shortname: 'external')
    if not @external_tag
      @external_tag = Tag.create!(
          name: 'Externally Found',
          shortname: 'external',
          color: '#cccccc',
          description: <<~EOS
        This tag is applied to all vulnerabilities that were not discovered by Google.
      EOS
      )
    end

    @contest_tag = Tag.find_by(shortname: 'contest')
    if not @contest_tag
      @contest_tag = Tag.create!(
          name: 'Found by Contest',
          shortname: 'contest',
          color: '#cccccc',
          description: <<~EOS
        This tag is applied to all vulnerabilities that were discovered by contest.
      EOS
      )
    end
  end

  def apply_tags
    Vulnerability.all.each do |v|
      findTags(v)
      @tags.each do |t|
        VulnerabilityTag.create!(
                            vulnerability: v,
                            tag: t,
                            note: <<~EOS
                              #{v.notes.dig('discovered', 'answer').to_s.sub!("\n", ' ')}
                            EOS
        )
      end
    end
  end

  def findTags(v)
    @tags = []
    if v.notes.dig('discovered', 'automated') == true
      @tags << @automated_tag
    end
    if v.notes.dig('discovered', 'automated') == false
      @tags << @manual_tag
    end
    if v.notes.dig('discovered', 'google') == true
       @tags << @internal_tag
    end
    if v.notes.dig('discovered', 'google') == false
      @tags << @external_tag
    end
    if v.notes.dig('discovered', 'contest') == true
      @tags << @contest_tag
    end
  end

end
