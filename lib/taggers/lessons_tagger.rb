require_relative '../writing'
class LessonsTagger

  def create_tags
    @lessons = [ 'defense_in_depth', 'least_privilege', 'frameworks_are_optional', 'native_wrappers', 'distrust_input', 'security_by_obscurity', 'serial_killer', 'environment_variables', 'secure_by_default', 'yagni', 'complex_inputs']
    @tags = Hash.new
    @tags['defense_in_depth'] = Tag.find_by(shortname: 'defense')
    if not @tags['defense_in_depth']
      @tags['defense_in_depth'] = Tag.create!(
          name: 'Lesson: Defense in Depth',
          shortname: 'defense',
          color: '#009696',
          description: Writing.tag_article('defense')
      )
    end
    @tags['least_privilege'] = Tag.find_by(shortname: 'least privilege')
    if not @tags['least_privilege']
      @tags['least_privilege'] = Tag.create!(
          name: 'Lesson: Least Privilege',
          shortname: 'least privilege',
          color: '#009696',
          description: Writing.tag_article('least privilege')
      )
    end
    @tags['frameworks_are_optional'] = Tag.find_by(shortname: 'optional frameworks')
    if not @tags['frameworks_are_optional']
      @tags['frameworks_are_optional'] = Tag.create!(
          name: 'Lesson: Frameworks are Optional',
          shortname: 'optional frameworks',
          color: '#009696',
          description: Writing.tag_article('optional frameworks')
      )
    end
    @tags['native_wrappers'] = Tag.find_by(shortname: 'wrappers')
    if not @tags['native_wrappers']
      @tags['native_wrappers'] = Tag.create!(
          name: 'Lesson: Native Wrappers',
          shortname: 'wrappers',
          color: '#009696',
          description: Writing.tag_article('wrappers')
      )
    end
    @tags['distrust_input'] = Tag.find_by(shortname: 'distrust input')
    if not @tags['distrust_input']
      @tags['distrust_input'] = Tag.create!(
          name: 'Lesson: Distrust Input',
          shortname: 'distrust input',
          color: '#009696',
          description: Writing.tag_article('distrust input')
      )
    end
    @tags['security_by_obscurity'] = Tag.find_by(shortname: 'obscurity')
    if not @tags['security_by_obscurity']
      @tags['security_by_obscurity'] = Tag.create!(
          name: 'Lesson: Security By Obscurity',
          shortname: 'obscurity',
          color: '#009696',
          description: Writing.tag_article('obscurity')
      )
    end
    @tags['serial_killer'] = Tag.find_by(shortname: 'serial')
    if not @tags['serial_killer']
      @tags['serial_killer'] = Tag.create!(
          name: 'Lesson: Serial Killer',
          shortname: 'serial',
          color: '#009696',
          description: <<~EOS
        This tag is applied when a lesson can be learned about serialization.
      EOS
      )
    end
    @tags['environment_variables'] = Tag.find_by(shortname: 'environment')
    if not @tags['environment_variables']
      @tags['environment_variables'] = Tag.create!(
          name: 'Lesson: Environment Variables',
          shortname: 'environment',
          color: '#009696',
          description: Writing.tag_article('environment')
      )
    end
    @tags['secure_by_default'] = Tag.find_by(shortname: 'secure by default')
    if not @tags['secure_by_default']
      @tags['secure_by_default'] = Tag.create!(
          name: 'Lesson: Secure By Default',
          shortname: 'secure by default',
          color: '#009696',
          description: Writing.tag_article('secure by default')
      )
    end
    @tags['yagni'] = Tag.find_by(shortname: 'yagni')
    if not @tags['yagni']
      @tags['yagni'] = Tag.create!(
          name: 'Lesson: You Ain\'t Gonna Need It',
          shortname: 'yagni',
          color: '#009696',
          description: Writing.tag_article('yagni')
      )
    end
    @tags['complex_inputs'] = Tag.find_by(shortname: 'complex inputs')
    if not @tags['complex_inputs']
      @tags['complex_inputs'] = Tag.create!(
          name: 'Lesson: Complex Inputs',
          shortname: 'complex inputs',
          color: '#009696',
          description: Writing.tag_article('complex inputs')
      )
    end

  end

  def apply_tags
    print Vulnerability.all.length
    Vulnerability.all.each do |v|
      findTags(v)
      @found_tags.each do |t|
        VulnerabilityTag.create!(
                            vulnerability: v,
                            tag: @tags[t],
                            note: <<~EOS
                              #{v.notes.dig('lessons', t, 'note').to_s.sub!("\n", ' ')}
                            EOS
        )
      end
    end
  end

  def findTags(v)
    @found_tags = []
    @lessons.each do |l|
      if v.notes.dig('lessons', l, 'applies')
        @found_tags << l
      end
    end
  end

end
