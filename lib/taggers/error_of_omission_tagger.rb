require_relative '../writing'
class ErrorOfOmissionTagger

  def initialize(project)
    @project = project
  end

  def create_tags
    @tag = Tag.find_or_create_by!(
      name: 'Lesson: Error of Omission',
      shortname: 'omission',
      color: '#009696',
      description: Writing.tag_article('omission')
    )
  end

  def apply_tags
    # to_number is a postgresql thing that formats the number. '9' is a format string
    errors_of_omission = Fix.joins(:vulnerability)
                            .where('vulnerabilities.project_id' => @project.id)
                            .where("
      to_number(fixes.notes->>'deletions','99999') = 0
      OR
      ( to_number(fixes.notes->>'deletions','9') > 0 AND
        ( to_number(fixes.notes->>'insertions','99999')
          / to_number(fixes.notes->>'deletions','99999') ) > 10.0
      )
    ")
    errors_of_omission.each do |fix|
      VulnerabilityTag.create!(
        vulnerability: fix.vulnerability,
        tag: @tag,
        note: if fix.notes['deletions'].to_i == 0
          "
          This fix was entirely new code. #{fix.notes['insertions'].to_i} lines of code were added. This means that the mistake made was a failure to add functionality, as opposed to incorrect functionality.
          "
        else
          "
          For every deleted line, #{fix.notes['insertions'].to_f / fix.notes['deletions'].to_f} were added (#{fix.notes['insertions'].to_i} insertions and #{fix.notes['deletions'].to_i} deletions). Since this fix involved a lot more code created than deleted, there was likely an error of omission involved in this vulnerabiliy.
          "
        end
      )
    end

  end
end
