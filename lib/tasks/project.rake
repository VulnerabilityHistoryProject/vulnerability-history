require 'git'
require 'yaml'
require 'fileutils'
require 'find'
require 'timing_logger'
require_all 'lib/event_generators/*.rb'
require_all 'lib/loaders/*.rb'
require_all 'lib/taggers/*.rb'

desc 'Holds Git repository information for the project builds.'
class BuilderData 
    attr_reader :name, :dir, :address, :branch
    def set_git_info(name, dir, address, branch)
        @name = name
        @dir = dir
        @address = address
        @branch = branch
    end
end

logger = TimingLogger.new(STDOUT, 'data:build')

chromium = BuilderData.new
chromium.set_git_info(
    'chromium-vulnerabilities',
    './tmp/checkout/chromium-vulnerabilities',
    'https://github.com/andymeneely/chromium-vulnerabilities.git',
    'master'
)

httpd = BuilderData.new
httpd.set_git_info(
    'httpd-vulnerabilities',
    './tmp/checkout/httpd-vulnerabilities',
    'git://github.com/VulnerabilityHistoryProject/httpd-vulnerabilities.git',
    'dev'
)

struts = BuilderData.new
struts.set_git_info(
    'struts-vulnerabilities',
    './tmp/checkout/struts-vulnerabilities',
    'git://github.com/VulnerabilityHistoryProject/struts-vulnerabilities.git',
    'master'
)

tomcat = BuilderData.new
tomcat.set_git_info(
    'tomcat-vulnerabilities',
    './tmp/checkout/tomcat-vulnerabilities',
    'git://github.com/VulnerabilityHistoryProject/tomcat-vulnerabilities.git',
    'master'
)

builder_sets = {
    'chromium' => chromium,
    'httpd' => httpd,
    'struts' => struts,
    'tomcat' => tomcat
}

desc 'Build Project data.'
namespace :data do

    desc 'Build Project data. Possible Projects include: chromium, httpd, struts, and tomcat. Logs task by default; type anything
          other than \'log\' to skip logging the task.'
    task :build, [:name, :logger] => :environment do |t, args|
        args.with_defaults(:logger => 'log')
        logger.info "Starting build task for project: " + args[:name].capitalize()

        if args[:logger] == 'log' then
        else
            Rake::Task['data:no_logger']
        end

        Rake::Task['data:project:check_exist'].invoke(args[:name])
        Rake::Task['data:project:github_clone'].invoke(args[:name])
        Rake::Task['data:project:load'].invoke(args[:name])
        Rake::Task['data:project:tags'].invoke(args[:name])
        Rake::Task['data:project:events'].invoke(args[:name])
        Rake::Task['data:optimize']
        Rake::Task['data:clear_cache']
    end

    desc 'Re-load, but skip cloning from GitHub.'
    task :nogit, [:name] => :environment do |t, args|
        Rake::Task['data:no_logger']
        Rake::Task['data:project:load'].invoke(args[:name])
        Rake::Task['data:project:tags'].invoke(args[:name])
        Rake::Task['data:project:events'].invoke(args[:name])
        Rake::Task['data:optimize']
        Rake::Task['data:clear_cache']
    end

    desc 'Possible Projects include: chromium, httpd, struts, and tomcat.'
    namespace :project do        
        desc 'Check if Project data has been loaded.'
        task :check_exist, [:name] => :environment do |t, args|
            if Project.exists? subdomain: args[:name]
                puts "\n\nWARNING: " + args[:name].capitalize() + " data already loaded. Run data:clear first."
            end
        end

        desc 'Pull data from GitHub.'
        task :github_clone, [:name] => :environment do |t, args|
            builder_data = builder_sets[args[:name]]            
            logger.info "Removing git folders..."
            FileUtils.rm_rf builder_data.dir if (File.exist?(builder_data.dir))
            logger.info "Cloning repo from GitHub on #{builder_data.branch}..."

            g = Git.clone(builder_data.address, 
                          builder_data.name,
                          path: './tmp/checkout',
                          branch: builder_data.branch,
                          depth: 1)
            logger.info "Loaded data version: #{g.object('HEAD').sha[0..10]}"
        end

        desc 'Load base data into db.'
        task :load, [:name] => :environment do |t, args|
            builder_data = builder_sets[args[:name]]

            ProjectLoader.new.load_data(builder_data.dir)
            project = Project.find_by(subdomain: args[:name])
            [
                GitLoader,
                CodeNoteLoader,
                ReleaseLoader,
                VulnerabilityLoader,
            ].each do |loader|
                logger.info "Running #{loader}..."
                loader.new.load_data(builder_data.dir, project)
            end
        end

        desc 'Load only vulnerability YMLs in - for merging-and-testing PRs efficiently.'
        task :load_vulns_only, [:name] => :environment do |t, args|
            builder_data = builder_sets[args[:name]]

            ProjectLoader.new.load_data(builder_data.dir)
            project = Project.find_by(subdomain: args[:name])

            [
                VulnerabilityLoader,
            ].each do |loader|
                logger.info "Running #{loader}..."
                loader.new.load_data(builder_data.dir, project)
            end
        end

        desc 'Generate event models.'
        task :events, [:name] => :environment do |t, args|
            builder_data = builder_sets[args[:name]]

            project = Project.find_by(subdomain: args[:name])
            [
                VulnerabilityEvents,
                SameCweEvents,
                SameDirectoryEvents,
                FixEvents,
                VccEvents,
                BountyEvents
            ].each do |generator|
                logger.info "Generating #{generator.to_s.tableize.humanize.downcase}"
                generator.new(project).generate
            end
            logger.info "Generating weekly report events and tags"
            WeeklyReportEvents.new(project).generate(builder_data.dir)
        end

        desc 'Generate and apply tags.'
        task :tags, [:name] => :environment do |t, args|
            builder_data = builder_sets[args[:name]]

            project = Project.find_by(subdomain: args[:name])
            [
                LifetimeTagger,
                BountyTagger,
                DEPSTagger,
                ErrorOfOmissionTagger,
                CWETagger,
                CVSSTagger,
                DiscoveryTagger,
                ErrorOfOmissionTagger,
                LanguageTagger,
                LessonsTagger,
                FixTagger,
                SubsystemTagger,
                UnitTestTagger
            ].each do |tagger|
                logger.info "Tagging with #{tagger}"
                t = tagger.new(project)
                t.create_tags
                t.apply_tags
            end
            orig = OriginTagger.new(project)
            orig.create_tags
            orig.apply_tags(builder_data.dir)
    
            project_tagger = ProjectTagger.new(builder_data.dir, project)
            project_tagger.create_tags
            project_tagger.apply_tags
        end
    end
end
