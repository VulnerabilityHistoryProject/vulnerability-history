desc "This task is called by the Heroku scheduler add-on. It also will download a git repo to a directory in tmp/checkout. Put in lib/tasks"
require 'git'
require 'find'
require 'yaml'
require 'fileutils'

gitAddress = 'https://github.com/andymeneely/chromium-vulnerabilities.git'
gitName = 'chromium-vulnerabilities'
projectName = 'Chromium'
task :clone_git => :environment do
  g = Git.clone(gitAddress, gitName, :path => './tmp/checkout')
  findAddress = "./tmp/checkout/" + gitName
  ymlFiles = []
  parsed = []
  Find.find(findAddress) do |path|
    ymlFiles << path if path=~ /.*\.yml$/
  end
  for name in ymlFiles
    parsedItem = begin
      YAML.load(File.open(name))
    rescue ArgumentError => e
      puts "Could not parse YAML: #{e.message}"
    end
    parsed.push(parsedItem)
  end
  
  parsed.each do |parsedToSave|
    if (parsedToSave.keys[0] == "releases")
      releaseData(parsedToSave, projectName)
    else
      vulnerabilityData(parsedToSave)
      fixesData(parsedToSave)
      fileData(parsedToSave)
    end
  end
  FileUtils.rm_r findAddress
end

#Function Calls
def releaseData(parsed, projectName)
    parsed["releases"].each do |key, date|
      releases = Release.new
      releases.number = key
      releases.date = date
      releases.project = projectName
      releases.save
    end
end

def vulnerabilityData(parsed)
  cve = parsed.keys[0]
  #vulnerabilities table
  vulnerabilities = Vulnerability.new
  vulnerabilities.CVE = cve
  vulnerabilities.bounty = parsed[cve]["bounty"]
  vulnerabilities.announced = parsed[cve]["announced"]["date"]
  vulnerabilities.url = parsed[cve]["announced"]["url"]
  vulnerabilities.code_reviews = parsed[cve]["code_reviews"]
  vulnerabilities.bugs = parsed[cve]["bugs"]
  vulnerabilities.save
end

def fixesData(parsed)
  #The Fixes and it's data'
  cve = parsed.keys[0]
  fixesArray = parsed[cve]["fixes"]
  fixesArray.each do |fix|
    fixes = Fix.new
    fixes.vulnerability_name = cve
    fixes.fix_num = fix
    fixes.save
  end
end

def fileData(parsed)
  cve = parsed.keys[0]
  arrayFiles = parsed[cve]["files"].keys
  #for every file look at vccs
  arrayFiles.each do |fileArray|
    filepath = Filepath.new
    filepath.filepath = fileArray
    if parsed[cve]["files"][fileArray]["note"]
      filepath.note = parsed[cve]["files"][fileArray]["note"]
    end
    filepath.save
    vccsData(parsed, fileArray)
  end
end
def vccsData(parsed, fileArray)
  cve = parsed.keys[0]
  arrayVccs = parsed[cve]["files"][fileArray]["vccs"]
    if arrayVccs#unless arrayVccs.nil?
      arrayVccs.each do |vccsArray|
        vccs = Vcc.new
        vccs.vulnerability_name = cve
        vccs.file_name = fileArray
        key = vccsArray.keys[0]
        vccs.commit_hash = key
        if vccsArray[key]["note"]
          vccs.note =  vccsArray[key]["note"]
        end
        vccs.save
      end
    end
  end
