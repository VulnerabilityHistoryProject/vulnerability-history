desc "This task is called by the Heroku scheduler add-on. It also will download a git repo to a directory in tmp/checkout. Put in lib/tasks"
require 'git'
require 'find'
require 'yaml'
require 'fileutils'
require 'event_generators/commit_events'
require_relative 'scheduler_cve_methods'
require_relative 'scheduler_gitlog_methods'

gitAddress = 'https://github.com/andymeneely/chromium-vulnerabilities.git'
gitName = 'chromium-vulnerabilities'
gitBranch = 'master'
projectName = 'Chromium'
customEvent = 'bounty'
task :clone_git => :environment do
  findAddress = "./tmp/checkout/" + gitName

  #Removes the filepath before pulling most recent copy
  puts "Finding git address..."
  if (File.exist?(findAddress))
      FileUtils.rm_r findAddress
  end
  puts "Cloning repo from GitHub..."
  g = Git.clone(gitAddress, gitName,
                path: './tmp/checkout',
                branch: gitBranch)
  ymlFiles = []
  parsedYAMLFiles = []
  git_logs = []

  #Finds all the YAML files and gitlogs
  puts "Finding YAML and GitLog..."
  Find.find(findAddress) do |path|
    ymlFiles << path if path =~ /CVE.*\.yml$/
    ymlFiles << path if path =~ /releases.yml$/
    git_logs << path if path =~ /gitlog*\.txt$/
  end

  #parses through YAML files
  puts "Parsing YAML files..."
  for name in ymlFiles
    parsedItem = begin
      YAML.load(File.open(name))
    rescue ArgumentError => e
      puts "Could not parse YAML: #{e.message}"
    end
    parsedYAMLFiles.push(parsedItem)
  end
  puts "Clearing database..."
  Rake::Task['db:schema:load'].invoke

  #parses through git logs
  puts "Parsing through git logs..."
  for git_log in git_logs
    GitLog_CVE_Methods.get_commits(File.open(git_log))
  end

  #only adds vulnerability to list if it does not exist
  puts "Invoking Scheduler_CVE_Methods..."
  parsedYAMLFiles.each do |parsedToSave|
    if (parsedToSave.keys[0] == "releases")
      Scheduler_CVE_Methods.releaseData(parsedToSave, projectName)
    else
      Scheduler_CVE_Methods.vulnerabilityData(parsedToSave, customEvent)
    end
  end
  Scheduler_CVE_Methods.add_event_styles

  # Generate events for commits on vulnerable files
  puts "Generating commit events..."
  CommitEvents.new.generate
end
