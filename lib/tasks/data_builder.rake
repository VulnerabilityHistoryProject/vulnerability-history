require 'git'
require 'yaml'
require 'fileutils'
require 'find'
require 'git'
require 'timing_logger'
require_all 'lib/event_generators/*.rb'
require_all 'lib/loaders/*.rb'
require_all 'lib/taggers/*.rb'

chromium_logger = TimingLogger.new(STDOUT, 'data:chromium')
httpd_logger = TimingLogger.new(STDOUT, 'data:httpd')
struts_logger = TimingLogger.new(STDOUT, 'data:struts')
tomcat_logger = TimingLogger.new(STDOUT, 'data:tomcat')

loggers = {
    'chromium' => chromium_logger, 
    'httpd' => httpd_logger,
    'struts' => struts_logger,
    'tomcat' => tomcat_logger
}

class VulnProject {
    @@git_name
    @@repo_dir
    @@git_address
    @@git_branch
    @@custom_event
    @@project_name
    @@logger
}


desc 'Build Project data'
namespace :data do

    desc 'Clean rebuild of Project data'
    task :build, [:name] => :environment do |t, args|
        Rake::Task['data:project:check_exist'].invoke(args[:name])
        Rake::Task['data:project:github_clone'].invoke(args[:name])
        Rake::Task['data:project:load'].invoke(args[:name])
        Rake::Task['data:project:tags'].invoke(args[:name])
        Rake::Task['data:project:events'].invoke(args[:name])
        Rake::Task['data:optimize']
        Rake::Task['data:clear_cache']
    end

    desc 'Re-load, but skip cloning from GitHub'
    task :nogit, [:name] => :environment do |t, args|
        Rake::Task['data:project:load'].invoke(args[:name])
        Rake::Task['data:project:tags'].invoke(args[:name])
        Rake::Task['data:project:events'].invoke(args[:name])
        Rake::Task['data:optimize']
    end

    desc 'Possible Projects include: chromium, httpd, struts, and tomcat'
    namespace :project do        
        desc 'Check if Project data has been loaded'
        task :check_exist, [:name] => :environment do |t, args|
            if Project.exists? subdomain: args[:name]
                puts "WARNING: " + args[:name].capitalize() + " data already loaded. Run data:clear first."
            end
        end

        desc 'Pull data from GitHub'
        task :github_clone, [:name] => :environment do |t, args|
            loggers[args[:name]].info "Removing git folders..."
            FileUtils.rm_rf repo_dir if (File.exist?(repo_dir))
            logger.info "Cloning repo from GitHub on #{gitBranch}..."
            g = Git.clone(gitAddress,
                            gitName,
                            path: './tmp/checkout',
                            branch: gitBranch,
                            depth: 1)
            logger.info "Loaded data version: #{g.object('HEAD').sha[0..10]}"
        end

        desc 'Load base data into db'
        task :load, [:name] => :environment do |t, args|
        end

        desc 'Load only vulnerability YMLs in - for merging-and-testing PRs efficiently'
        task :load_vulns_only, [:name] => :environment do |t, args|
        end

        desc 'Generate event models'
        task :events, [:name] => :environment do |t, args|
        end

        desc 'Generate and apply tags'
        task :tags, [:name] => :environment do |t, args|
        end
    end
end
