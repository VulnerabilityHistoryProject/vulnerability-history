require 'git'
require 'yaml'
require 'fileutils'
require 'find'
require 'git'
require_all 'lib/event_generators/*.rb'
require_all 'lib/loaders/*.rb'
require_all 'lib/taggers/*.rb'

logger = Logger.new(STDOUT, progname: 'data:chromium')

desc 'Clean rebuild of Chromium data.'
namespace :data do
  task :chromium => [
    'environment',
    'data:chromium:check_exist',
    'data:chromium:github_clone',
    'data:chromium:load',
    'data:chromium:tags',
    'data:chromium:events',
    'data:optimize',
    'data:clear_cache',
  ]

  namespace :chromium do
    gitName = 'chromium-vulnerabilities'
    repo_dir = "./tmp/checkout/" + gitName
    gitAddress = 'https://github.com/andymeneely/chromium-vulnerabilities.git'
    gitBranch = 'master'
    customEvent = "bounty"
    projectName = 'Chromium'

    desc 'Re-load, but skip cloning from GitHub'
    task :nogit => [
      'environment',
      'data:chromium:load',
      'data:chromium:events',
      'data:chromium:tags',
      'data:optimize',
      'data:clear_cache',
    ]

    desc 'Check if Chromium data has been loaded'
    task :check_exist => :environment do
      if Project.exists? subdomain: 'chromium'
        puts "WARNING: Chromium data already loaded. Run data:clear first."
      end
    end

    desc 'Pull data from GitHub'
    task :github_clone do
      logger.info "Removing git folders..."
      FileUtils.rm_rf repo_dir if (File.exist?(repo_dir))
      logger.info "Cloning repo from GitHub on #{gitBranch}..."
      g = Git.clone(gitAddress,
                    gitName,
                    path: './tmp/checkout',
                    branch: gitBranch)
      logger.info "Loaded data version: #{g.describe}@#{g.object('HEAD').sha}"
    end

    desc 'Load base data into db'
    task :load => :environment do
      ProjectLoader.new.load_data(repo_dir)
      project = Project.find_by(subdomain: 'chromium')
      [
        GitLoader,
        CodeNoteLoader,
        ReleaseLoader,
        VulnerabilityLoader,
      ].each do |loader|
        logger.info "Running #{loader}..."
        loader.new.load_data(repo_dir, project)
      end
    end

    desc 'Load only vulnerability YMLs in - for merging-and-testing PRs efficiently'
    task :load_vulns_only => ['environment', 'data:chromium:github_clone'] do
      ProjectLoader.new.load_data(repo_dir)
      project = Project.find_by(subdomain: 'chromium')
      [
        VulnerabilityLoader,
      ].each do |loader|
        logger.info "Running #{loader}..."
        loader.new.load_data(repo_dir, project)
      end
    end

    desc 'Generate event models'
    task :events => :environment do
      project = Project.find_by(subdomain: 'chromium')
      [
        SimilarEvents,
        VulnerabilityEvents,
        FixEvents,
        VccEvents,
        ReleaseEvents,
        BountyEvents,
      ].each do |generator|
        logger.info "Generating #{generator.to_s.tableize.humanize.downcase}"
        generator.new(project).generate
      end
      logger.info "Generating weekly report events and tags"
      WeeklyReportEvents.new.generate(repo_dir)
    end

    desc 'Generate and apply tags'
    task :tags => :environment do
      project = Project.find_by(subdomain: 'chromium')
      [
        LifetimeTagger,
        BountyTagger,
        DEPSTagger,
        ErrorOfOmissionTagger,
        CWETagger,
        CVSSTagger,
        DiscoveryTagger,
        ErrorOfOmissionTagger,
        LanguageTagger,
        LessonsTagger,
        FixTagger,
        SubsystemTagger,
        UnitTestTagger
      ].each do |tagger|
        logger.info "Tagging with #{tagger}"
        t = tagger.new(project)
        t.create_tags
        t.apply_tags
      end
      orig = OriginTagger.new(project)
      orig.create_tags
      orig.apply_tags(repo_dir)

      project_tagger = ProjectTagger.new(repo_dir, project)
      project_tagger.create_tags
      project_tagger.apply_tags
    end

  end
end
