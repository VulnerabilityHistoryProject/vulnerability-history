require 'git'
require 'yaml'
require 'fileutils'
require 'find'
require 'git'
require_all 'lib/event_generators/*.rb'
require_all 'lib/loaders/*.rb'
require_all 'lib/taggers/*.rb'

desc 'Clean rebuild of Chromium data.'
namespace :data do
  task :chromium => [
    'environment',
    'data:clear',
    'data:chromium:github_clone',
    'data:chromium:load',
    'data:chromium:events',
    'data:chromium:tags',
    'data:chromium:optimize',
  ]

  namespace :chromium do
    gitName = 'chromium-vulnerabilities'
    findAddress = "./tmp/checkout/" + gitName
    gitAddress = 'https://github.com/andymeneely/chromium-vulnerabilities.git'
    gitBranch = 'master'
    customEvent = "bounty"
    projectName = 'Chromium'

    desc 'Re-load, but skip cloning from GitHub'
    task :nogit => [
      'environment',
      'data:clear',
      'data:chromium:load',
      'data:chromium:events',
      'data:chromium:tags',
      'data:chromium:optimize',
    ]

    desc 'Re-load, but only a few vulnerabilities (for Heroku)'
    task :staging => [
      'environment',
      'data:clear',
      'data:chromium:github_clone',
      'data:chromium:make_staging_data',
      'data:chromium:load',
      'data:chromium:events',
      'data:chromium:tags',
      'data:chromium:optimize',
    ]


    desc 'Remove all but a few vulnerabilities to shrink the staging data for Heroku'
    task :make_staging_data => :environment do
      puts "Deleting non-staging YMLs"
      to_rm = Dir["#{findAddress}/cves/*.yml"].reject  do |cve_file|
        cve_file =~ /CVE\-2013\-6665/ ||
        cve_file =~ /CVE\-2011\-3092/ ||
        cve_file =~ /CVE\-2015\-1296/ ||
        cve_file =~ /CVE\-2010\-0664/ ||
        cve_file =~ /CVE\-2010\-3248/
      end
      to_rm.each do |non_staging_file|
        FileUtils.rm_rf non_staging_file
      end
      puts "Copying over an abbreviated git log"
      FileUtils.cp "#{findAddress}/commits/gitlog-staging.json",
                   "#{findAddress}/commits/gitlog.json"
    end

    desc 'Pull data from GitHub'
    task :github_clone do
      puts "Removing git folders..."
      FileUtils.rm_rf findAddress if (File.exist?(findAddress))
      puts "Cloning repo from GitHub on #{gitBranch}..."
      g = Git.clone(gitAddress,
                    gitName,
                    path: './tmp/checkout',
                    branch: gitBranch)
      puts "Loaded data version: #{g.object('HEAD').sha}"
    end

    desc 'Load base data into db'
    task :load => :environment do
      [
        ProjectLoader,
        GitLoader,
        ReleaseLoader,
        VulnerabilityLoader,
      ].each do |loader|
        puts "Running #{loader}..."
        loader.new.load_data(findAddress)
      end
    end

    desc 'Generate event models'
    task :events => :environment do
      [
        VulnerabilityEvents,
        FixEvents,
        VccEvents,
        ReleaseEvents,
        # InterestingCommitEvents,
        CommitEvents,
        BountyEvents,
      ].each do |generator|
        puts "Generating #{generator.to_s.tableize.humanize.downcase}"
        generator.new.generate
      end
    end

    desc 'Generate and apply tags'
    task :tags => :environment do
      [
        BountyTagger,
        ErrorOfOmissionTagger,
        DiscoveryTagger,
        LessonsTagger,
        SubsystemTagger,
        UnitTestTagger,
        CWETagger
      ].each do |tagger|
        puts "Tagging with #{tagger}"
        t = tagger.new
        t.create_tags
        t.apply_tags
      end
    end

    desc 'Optimize tables '
    task :optimize => :environment do
      puts "Optimizing tables"
      ActiveRecord::Base.connection.execute "CLUSTER vulnerability_events USING index_vulnerability_events_on_vulnerability_id"
      ActiveRecord::Base.connection.execute "ANALYZE events"
      ActiveRecord::Base.connection.execute "ANALYZE vulnerabilities"
      ActiveRecord::Base.connection.execute "ANALYZE vulnerability_events"

    end

  end
end
