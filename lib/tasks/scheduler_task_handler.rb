########################################
# Event Handler Functions #
########################################
require_relative 'scheduler_cve_methods'
require_relative 'scheduler_gitlog_methods'
require 'find'
require 'fileutils'
class Scheduler_Task_Handler
    def self.cloneGitRepo(findAddress, gitAddress, gitName, gitBranch)
        #Removes the filepath before pulling most recent copy
        puts "Removing git folders..."
        if (File.exist?(findAddress))
            FileUtils.rm_r findAddress
        end
        puts "Cloning repo from GitHub..."
        g = Git.clone(gitAddress, gitName,
                        path: './tmp/checkout',
                        branch: gitBranch)
    end
    def self.yamlGitLogHandling(findAddress)
        ymlFiles = []
        git_logs = []
        #Finds all the YAML files and gitlogs
        puts "Finding YAML and GitLog..."
        Find.find(findAddress) do |path|
            ymlFiles << path if path =~ /CVE.*\.yml$/
            ymlFiles << path if path =~ /releases.yml$/
            git_logs << path if path =~ /gitlog*\.txt$/
        end
        return git_logs, ymlFiles
    end
    def self.yamlParsing(ymlFiles)
        parsedYAMLFiles = []
        #parses through YAML files
        puts "Parsing YAML files..."
        for name in ymlFiles
            parsedItem = begin
            YAML.load(File.open(name))
            rescue ArgumentError => e
            puts "Could not parse YAML: #{e.message}"
            end
            parsedYAMLFiles.push(parsedItem)
        end
        return parsedYAMLFiles
    end
    def self.gitParsing(git_logs)
        #parses through git logs
        puts "Parsing through git logs..."
        for git_log in git_logs
            GitLog_CVE_Methods.get_commits(File.open(git_log))
        end
    end
    def self.cveMethods(parsedYAMLFiles, customEvent, projectName)
        #only adds vulnerability to list if it does not exist
        
        puts "Invoking Scheduler_CVE_Methods..."
        parsedYAMLFiles.each do |parsedToSave|
            if (parsedToSave.keys[0] == "releases")
                Scheduler_CVE_Methods.releaseData(parsedToSave, projectName)
            else
                Scheduler_CVE_Methods.vulnerabilityData(parsedToSave, customEvent)
            end
        end
        Scheduler_CVE_Methods.add_event_styles
    end
    def self.gitMethods()
        # Generate events for commits on vulnerable files
        puts "Generating commit events..."
        CommitEvents.new.generate
    end
        
end