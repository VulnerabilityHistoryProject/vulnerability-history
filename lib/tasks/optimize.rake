require 'timing_logger'

logger = TimingLogger.new(STDOUT, 'data')

def attempt_execute(sql)
  begin
    ActiveRecord::Base.connection.execute sql
  rescue => e
    logger.warn "QUERY ERRORED. Reason: #{e.message}"
  end
end

namespace 'data' do
  desc 'Optimize tables '
  task :optimize => :environment do
    logger.info "Optimizing tables"
<<<<<<< HEAD
    ActiveRecord::Base.connection.execute "CLUSTER vulnerabilities USING index_vulnerabilities_on_upvotes"
    ActiveRecord::Base.connection.execute "CLUSTER vulnerability_tags USING index_vulnerability_tags_on_tag_id_and_vulnerability_id"
    # ActiveRecord::Base.connection.execute "ANALYZE events"
    ActiveRecord::Base.connection.execute "ANALYZE vulnerabilities"
    ActiveRecord::Base.connection.execute "ANALYZE vulnerability_tags"
    ActiveRecord::Base.connection.execute "ANALYZE tags"
=======
    attempt_execute "CLUSTER vulnerabilities USING index_vulnerabilities_on_upvotes"
    attempt_execute "CLUSTER vulnerabilities USING index_vulnerabilities_on_upvotes"
    attempt_execute "CLUSTER vulnerability_tags USING index_vulnerability_tags_on_tag_id_and_vulnerability_id"
    attempt_execute "ANALYZE events"
    attempt_execute "ANALYZE vulnerabilities"
    attempt_execute "ANALYZE vulnerability_tags"
    attempt_execute "ANALYZE tags"
>>>>>>> master
  end
end
