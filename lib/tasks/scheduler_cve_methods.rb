########################################
# Releases and Vulnerability Functions #
########################################
class Scheduler_CVE_Methods

  def self.vulnerabilityData(vuln_data, event_added = "")
    vuln = Vulnerability.create!(
      cve: vuln_data["CVE"],
      announced: vuln_data["announced"],
      description: vuln_data["description"].to_s,
      notes: vuln_data.except("cve"),
    )
    if vuln_data["bounty"]["amount"].to_i > 0
      if !Tag.exists?(name: 'Bounty')
        newTag = Tag.new
        newTag.name = 'Bounty'
        newTag.description = "This tag indicates that the vulnerability was reported through an application's bug bounty program."
        newTag.color = "#32CD32"
        newTag.save
      end
      if !Tagged.exists?(tag: Tag.find_by_name('bounty'), vulnerability: vuln)
        thisTaggged = Tagged.create!(
            notes: vuln_data["bounty"]["amount"],
            tag: Tag.find_by_name('Bounty'),
            vulnerability: vuln
        )
      end
    end
    return vuln.id
  end

  def self.add_vuln_data_to_db(data, vuln_id, type)
    unless data.nil?
      data.each do |entry|
        case entry
        when Hash
          entry.each do |hash, message|
            d = type.new
            d.vulnerability_id = vuln_id
            d.commit_id = (Commit.find_by commit_hash: hash).id
            d.notes = message["note"]
            d.save
          end
        when String
          d = type.new
          d.commit_id = (Commit.find_by commit_hash: entry).id
          d.vulnerability_id = vuln_id
          d.notes = ""
          d.save
        end
      end
    end
  end

end
