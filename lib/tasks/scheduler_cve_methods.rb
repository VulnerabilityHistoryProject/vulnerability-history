########################################
# Releases and Vulnerability Functions #
########################################
class Scheduler_CVE_Methods
  def self.releaseData(parsed, projectName)
      parsed["releases"].each do |key, date|
        release = Release.new
        release.number = key
        release.date_released = date
        release.project = projectName
        #Something needs to go here
        release.notes = "hello"
        release.save
        Event.create(detail: release)
      end
  end
  def self.vulnerabilityData(vuln_data, event_added = "")
    cve = vuln_data["CVE"]
    #vuln_data table
    vuln = Vulnerability.new
    vuln.cve = cve
    vuln.announced = vuln_data["announced"]
    vuln.notes = vuln_data.except("cve")
    vuln.save
    Event.create(detail: vuln)
    if(event_added != "")
      event = Event.create(detail: vuln)
      event.save
    end
    return vuln_id = vuln.id
  end
  def self.add_vuln_data_to_db(data, vuln_id, type)
    unless data.nil?
      data.each do |entry|
        case entry
        when Hash
          entry.each do |hash, message|
            d = type.new
            d.vulnerability_id = vuln_id
            d.commit_id = (Commit.find_by commit_hash: hash).id
            d.notes = message["note"]
            d.save
            Event.create(detail: d)
          end
        when String
          d = type.new
          d.commit_id = (Commit.find_by commit_hash: entry).id
          d.vulnerability_id = vuln_id
          d.notes = ""
          d.save
          Event.create(detail: d)
        end
      end
    end
  end
  def self.add_event_styles
      EventStyle.create(event_type: 'vulnerability', color: '#ED6049', icon: 'report_problem')
      EventStyle.create(event_type: 'fix', color: '#6FD56E', icon: 'build')
      EventStyle.create(event_type: 'vcc', color: '#F3A23A', icon: '')
      EventStyle.create(event_type: 'release', color: '#D270CA', icon: 'stars')
      EventStyle.create(event_type: 'commit_filepath', color: '#6AA5E5', icon: '')
  end
end
