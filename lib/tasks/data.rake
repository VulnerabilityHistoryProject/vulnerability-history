require 'data_builder'

project_shortnames = %w(
  chromium
  httpd
  struts
  tomcat
)
# TODO add Django

# Create the DataBuilders for the Tasks
# chromium = DataBuilder.new('chromium')
httpd = DataBuilder.new('httpd')
struts = DataBuilder.new('struts')
tomcat = DataBuilder.new('tomcat')


project_shortnames.each do |p|  
  builder = DataBuilder.new(p)
  desc "Build all of #{project_shortnames}-vulnerabilities"
    task "data:#{p}" => [
      'environment',
      'data:no_logger',
      "data:#{p}:check_exist",
      "data:#{p}:github_clone",
      "data:#{p}:load",
      "data:#{p}:tags",
      "data:#{p}:events",
      "data:optimize",
      "data:clear_cache"
    ]
  namespace :data do 
    namespace p do
      desc "Re-load #{p}-vulnerabilities... but skip cloning from GitHub."
      task :nogit => [
          'environment',
          'data:no_logger',
          "data:#{p}:check_exist",
          "data:#{p}:load",
          "data:#{p}:tags",
          "data:#{p}:events",
          "data:optimize",
          "data:clear_cache"
      ]

      desc "Check if Chromium data has already been loaded."
      task :check_exist => :environment do
        builder.check_exist
      end 

      desc "Pull Chromium data from GitHub."
      task :github_clone => :environment do
        builder.clone_git_repo
      end 

      desc "Load base Chromium data into db."
      task :load => :environment do
        builder.load_data
      end 
      
      desc "Generate Chromium event models."
      task :events => :environment do
        builder.generate_events
      end 
      
      desc "Generate and apply Chromium tags."
      task :tags => :environment do
        builder.generate_tags
      end 
      
      desc "Load only YMLS (for merging and testing PRs effeciently)"
      task :load_vulns_only => ['environment', 'data:chromium:github_clone'] do
        builder.load_vulns_only          
      end 
    end
  end
end

namespace :data do
    # desc "Build all of Chromium."
    # task :chromium => [
    #     'environment',
    #     'data:no_logger',
    #     'data:chromium:check_exist',
    #     'data:chromium:github_clone',
    #     'data:chromium:load',
    #     'data:chromium:tags',
    #     'data:chromium:events',
    #     'data:optimize',
    #     'data:clear_cache'
    # ]

    desc "Build all of HTTPD."
    task :httpd => [
        'environment',
        'data:httpd:check_exist',
        'data:httpd:github_clone',
        'data:httpd:load',
        'data:httpd:tags',
        'data:httpd:events',
        'data:optimize',
        'data:clear_cache'
    ]

    desc "Build all of Struts."
    task :struts => [
        'environment',
        'data:struts:check_exist',
        'data:struts:github_clone',
        'data:struts:load',
        'data:struts:tags',
        'data:struts:events',
        'data:optimize',
        'data:clear_cache'
    ]

    desc "Build all of Tomcat."
    task :tomcat => [
        'environment',
        'data:tomcat:check_exist',
        'data:tomcat:github_clone',
        'data:tomcat:load',
        'data:tomcat:tags',
        'data:tomcat:events',
        'data:optimize',
        'data:clear_cache'
    ]

    # desc "Load data from chromium-vulnerabilities"
    # namespace :chromium do
    #     desc "Re-load, but skip cloning from GitHub."
    #     task :nogit => [
    #         'environment',
    #         'data:no_logger',
    #         'data:chromium:load',
    #         'data:chromium:events',
    #         'data:chromium:tags',
    #         'data:optimize',
    #         'data:clear_cache'
    #     ]

    #     desc "Check if Chromium data has already been loaded."
    #     task :check_exist => :environment do
    #         chromium.check_exist
    #     end

    #     desc "Pull Chromium data from GitHub."
    #     task :github_clone => :environment do
    #         chromium.clone_git_repo
    #     end

    #     desc "Load base Chromium data into db."
    #     task :load => :environment do
    #         chromium.load_data
    #     end

    #     desc "Load only vulnerabilities YMLS in for Chromium - for merging and testing PRs effeciently."
    #     task :load_vulns_only => ['environment', 'data:chromium:github_clone'] do
    #         chromium.load_vulns_only
    #     end

    #     desc "Generate Chromium event models."
    #     task :events => :environment do
    #         chromium.generate_events
    #     end

    #     desc "Generate and apply Chromium tags."
    #     task :tags => :environment do
    #         chromium.generate_tags
    #     end
    # end

    desc "Load data from httpd-vulnerabilities"
    namespace :httpd do
        desc "Re-load, but skip cloning from GitHub."
        task :nogit => [
            'environment',
            'data:httpd:check_exist',
            'data:httpd:github_clone',
            'data:httpd:load',
            'data:httpd:tags',
            'data:httpd:events',
            'data:optimize',
            'data:clear_cache'
        ]

        desc "Check if HTTPD data has already been loaded."
        task :check_exist => :environment do
            httpd.check_exist
        end

        desc "Pull HTTPD data from GitHub."
        task :github_clone => :environment do
            httpd.clone_git_repo
        end

        desc "Load base HTTPD data into db."
        task :load => :environment do
            httpd.load_data
        end

        desc "Load only vulnerabilities YMLS in for HTTPD - for merging and testing PRs effeciently."
        task :load_vulns_only => ['environment', 'data:httpd:github_clone'] do
            httpd.load_vulns_only
        end

        desc "Generate HTTPD event models."
        task :events => :environment do
            httpd.generate_events
        end

        desc "Generate and apply HTTPD tags."
        task :tags => :environment do
            httpd.generate_tags
        end
    end

    desc "Load data from struts-vulnerabilities"
    namespace :struts do
        desc "Re-load, but skip cloning from GitHub."
        task :nogit => [
            'environment',
            'data:struts:check_exist',
            'data:struts:github_clone',
            'data:struts:load',
            'data:struts:tags',
            'data:struts:events',
            'data:optimize',
            'data:clear_cache'
        ]

        desc "Check if Struts data has already been loaded."
        task :check_exist => :environment do
            struts.check_exist
        end

        desc "Pull Struts data from GitHub."
        task :github_clone => :environment do
            struts.clone_git_repo
        end

        desc "Load base Struts data into db."
        task :load => :environment do
            struts.load_data
        end

        desc "Load only vulnerabilities YMLS in for Struts - for merging and testing PRs effeciently."
        task :load_vulns_only => ['environment', 'data:struts:github_clone'] do
            struts.load_vulns_only
        end

        desc "Generate Struts event models."
        task :events => :environment do
            struts.generate_events
        end

        desc "Generate and apply Struts tags."
        task :tags => :environment do
            struts.generate_tags
        end
    end

    desc "Load data from tomcat-vulnerabilities"
    namespace :tomcat do
        desc "Re-load, but skip cloning from GitHub."
        task :nogit => [
            'environment',
            'data:tomcat:check_exist',
            'data:tomcat:github_clone',
            'data:tomcat:load',
            'data:tomcat:tags',
            'data:tomcat:events',
            'data:optimize',
            'data:clear_cache'
        ]

        desc "Check if Tomcat data has already been loaded."
        task :check_exist => :environment do
            tomcat.check_exist
        end

        desc "Pull Tomcat data from GitHub."
        task :github_clone => :environment do
            tomcat.clone_git_repo
        end

        desc "Load base Tomcat data into db."
        task :load => :environment do
            tomcat.load_data
        end

        desc "Load only vulnerabilities YMLS in for Tomcat - for merging and testing PRs effeciently."
        task :load_vulns_only => ['environment', 'data:tomcat:github_clone'] do
            tomcat.load_vulns_only
        end

        desc "Generate Tomcat event models."
        task :events => :environment do
            tomcat.generate_events
        end

        desc "Generate and apply Tomcat tags."
        task :tags => :environment do
            tomcat.generate_tags
        end
    end

    desc "Load  Tomcat project."
    namespace :tomcat do
        desc "Re-load, but skip cloning from GitHub."
        task :nogit => [
            'environment',
            'data:tomcat:check_exist',
            'data:tomcat:github_clone',
            'data:tomcat:load',
            'data:tomcat:tags',
            'data:tomcat:events',
            'data:optimize',
            'data:clear_cache'
        ]

        desc "Check if Tomcat data has already been loaded."
        task :check_exist => :environment do
            tomcat.check_exist
        end

        desc "Pull Tomcat data from GitHub."
        task :github_clone => :environment do
            tomcat.clone_git_repo
        end

        desc "Load base Tomcat data into db."
        task :load => :environment do
            tomcat.load_data
        end

        desc "Load only vulnerabilities YMLS in for Tomcat - for merging and testing PRs effeciently."
        task :load_vulns_only => ['environment', 'data:tomcat:github_clone'] do
            tomcat.load_vulns_only
        end

        desc "Generate Tomcat event models."
        task :events => :environment do
            tomcat.generate_events
        end

        desc "Generate and apply Tomcat tags."
        task :tags => :environment do
            tomcat.generate_tags
        end
    end
end
