import {vhpMarkdownAll, vhpMarkdown} from '../../../app/frontend/global/vhpMarkdown'


var linkString;
var iconString;
var xssString;
var heavyString;


const allDoc =
    '<div class="vhp-markdown">' +
        '<p>Heap-based buffer overflow in Chrome\'s resource provider in Google Chrome that' +
        'handles bitmap textures. The vulnerability allows remote attackers to cause a' +
        'denial of service or possibly have unspecified other impact via a large bitmap' +
        'texture size that triggers improper memory allocation in the software' +
        'renderer.' +
        '</p>' +
        '<p>The fix for this vulnerability is to place a hard limit on the number of bytes' +
        'that can be allocated in a specific situation, regardless of different kinds' +
        'of hardware.' +
        '</p>'+
    '</div>' +
    '<div class="tabs-panel is-active vhp-markdown" id="mistakes" role="tabpanel" aria-labelledby="mistakes-label">' +
        '<p>The vulnerabliity here was a pretty simple oversight in terms of limiting resource constraints. The code would have handled a massive amounts of memory allocation differently on different pieces of hardware,' +
        ' leading to a buffer overflow in some situations. They didn\'t think of this early on. But, the way they fixed it was to hardcode a reasonable limit into the code.' +
        'The use of a magic number without a constant still seems fishy to me, but it\'s very good that they considered this situation and rectified it. Interestingly, they did not trust the fuzzer on this initially.' +
        '</p>' +
    '</div>'

beforeEach(() => {
    linkString = "CVE-1111-2222";
    iconString = ":mi-bug-report:";
    xssString = "http://localhost:3000/<SCRIPT SRC=http://xss.rocks/xss.js></SCRIPT>";
    heavyString = linkString + iconString + xssString;
});

test("Mark Down", () => {
    expect(vhpMarkdown(linkString)).toBe("<p><a href=\"/cves/CVE-1111-2222\">\<i class=\"vhp-icon-vulnerability\"></i>CVE-1111-2222</a></p>");
    expect(vhpMarkdown(iconString)).toBe("<p>:mi-bug-report:</p>");
    expect(vhpMarkdown(xssString)).toBe("<p>http://localhost:3000/</p>");
    expect(vhpMarkdown(heavyString)).toBe("<p><a href=\"/cves/CVE-1111-2222\"><i class=\"vhp-icon-vulnerability\"></i>CVE-1111-2222</a>:mi-bug-report<i class=\"vhp-icon-http\"></i>//localhost:3000/</p>");
});

test("Mark Down All", () => {
    document.body.innerHTML = allDoc;
    vhpMarkdownAll();
    expect(document.body).toMatchSnapshot();
});
