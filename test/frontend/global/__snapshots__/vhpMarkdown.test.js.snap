// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Mark Down All 1`] = `
<body>
  <div
    class="vhp-markdown"
  >
    <p>
      Heap-based buffer overflow in Chrome's resource provider in Google Chrome thathandles bitmap textures. The vulnerability allows remote attackers to cause adenial of service or possibly have unspecified other impact via a large bitmaptexture size that triggers improper memory allocation in the softwarerenderer.The fix for this vulnerability is to place a hard limit on the number of bytesthat can be allocated in a specific situation, regardless of different kindsof hardware.
    </p>
  </div>
  <div
    aria-labelledby="mistakes-label"
    class="tabs-panel is-active vhp-markdown"
    id="mistakes"
    role="tabpanel"
  >
    <p>
      The vulnerabliity here was a pretty simple oversight in terms of limiting resource constraints. The code would have handled a massive amounts of memory allocation differently on different pieces of hardware, leading to a buffer overflow in some situations. They didn't think of this early on. But, the way they fixed it was to hardcode a reasonable limit into the code.The use of a magic number without a constant still seems fishy to me, but it's very good that they considered this situation and rectified it. Interestingly, they did not trust the fuzzer on this initially.
    </p>
  </div>
</body>
`;
