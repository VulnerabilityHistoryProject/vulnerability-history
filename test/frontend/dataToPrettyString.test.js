import {vulnProject, vulnName, vulnLink, friendlyCWE, ellipsizedFilepath} from '../../app/frontend/global/dataToPrettyStrings'


var chromData, httpData;
var str;
var cweEmbedded, cweAlone; 

beforeEach(() => {
     chromData = {
        announced: "2014-03-05T05:11:22.283Z",
        cve: "CVE-2013-6665",
        id: 912,
        nickname: "The Example",
        project_name: "Chromium",
        short_desc: "Heap-based buffer overflow in Chrome's resource provider in Google Chrome that↵handles bitmap textures",
        subdomain: "chromium",
        tag_json: {},
        upvotes: 1000
    };
    httpData = {
        announced: "2004-07-01T00:00:00.000Z",
        cve: "CVE-2004-0493",
        id: 1540,
        nickname: "",
        project_name: "HTTPD",
        short_desc: "A component involved in parsing HTTP headers can be used for a remote denial of↵service attack by triggering a memory leak by using long header lines with a large↵amount of space or tab characters.↵",
        subdomain: "httpd",
        tag_json: [{id: 5, importance: 2.035227984424384}, {id: 23, importance: 1}],
        upvotes: 9
    }
    str = "dummy-text";
    cweAlone = "Just a string";
    cweEmbedded = "I do not want this ('I want this') not this";
});

test("Pretty: Vuln. Project", () => {
    expect(vulnProject(chromData)).toBe(`<img class="chromium-inline-logo"
                 title="Chromium"/>`);
    expect(vulnProject(httpData)).toBe(`<img class="httpd-inline-logo"
                 title="HTTPD"/>`);
});

test("Pretty: Vuln. Name", () => {
    expect(vulnName(chromData)).toBe(`<span class=\"nicknamed-cve\"> The Example</span>
           <span class=\"nicknamed-aka-cve\"> aka CVE-2013-6665</span>`);
    expect(vulnName(httpData)).toBe("CVE-2004-0493");
});

test("Pretty: Vuln. Link", () => {
    expect(vulnLink(chromData, str)).toBe("<a class=\"dt_row\" href=\"/vulnerabilities/912\">dummy-text</a>");
    expect(vulnLink(httpData, str)).toBe("<a class=\"dt_row\" href=\"/vulnerabilities/1540\">dummy-text</a>");
});

test("Pretty: Friendly CWE", () => {
    expect(friendlyCWE(cweAlone)).toBe("Just a string");
    expect(friendlyCWE(cweEmbedded)).toBe("I want this");
});

test("Pretty: Ellipsized Filepath", () => {
    expect(ellipsizedFilepath('foo/bar/baz', 3, 3)).toBe("<span data-tooltip tabindex=\"1\" title=\"foo/bar/baz\">foo/.../baz</span>");
    expect(ellipsizedFilepath('foo/bar/baz', 1, 3)).toBe("foo/bar/baz");
    expect(ellipsizedFilepath('foo/bar/baz', 3, 20)).toBe("foo/bar/baz");
});
