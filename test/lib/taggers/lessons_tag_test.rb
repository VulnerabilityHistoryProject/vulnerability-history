require 'test_helper'
require 'taggers/lessons_tagger'

class LessonsTagTest < ActiveSupport::TestCase
  test 'lesson tags created' do
    t = LessonsTagger.new
    t.create_tags
    assert_equal(1, Tag.where(shortname: 'defense').size)
    assert_equal(1, Tag.where(shortname: 'least-privilege').size)
    assert_equal(1, Tag.where(shortname: 'optional-frameworks').size)
    assert_equal(1, Tag.where(shortname: 'native-wrappers').size)
    assert_equal(1, Tag.where(shortname: 'distrust-input').size)
    assert_equal(1, Tag.where(shortname: 'obscurity').size)
    assert_equal(1, Tag.where(shortname: 'serial').size)
    assert_equal(1, Tag.where(shortname: 'environment').size)
    assert_equal(1, Tag.where(shortname: 'secure-by-default').size)
    assert_equal(1, Tag.where(shortname: 'yagni').size)
    assert_equal(1, Tag.where(shortname: 'complex-inputs').size)
  end

  test 'lessons tags not duplicated' do
    t = LessonsTagger.new
    tag_count_before = Tag.all.size
    if Tag.exists?(shortname: 'defense') and Tag.exists?(shortname: 'least privilege') and Tag.exists?(shortname: 'optional frameworks') and Tag.exists?(shortname: 'wrappers') and Tag.exists?(shortname: 'distrust input') and Tag.exists?(shortname: 'obscurity') and Tag.exists?(shortname: 'serial') and Tag.exists?(shortname: 'environment') and Tag.exists?(shortname: 'secure by default') and Tag.exists?(shortname: 'yagni') and Tag.exists?(shortname: 'complex inputs')
      t.create_tags
      tag_count_after = Tag.all.size
      assert_equal(tag_count_before, tag_count_after)
    end
  end

  test 'complex inputs tag applied' do
    t = LessonsTagger.new
    t.create_tags
    t.apply_tags
    tag = Tag.find_by(shortname: 'complex-inputs')
    assert(tag)
    vt = VulnerabilityTag.find_by(tag_id: tag.id)
    assert(vt)
    assert(vt.note)
  end

  test 'Families present?' do
    t = LessonsTagger.new
    t.create_tags
    t.apply_tags
    family = Tag.find_by(shortname: 'defense').family
    assert(family.include?('defense_in_depth'), "Family defense_in_depth is present")
    family = Tag.find_by(shortname: 'least-privilege').family
    assert(family.include?('least_privilege'), "Family least_privilege is present")
    family = Tag.find_by(shortname: 'optional-frameworks').family
    assert(family.include?('frameworks_are_optional'), "Family frameworks_are_optional is present")
    family = Tag.find_by(shortname: 'native-wrappers').family
    assert(family.include?('native_wrappers'), "Family native_wrappers is present")
    family = Tag.find_by(shortname: 'distrust-input').family
    assert(family.include?('distrust_input'), "Family distrust_input is present")
    family = Tag.find_by(shortname: 'obscurity').family
    assert(family.include?('security_by_obscurity'), "Family security_by_obscurity is present")
    family = Tag.find_by(shortname: 'serial').family
    assert(family.include?('serial_killer'), "Family serial_killer is present")
    family = Tag.find_by(shortname: 'environment').family
    assert(family.include?('environment_variables'), "Family environment_variables is present")
    family = Tag.find_by(shortname: 'secure-by-default').family
    assert(family.include?('secure_by_default'), "Family secure_by_default is present")
    family = Tag.find_by(shortname: 'yagni').family
    assert(family.include?('yagni'), "Family yagni is present")
    family = Tag.find_by(shortname: 'complex-inputs').family
    assert(family.include?('complex_inputs'), "Family complex_inputs is present")
  end

end
