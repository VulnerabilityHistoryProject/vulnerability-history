require 'test_helper'
require 'taggers/lessons_tagger'

class LessonsTagTest < ActiveSupport::TestCase
  test 'lesson tags created' do
    t = LessonsTagger.new
    t.create_tags
    assert_equal(1, Tag.where(shortname: 'defense').size)
    assert_equal(1, Tag.where(shortname: 'least privilege').size)
    assert_equal(1, Tag.where(shortname: 'optional frameworks').size)
    assert_equal(1, Tag.where(shortname: 'wrappers').size)
    assert_equal(1, Tag.where(shortname: 'distrust input').size)
    assert_equal(1, Tag.where(shortname: 'obscurity').size)
    assert_equal(1, Tag.where(shortname: 'serial').size)
    assert_equal(1, Tag.where(shortname: 'environment').size)
    assert_equal(1, Tag.where(shortname: 'secure by default').size)
    assert_equal(1, Tag.where(shortname: 'yagni').size)
    assert_equal(1, Tag.where(shortname: 'complex inputs').size)
  end
=begin - duplication checks should be added to tagger
  test 'lessons tags not duplicated' do
    t = LessonsTagger.new
    tag_count_before = Tag.all.size
    if Tag.exists?(shortname: 'defense') and Tag.exists?(shortname: 'least privilege') and Tag.exists?(shortname: 'optional frameworks') and Tag.exists?(shortname: 'wrappers') and Tag.exists?(shortname: 'distrust input') and Tag.exists?(shortname: 'obscurity') and Tag.exists?(shortname: 'serial') and Tag.exists?(shortname: 'environment') and Tag.exists?(shortname: 'secure by default') and Tag.exists?(shortname: 'yagni') and Tag.exists?(shortname: 'complex inputs')
      t.create_tags
      tag_count_after = Tag.all.size
      assert_equal(tag_count_before, tag_count_after)
    end
  end
=end
  test 'complex inputs tag applied' do
    t = LessonsTagger.new
    t.create_tags
    t.apply_tags
    tag = Tag.find_by(shortname: 'complex inputs')
    assert(tag)
    vt = VulnerabilityTag.find_by(tag_id: tag.id)
    assert(vt)
    assert(vt.note)
  end

end