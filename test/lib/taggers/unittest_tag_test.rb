require 'test_helper'
require 'taggers/unit_test_tagger'

class UnitTagTest < ActiveSupport::TestCase

  test 'unit test tags created' do
    t = UnitTestTagger.new
    t.create_tags
    assert_equal(1, Tag.where(shortname: 'escaped').size)
    assert_equal(1, Tag.where(shortname: 'lacked').size)
    assert_equal(1, Tag.where(shortname: 'untested').size)
  end

  test 'unit test tags not duplicated' do
    t = UnitTestTagger.new
    tag_count_before = Tag.all.size
    if Tag.exists?(shortname: 'escaped') and Tag.exists?(shortname: 'lacked') and Tag.exists?(shortname: 'untested')
      t.create_tags
      tag_count_after = Tag.all.size
      assert_equal(tag_count_before, tag_count_after)
    end
  end

  test 'escape tag applied' do
    t = UnitTestTagger.new
    t.create_tags
    t.apply_tags
    tag = Tag.find_by(shortname: 'escaped')
    assert(tag)
    vt = VulnerabilityTag.find_by(tag_id: tag.id)
    assert(vt)
    assert(vt.note)
  end

  test 'lacked tag applied' do
    t = UnitTestTagger.new
    t.create_tags
    t.apply_tags
    tag = Tag.find_by(shortname: 'lacked-test')
    assert(tag)
    vt = VulnerabilityTag.find_by(tag_id: tag.id)
    assert(vt)
    assert(vt.note)
  end

  test 'untested tag applied' do
    t = UnitTestTagger.new
    t.create_tags
    t.apply_tags
    tag = Tag.find_by(shortname: 'untested')
    assert(tag)
    vt = VulnerabilityTag.find_by(tag_id: tag.id)
    assert(vt)
    assert(vt.note)
  end

  test 'family is set' do
    t = UnitTestTagger.new
    t.create_tags
    t.apply_tags
    family = Tag.all.pluck(:family)
    assert(family.include?('unit_test'), "Family unit_test is present")
  end

end
