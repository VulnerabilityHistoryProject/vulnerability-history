require 'test_helper'
require 'taggers/language_tagger'

class LanguageTagTest < ActiveSupport::TestCase
  test 'language tags created' do
    t = LanguageTagger.new
    t.create_tags
    assert_equal(1, Tag.where(shortname: 'C').size)
    assert_equal(1, Tag.where(shortname: 'C++').size)
    assert_equal(1, Tag.where(shortname: 'Java').size)
    assert_equal(1, Tag.where(shortname: 'JS').size)
    assert_equal(1, Tag.where(shortname: 'Python').size)
  end

  test 'language tags not duplicated' do
    t = LanguageTagger.new
    tag_count_before = Tag.all.size
    if Tag.exists?(shortname: 'C') and Tag.exists?(shortname: 'C++') and Tag.exists?(shortname: 'Java') and Tag.exists?(shortname: 'JS') and Tag.exists?(shortname: 'Python')
      t.create_tags
      tag_count_after = Tag.all.size
      assert_equal(tag_count_before, tag_count_after)
    end
  end

  test 'C tag applied' do
    t = LanguageTagger.new
    t.create_tags
    t.apply_tags
    tag = Tag.find_by(shortname: 'C')
    assert(tag)
    vt = VulnerabilityTag.find_by(tag_id: tag.id)
    assert(vt)
    assert(vt.note)
  end

  test 'C++ tag applied' do
    t = LanguageTagger.new
    t.create_tags
    t.apply_tags
    tag = Tag.find_by(shortname: 'C++')
    assert(tag)
    vt = VulnerabilityTag.find_by(tag_id: tag.id)
    assert(vt)
    assert(vt.note)
  end

  test 'Java tag applied' do
    t = LanguageTagger.new
    t.create_tags
    t.apply_tags
    tag = Tag.find_by(shortname: 'Java')
    assert(tag)
    vt = VulnerabilityTag.find_by(tag_id: tag.id)
    assert(vt)
    assert(vt.note)
  end

  test 'Javascript tag applied' do
    t = LanguageTagger.new
    t.create_tags
    t.apply_tags
    tag = Tag.find_by(shortname: 'JS')
    assert(tag)
    vt = VulnerabilityTag.find_by(tag_id: tag.id)
    assert(vt)
    assert(vt.note)
  end

  test 'Python tag applied' do
    t = LanguageTagger.new
    t.create_tags
    t.apply_tags
    tag = Tag.find_by(shortname: 'Python')
    assert(tag)
    vt = VulnerabilityTag.find_by(tag_id: tag.id)
    assert(vt)
    assert(vt.note)
  end

end
