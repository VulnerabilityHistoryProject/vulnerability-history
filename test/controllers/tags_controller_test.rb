require 'test_helper'

class TagsControllerTest < ActionDispatch::IntegrationTest
  # Andy deleted the auto-generated tests. Go look into Git history get them
  # back when we decide to write these tests.
  test 'Checks basic route functionality' do
    assert_generates '/tags', controller: 'tags', action: 'index'
    assert_routing '/tags', controller: 'tags', action: 'index'
    assert_recognizes({controller: 'tags', action: 'index'}, 'tags')
  end

  test 'Checks show functionality with shortname' do
    assert_routing '/tags/Java', controller: 'tags', action: 'show', id: 'Java'
    assert_recognizes({controller: 'tags', action: 'show', id: 'Java'}, "/tags/Java")
  end

  test 'Checks show functionality with id' do
    assert_routing '/tags/104', controller: 'tags', action: 'show', id: '104'
    #assert_recognizes({contoller: 'tags', action:'show', id: '104'}, "/tags/104")
  end

  test 'Bad ID redirects' do
    get '/tags/12345'
    assert_redirected_to '/tags'
  end

  test 'Bad tag redirects' do
    get '/tags/notarealtag'
    assert_redirected_to "/tags"
  end

  test 'Checks overlaps routing functionality' do
    assert_routing '/api/tags/overlaps', controller: 'tags', action: 'overlaps'
    assert_recognizes({controller: 'tags', action: 'overlaps'}, "/api/tags/overlaps")
  end

  test 'checks invalid input for overlaps' do
    get api_tags_overlaps_url(tag_list: "invalid,tags")
    assert_response :bad_request
    assert_equal "Error: Invalid number of tags or invalid input", @response.body
  end

  test 'checks valid input for overlaps' do
    get api_tags_overlaps_url(tag_list: "cooks,owners,refactors,reverts")
    assert_response :success
    assert_not_nil @controller.instance_variable_get(:@tags)
    assert_equal Tag.overlaps(['cooks', 'owners', 'refactors', 'reverts']).as_json, @controller.instance_variable_get(:@tags).as_json
  end

  test 'Checks tag trends routing' do
    assert_routing 'api/insights/tag-trends' , controller: 'tags', action: 'tag_trends'
    assert_recognizes({controller: 'tags', action: 'tag_trends'}, 'api/insights/tag-trends')     
  end

  test 'Checks invalid input to tag trends api' do
    get api_insights_tag_trends_url(family: ["invalid", "tags"])
    assert_response :bad_request
    assert_match /Error: Invalid/, @response.body
  end

  test 'Checks valid input to tag trends api' do
    get api_insights_tag_trends_url(family: ["bounty", "lifetime", "project", "language"])
    assert_response :success
    expected = Tag.tag_trends(["bounty", "lifetime", "project", "language"]).to_json
    assert_equal expected, @response.body
  end

end
