require 'test_helper'
require 'loaders/vulnerability_loader'

class VulnerabilitiesControllerTest < ActionDispatch::IntegrationTest
  # Andy deleted the auto-generated tests. Go look into Git history get them
  # back when we decide to write these tests.

  test 'Can generate from routes' do
    assert_generates '/vulnerabilities', controller: 'vulnerabilities', action: 'index'
    assert_routing '/vulnerabilities', controller: 'vulnerabilities', action: 'index'
    assert_recognizes({controller: 'vulnerabilities', action: 'index'}, 'vulnerabilities')
  end

  test 'test basic vuln route works' do
    v = vulnerabilities(:cve_2011_3092).id.to_s
    assert_generates "/vulnerabilities/" + v, { controller: "vulnerabilities", action: "show", id: v }
    assert_routing "/vulnerabilities/" + v, { controller: "vulnerabilities", action: "show", id: v }
    assert_recognizes({ controller: "vulnerabilities", action: "show", id: v }, "/vulnerabilities/" + v)
  end

  test 'test bad vuln route works and redirects' do
    get "/vulnerabilities/" + 2.to_s
    assert_redirected_to "/vulnerabilities"
  end

end

# some tests making sure vulnerabilities load in correctly
class VulnerabilityLoaderTest < ActionDispatch::IntegrationTest

  test 'loads the short description' do
    v = Vulnerability.list_all(true)
    for i in v
      assert_not_nil(i.short_desc)
    end
  end

  test 'short_desc is only first sentence' do
    v = Vulnerability.list_all(false)
    vl = VulnerabilityLoader.new
    for i in v
      assert_equal(i.description.split('. ')[0].to_s, vl.first_sentence(i.description))
    end
  end

  test 'loads the long description' do
    v = Vulnerability.list_all(false)
    for i in v
      assert_not_nil(i.description)
    end
  end
end
