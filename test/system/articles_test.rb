# require 'application_system_test_case'

# class ArticlesTest < ApplicationSystemTestCase
#   Capybara.default_driver = :selenium

#   # ensures the looks of the header
#   test 'header appearance' do
#     visit(articles_url)

#     # testing the header
#     tb = find('.top-bar')

#     # left side
#     tb_left = tb.find('.top-bar-left')
#     title = tb_left.find('a')
#     assert(title[:href].split('/').length() == 3)     # should ensure the href is just /
#     logo = title.find('img')
#     assert_not_nil(logo)      # have no way of finding out whether or not the angler fish is the logo though
#     assert_equal('The Vulnerability History Project', title.text)

#     # right side
#     tb_right = tb.find('.top-bar-right')
#     page_links = tb_right.find('.dropdown')
#     single_links = page_links.all('.right')
#     link_num = 1
#     single_links.each { |link|
#       a = link.find('a')
#       title = ''
#       href = ''
#       case link_num
#       when 1
#         title = 'Vulnerabilities'
#         href = 'vulnerabilities'
#       when 2
#         title = 'Code'
#         href = 'filepaths'
#       when 3
#         title = 'Articles'
#         href = 'articles'
#       end
#       assert_equal(title, a[:text])
#       assert_equal(href, a[:href].split('/')[3])
#       link_num += 1
#     }
#     submenu_links = page_links.all('.has-submenu')
#     submenu_links.each { |link|
#       a = link.find('a')
#       main_title = ''
#       case link_num
#       when 4
#         main_title = 'Tags'
#       when 5
#         main_title = 'More'
#       end
#       assert_equal(main_title, a[:text])
#       submenu = link.find('.submenu', visible: false)     # the submenu isn't visible until hover, so the second argument is needed
#       submenu_items = submenu.all('.is-submenu-item', visible: false)
#       submenu_num = 1
#       submenu_items.each { |item|
#         submenu_item = item.find('a', visible: false)
#         submenu_title = ''
#         submenu_href = ''
#         case link_num
#         when 4
#           case submenu_num
#           when 1
#             submenu_title = 'All'
#             submenu_href = 'tags'
#           when 2
#             submenu_title = 'Projects'
#             submenu_href = 'tags?search=Project:'
#           when 3
#             submenu_title = 'CWEs'
#             submenu_href = 'tags?search=CWE'
#           when 4
#             submenu_title = 'Languages'
#             submenu_href = 'tags?search=Language'
#           when 5
#             submenu_title = 'Lessons'
#             submenu_href = 'tags?search=Lesson'
#           when 6
#             submenu_title = 'Severities'
#             submenu_href = 'tags?search=Severity:'
#           when 7
#             submenu_title = 'Subsystems'
#             submenu_href = 'tags?search=Subsystem'
#           end
#         when 5
#           case submenu_num
#           when 1
#             submenu_title = 'Case Studies'
#             submenu_href = 'projects'
#           when 2
#             submenu_title = 'How to Curate'
#             submenu_href = 'curate'
#           when 3
#             submenu_title = 'By the Numbers'
#             submenu_href = 'status'
#           when 4
#             submenu_title = 'About Us'
#             submenu_href = 'about'
#           end
#         end
#         assert_equal(submenu_title, submenu_item[:text])
#         assert_equal(submenu_href, submenu_item[:href].split('/')[3])
#         submenu_num += 1
#       }
#       link_num += 1
#     }
#   end

#   # ensures the looks of the footer
#   test 'footer appearance' do
#     visit(articles_url)

#     # testing the footer
#     footer = find('.footer')
#     footer_links = footer.find('.footer-links')
#     links = footer_links.all('li')
#     footer_num = 1
#     links.each { |link|
#       item = link.find('a')
#       footer_title = ''
#       footer_link = ''
#       case footer_num
#       when 1
#         footer_title = 'About Us'
#         footer_link = 'about'
#       when 2
#         footer_title = 'Contact'
#         footer_link = 'about'
#       when 3
#         footer_title = 'Licensing'
#         footer_link = 'about#licensing'
#       when 4
#         footer_title = 'Github'
#         footer_link = 'https://github.com/VulnerabilityHistoryProject'
#       when 5
#         footer_title = 'File a Bug'
#         footer_link = 'https://github.com/VulnerabilityHistoryProject/vulnerability-history/issues/new'
#       when 6
#         footer_title = 'Cite'
#         footer_link = 'about#cite'
#       end
#       assert_equal(footer_title, item[:text])
#       if footer_num == 4          # since the 4th and 5th links are external, I just added extra if statements to verify those instead
#         assert_equal(footer_link, item[:href])
#       elsif footer_num == 5
#         assert_equal(footer_link, item[:href])
#       else
#         assert_equal(footer_link, item[:href].split('/')[3])
#       end
#       footer_num += 1
#     }
#   end

#   # ensures the header links redirect correctly, submenus display on hover, and other visual elements
#   test 'header functionality' do
#     visit(articles_url)

#     # left side

#     # home page
#     visit(articles_url)

#     tb = find('.top-bar')
#     tb_left = tb.find('.top-bar-left')
#     home_a = tb_left.find('a')
#     home_a_href = home_a[:href]
#     home_a.click
#     assert_equal(home_a_href, current_url)

#     # right side

#     # vulnerabilities tab
#     visit(articles_url)

#     tb = find('.top-bar')
#     tb_right = tb.find('.top-bar-right')
#     page_links = tb_right.find('.dropdown')
#     single_links = page_links.all('.right')
#     vulnerabilities = single_links[0]
#     vulnerabilities_a = vulnerabilities.find('a')
#     vulnerabilities_a_href = vulnerabilities_a[:href]
#     vulnerabilities_a.click
#     assert_equal(vulnerabilities_a_href, current_url)

#     # code tab
#     visit(articles_url)

#     tb = find('.top-bar')
#     tb_right = tb.find('.top-bar-right')
#     page_links = tb_right.find('.dropdown')
#     single_links = page_links.all('.right')
#     code = single_links[1]
#     code_a = code.find('a')
#     code_a_href = code_a[:href]
#     code_a.click
#     assert_equal(code_a_href, current_url)
    
#     # articles tab
#     visit(articles_url)

#     tb = find('.top-bar')
#     tb_right = tb.find('.top-bar-right')
#     page_links = tb_right.find('.dropdown')
#     single_links = page_links.all('.right')
#     articles = single_links[2]
#     articles_a = articles.find('a')
#     articles_a_href = articles_a[:href]
#     articles_a.click
#     assert_equal(articles_a_href, current_url)

#     # tags/all
#     visit(articles_url)

#     tb = find('.top-bar')
#     tb_right = tb.find('.top-bar-right')
#     page_links = tb_right.find('.dropdown')
#     submenu_links = page_links.all('.has-submenu')
#     tags = submenu_links[0]
#     tags_ul = tags.find('ul', visible: false)
#     tags_ul_li = tags.all('li', visible: false)
#     all = tags_ul_li[0]
#     all_a = all.find('a', visible: false)
#     all_a_href = all_a[:href]
#     visit(all_a_href)       # since the submenu tabs aren't easily visible, the test must visit the address. may try to automate hovering in the future
#     assert_equal(all_a_href, current_url)

#     # tags/projects
#     visit(articles_url)

#     tb = find('.top-bar')
#     tb_right = tb.find('.top-bar-right')
#     page_links = tb_right.find('.dropdown')
#     submenu_links = page_links.all('.has-submenu')
#     tags = submenu_links[0]
#     tags_ul = tags.find('ul', visible: false)
#     tags_ul_li = tags.all('li', visible: false)
#     projects = tags_ul_li[1]
#     projects_a = projects.find('a', visible: false)
#     projects_a_href = projects_a[:href]
#     visit(projects_a_href)
#     assert_equal(projects_a_href, current_url)

#     # tags/cwes
#     visit(articles_url)

#     tb = find('.top-bar')
#     tb_right = tb.find('.top-bar-right')
#     page_links = tb_right.find('.dropdown')
#     submenu_links = page_links.all('.has-submenu')
#     tags = submenu_links[0]
#     tags_ul = tags.find('ul', visible: false)
#     tags_ul_li = tags.all('li', visible: false)
#     cwes = tags_ul_li[2]
#     cwes_a = cwes.find('a', visible: false)
#     cwes_a_href = cwes_a[:href]
#     visit(cwes_a_href)
#     assert_equal(cwes_a_href, current_url)

#     # tags/languages
#     visit(articles_url)

#     tb = find('.top-bar')
#     tb_right = tb.find('.top-bar-right')
#     page_links = tb_right.find('.dropdown')
#     submenu_links = page_links.all('.has-submenu')
#     tags = submenu_links[0]
#     tags_ul = tags.find('ul', visible: false)
#     tags_ul_li = tags.all('li', visible: false)
#     languages = tags_ul_li[3]
#     languages_a = languages.find('a', visible: false)
#     languages_a_href = languages_a[:href]
#     visit(languages_a_href)
#     assert_equal(languages_a_href, current_url)

#     # tags/lessons
#     visit(articles_url)

#     tb = find('.top-bar')
#     tb_right = tb.find('.top-bar-right')
#     page_links = tb_right.find('.dropdown')
#     submenu_links = page_links.all('.has-submenu')
#     tags = submenu_links[0]
#     tags_ul = tags.find('ul', visible: false)
#     tags_ul_li = tags.all('li', visible: false)
#     lessons = tags_ul_li[4]
#     lessons_a = lessons.find('a', visible: false)
#     lessons_a_href = lessons_a[:href]
#     visit(lessons_a_href)
#     assert_equal(lessons_a_href, current_url)

#     # tags/severities
#     visit(articles_url)

#     tb = find('.top-bar')
#     tb_right = tb.find('.top-bar-right')
#     page_links = tb_right.find('.dropdown')
#     submenu_links = page_links.all('.has-submenu')
#     tags = submenu_links[0]
#     tags_ul = tags.find('ul', visible: false)
#     tags_ul_li = tags.all('li', visible: false)
#     severities = tags_ul_li[5]
#     severities_a = severities.find('a', visible: false)
#     severities_a_href = severities_a[:href]
#     visit(severities_a_href)
#     assert_equal(severities_a_href, current_url)

#     # tags/subsystems
#     visit(articles_url)

#     tb = find('.top-bar')
#     tb_right = tb.find('.top-bar-right')
#     page_links = tb_right.find('.dropdown')
#     submenu_links = page_links.all('.has-submenu')
#     tags = submenu_links[0]
#     tags_ul = tags.find('ul', visible: false)
#     tags_ul_li = tags.all('li', visible: false)
#     subsystems = tags_ul_li[6]
#     subsystems_a = subsystems.find('a', visible: false)
#     subsystems_a_href = subsystems_a[:href]
#     visit(subsystems_a_href)
#     assert_equal(subsystems_a_href, current_url)

#     # more/case studies
#     visit(articles_url)

#     tb = find('.top-bar')
#     tb_right = tb.find('.top-bar-right')
#     page_links = tb_right.find('.dropdown')
#     submenu_links = page_links.all('.has-submenu')
#     tags = submenu_links[1]
#     tags_ul = tags.find('ul', visible: false)
#     tags_ul_li = tags.all('li', visible: false)
#     case_studies = tags_ul_li[0]
#     case_studies_a = case_studies.find('a', visible: false)
#     case_studies_a_href = case_studies_a[:href]
#     visit(case_studies_a_href)
#     assert_equal(case_studies_a_href, current_url)

#     # more/how to curate
#     visit(articles_url)

#     tb = find('.top-bar')
#     tb_right = tb.find('.top-bar-right')
#     page_links = tb_right.find('.dropdown')
#     submenu_links = page_links.all('.has-submenu')
#     tags = submenu_links[1]
#     tags_ul = tags.find('ul', visible: false)
#     tags_ul_li = tags.all('li', visible: false)
#     how_to_curate = tags_ul_li[1]
#     how_to_curate_a = how_to_curate.find('a', visible: false)
#     how_to_curate_a_href = how_to_curate_a[:href]
#     visit(how_to_curate_a_href)
#     assert_equal(how_to_curate_a_href, current_url)

#     # more/by the numbers
#     visit(articles_url)

#     tb = find('.top-bar')
#     tb_right = tb.find('.top-bar-right')
#     page_links = tb_right.find('.dropdown')
#     submenu_links = page_links.all('.has-submenu')
#     tags = submenu_links[1]
#     tags_ul = tags.find('ul', visible: false)
#     tags_ul_li = tags.all('li', visible: false)
#     by_the_numbers = tags_ul_li[2]
#     by_the_numbers_a = by_the_numbers.find('a', visible: false)
#     by_the_numbers_a_href = by_the_numbers_a[:href]
#     visit(by_the_numbers_a_href)
#     assert_equal(by_the_numbers_a_href, current_url)

#     # more/about us
#     visit(articles_url)

#     tb = find('.top-bar')
#     tb_right = tb.find('.top-bar-right')
#     page_links = tb_right.find('.dropdown')
#     submenu_links = page_links.all('.has-submenu')
#     tags = submenu_links[1]
#     tags_ul = tags.find('ul', visible: false)
#     tags_ul_li = tags.all('li', visible: false)
#     about_us = tags_ul_li[3]
#     about_us_a = about_us.find('a', visible: false)
#     about_us_a_href = about_us_a[:href]
#     visit(about_us_a_href)
#     assert_equal(about_us_a_href, current_url)
#   end
# end
