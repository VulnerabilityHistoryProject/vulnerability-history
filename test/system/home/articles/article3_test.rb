require "application_system_test_case"

class Article3Test < ApplicationSystemTestCase
  setup do
    Capybara.app_host = "https://alpha.vulnerabilityhistory.org"
    Capybara.run_server = false

    @start = root_path

    @a3_title = 'Rochester Institute of Technology'
    @a3_slug = 'rit'
    @a3_art = 'vhp-art-rit'
    @a3_blurb = 
    "This project was founded at the Rochester Institute of Technology." +
    "Find out more about how we are doing our part to improve cybersecurity " +
    "around the world."
    @a3_tag = nil
    @a3_author = 'Andy Meneely'
    @a3_fulltext =
    "At the Rochester Institute of Technology we take cybersecurity very seriously. " +
    "We believe that everyone needs to learn about security, not just the expoerts.\n" +
    "That's why in the Department of Software Engineering we require every student to " +
    "take our Engineering Secure Software course. In this course, we explore a myriad of " +
    "engineering mistakes that lead to vulnerabilities. Every year, around 120 students " +
    "take this course. The Vulnerability History Project is a two-way street with the " +
    "classroom: what we learn in the classroom shows up here, and vice versa.\n" +
    "For students who want to become exports in all things cybersecurity, we have a " +
    "whole different department for that, too, The Department of Computing Security " +
    "offers highly flexible major where students can focus on cybersecurity as it " +
    "applies to penetration testing, networking, system administration, malware, " +
    "cryptography, and all kinds of other security subdisciplines.\n" +
    "Finally, the RIT Global Cybersecurity Institute is our interdisciplinary " +
    "research center for all things cybersecurity at RIT."
  end

  test 'article 3 can be accessed' do
    visit @start
    gc = find '.grid-container'
    articles = gc.find(id: 'article-listing')

    # verifies image
    article = articles.all('.vhp-articles')[1]
    article_2 = article.all('.blurb')[1]
    wrapper = article_2.find('.grid-y')
    article_image = wrapper.find('.blurb-art')
    assert_equal @a3_art, article_image.find('div')[:class]

    # verifies title
    header_and_text = wrapper.find('.blurb-text')
    article_title = header_and_text.find('h3')
    assert_equal @a3_title, article_title.text
    
    # verifies blurb
    article_blurb = header_and_text.all('p')
    article_blurb_text = ""
    article_blurb.each do |e|
      article_blurb_text += e.text
    end
    assert_equal @a3_blurb, article_blurb_text.split(".")[0...-1].join(".") + "." 

    # tests tag link works correctly
    if header_and_text.all('a').length > 1
      tag_a = header_and_text.all('a')[-2]    # assuming there is no link between the tag and full article inside the blurb
      tag_a_href = tag_a[:href]
      assert_equal @a3_tag, tag_a_href.split("/")[-1]
      tag_a.click
      assert_equal tag_a_href, current_url
      visit @start
    end

    # verifies slug
    full_article_a = header_and_text.all('a')[-1]
    full_article_a_href = full_article_a[:href]
    assert_equal @a3_slug, full_article_a_href.split("/")[-1]

    # verifies follows correct url
    full_article_a.click
    assert_equal full_article_a_href, current_url

    # verifies consistent article title
    gc = find '.grid-container'
    grid_x_title = gc.all('.grid-x')[0]
    cell_title = grid_x_title.find('.cell')
    title = cell_title.find('.centered-title')
    assert_equal @a3_title, title.text

    # verifies author
    grid_x_author = gc.all('.grid-x')[1]
    cell_author = grid_x_author.find('.cell')
    byline = cell_author.find('.title-byline')
    assert_equal @a3_author, byline.text

    # verifies consistent image
    grid_x_image = gc.all('.grid-x')[2]
    cell_image = grid_x_image.find('.cell')
    image = cell_image.find('div')
    assert_equal @a3_art, image[:class]

    # verifies correct fulltext
    grid_x_fulltext = gc.all('.grid-x')[3]
    cell_fulltext = grid_x_fulltext.find('.cell')
    assert_equal @a3_fulltext, cell_fulltext.text

    # if there are links in the article, follow them and make sure they work
    cell_fulltext.all('a').each do |a|
      href = a[:href]
      a.click
      assert_equal href, current_url
      visit "#{@start}articles/#{@a3_slug}"
    end

    # return home
    click_link 'The Vulnerability History Project'
  end
end