require "application_system_test_case"

class Article2Test < ApplicationSystemTestCase
  setup do
    Capybara.app_host = "https://alpha.vulnerabilityhistory.org"
    Capybara.run_server = false

    @start = root_path

    @a2_title = 'Always Be Refactoring'
    @a2_slug = 'refactoring'
    @a2_art = 'vhp-art-refactor'
    @a2_blurb = 
    "You can't secure it if you can't maintain it." +
    "Refactoring is the practice of improving the maintainability " +
    "of the code without changing its functionality. Problems can " +
    "occur when refactoring is ignored for long periods of time." +
    "Refactoring is an active area of software engineering research."
    @a2_tag = nil
    @a2_author = 'Andy Meneely'
    @a2_fulltext = 
    "You can't secure it if you can't maintain it.\n" +
    "A widespread practice, refactoring is useful for improving your code's " +
    "maintainability. If you are changing the code without changing what it does, " +
    "you are refactoring. Simple refactorings include:\n" +
    "Renaming a variable, method, class, etc.\n" +
    "Extract a chunk of code into a separate method, class, etc.\n" +
    "Inlining code from an existing method\n" +
    "Moving code to a more intuitive place\n" +
    "You can see a larger catalog at refactoring.com. Much of the original refactoring " +
    "work is credited to Martin Fowler.\n" +
    "Refactoring is also much easier when the system has an automated regression test suite. " + 
    "Regression testing allows you to make changes and have some guarantees that you are " +
    "performing the same functionality. They make changes to your code safer.\n" +
    "A refactoring effort can also be preparation for a significant change like an architectural " +
    "change or a new feature. For example, you could take a chunk of code and refactor it out to " +
    "another method as a way to generalize it for others to use it.\n" +
    "In research, the relationship between bugs and refactoring is quite clear. An October 2020 " +
    "study from Pantiuchina et al. shows that developers have a variety of reasons behind their " +
    "refactoring efforts. Here are several prominent reasons, summarized from Table 7:\n" +
    "Improve Code Design\n" +
    "Improve Understandability and Readability\n" +
    "Improve Quality of Test Code\n" +
    "Preparing for Code Changes\n" +
    "Prevent bugs\n" +
    "Improve Performance\n" +
    "Promote API compatibility\n" +
    "The relationship between vulnerabilities, specifically, and refactoring is an open question. " +
    "What refactoring techniques are most commonly associated with secure software? Does a history " +
    "of regularly applying refactoring to code correlate with a lower rate of vulnerabilities? We " +
    "believe this area of research needs to be explored.\n" +
    "Below are some more studies on refactoring:\n" +
    "Jevgenija Pantiuchina, Fiorella Zampetti, Simone Scalabrino, Valentina Piantadosi, Rocco Oliveto, " +
    "Gabriele Bavota, and Massimiliano Di Penta. 2020. Why Developers Refactor Source Code: A Mining-based " +
    "Study. ACM Trans. Softw. Eng. Methodol. 29, 4, Article 29 (October 2020), 30 pages. https://doi.org/10.1145/3408302\n" +
    "Mohammad Alshayeb. 2009. Empirical investigation of refactoring effect on software quality. Inf. Softw. Technol. 51, 9 (2009), 1319--1326.\n"  +
    "Gabriele Bavota, Andrea De Lucia, Andrian Marcus, and Rocco Oliveto. 2013. Using structural and " +
    "semantic measures to improve software modularization. Empir. Softw. Eng. 18, 5 (2013), 901--932.\n" +
    "Gabriele Bavota, Andrea De Lucia, Massimiliano Di Penta, Rocco Oliveto, and Fabio Palomba. 2015. An " +
    "experimental investigation on the innate relationship between quality and refactoring. J. Syst. Softw. " +
    "107 (2015), 1--14. https://doi.org/10.1016/j.jss.2015.05.024\n" +
    "Raymond P. L. Buse and Westley Weimer. 2010. Learning a metric for code readability. IEEE Trans. Softw. Eng. 36, 4 (2010), 546--558.\n" +
    "Dawn Lawrie, Christopher Morrell, Henry Feild, and David Binkley. 2007. Effective identifier names " +
    "for comprehension and memory. Innov. Syst. Softw. Eng. 3, 4 (2007), 303--318."
  end

  test 'article 2 can be accessed' do
    visit @start
    gc = find '.grid-container'
    articles = gc.find(id: 'article-listing')

    # verifies image
    article = articles.all('.vhp-articles')[1]
    article_2 = article.all('.blurb')[0]
    wrapper = article_2.find('.grid-y')
    article_image = wrapper.find('.blurb-art')
    assert_equal @a2_art, article_image.find('div')[:class]

    # verifies title
    header_and_text = wrapper.find('.blurb-text')
    article_title = header_and_text.find('h3')
    assert_equal @a2_title, article_title.text
    
    # verifies blurb
    article_blurb = header_and_text.all('p')
    article_blurb_text = ""
    article_blurb.each do |e|
      article_blurb_text += e.text
    end
    assert_equal @a2_blurb, article_blurb_text.split(".")[0...-1].join(".") + "." 

    # tests tag link works correctly
    if header_and_text.all('a').length > 1
      tag_a = header_and_text.all('a')[-2]    # assuming there is no link between the tag and full article inside the blurb
      tag_a_href = tag_a[:href]
      assert_equal @a2_tag, tag_a_href.split("/")[-1]
      tag_a.click
      assert_equal tag_a_href, current_url
      visit @start
    end

    # verifies slug
    full_article_a = header_and_text.all('a')[-1]
    full_article_a_href = full_article_a[:href]
    assert_equal @a2_slug, full_article_a_href.split("/")[-1]

    # verifies follows correct url
    full_article_a.click
    assert_equal full_article_a_href, current_url

    # verifies consistent article title
    gc = find '.grid-container'
    grid_x_title = gc.all('.grid-x')[0]
    cell_title = grid_x_title.find('.cell')
    title = cell_title.find('.centered-title')
    assert_equal @a2_title, title.text

    # verifies author
    grid_x_author = gc.all('.grid-x')[1]
    cell_author = grid_x_author.find('.cell')
    byline = cell_author.find('.title-byline')
    assert_equal @a2_author, byline.text

    # verifies consistent image
    grid_x_image = gc.all('.grid-x')[2]
    cell_image = grid_x_image.find('.cell')
    image = cell_image.find('div')
    assert_equal 'vhp-art-refactor', image[:class]

    # verifies correct fulltext
    grid_x_fulltext = gc.all('.grid-x')[3]
    cell_fulltext = grid_x_fulltext.find('.cell')
    assert_equal @a2_fulltext, cell_fulltext.text

    # if there are links in the article, follow them and make sure they work
    cell_fulltext.all('a').each do |a|
      href = a[:href]
      puts "following external link: #{href}"
      a.click
      assert_equal href, current_url
      visit "#{@start}/articles/#{@a2_slug}"
    end

    # return home
    click_link 'The Vulnerability History Project'
  end
end