require "application_system_test_case"

class Article5Test < ApplicationSystemTestCase
  setup do
    Capybara.app_host = "https://alpha.vulnerabilityhistory.org"
    Capybara.run_server = false

    @start = root_path
    
    @a5_title = 'We Love Open Questions'
    @a5_slug = 'open-questions'
    @a5_art = 'vhp-art-question'
    @a5_blurb = 
    "Why do we talk about things that have not been \"proven\" " +
    "in research?" +
    "Because science is a work in progress. It is perpetually tentative." +
    "Let's talk about some open questions that we've discovered via the " +
    "Vulnerability History Project."
    @a5_tag = nil
    @a5_author = 'Andy Meneely'
    @a5_fulltext = 
    "You can't talk about that, it's not proven!\n" +
    "If we waited for the evidence to be crystal clear, " +
    "the state of the world would never improve. Software " +
    "engineers know this tension: you will always release " +
    "buggy software. You can't wait for things to be perfect, " +
    "because they never will be. Same with research.\n" +
    "We want this project to be a two-way street. We will " +
    "talk about software security engineering research here, " +
    "but we also want to inspire research studies too.\n" +
    "Here is a list of open questions in software security " +
    "engineering research:\n" +
    "In what ways has refactoring historically improved software security?\n" +
    "Do developers have a blindspot for internationalization that leads to vulnerabilities?\n" + 
    "How many people should be working on the same code at the same time? And how should we accomplish that?\n"+
    "â€¦and many more to come. We'll update this list as we develop this site!\n" +
    "Want to contribute your own questions? Send us a pull request!"
  end

  test 'article 5 can be accessed' do
    visit @start
    gc = find '.grid-container'
    articles = gc.find(id: 'article-listing')

    # verifies image
    article = articles.all('.vhp-articles')[1]
    article_2 = article.all('.blurb')[3]
    wrapper = article_2.find('.grid-y')
    article_image = wrapper.find('.blurb-art')
    assert_equal @a5_art, article_image.find('div')[:class]

    # verifies title
    header_and_text = wrapper.find('.blurb-text')
    article_title = header_and_text.find('h3')
    assert_equal @a5_title, article_title.text
    
    # verifies blurb
    article_blurb = header_and_text.all('p')
    article_blurb_text = ""
    article_blurb.each do |e|
      article_blurb_text += e.text
    end
    assert_equal @a5_blurb, article_blurb_text.split(".")[0...-1].join(".") + "." 

    # tests tag link works correctly
    if header_and_text.all('a').length > 1
      tag_a = header_and_text.all('a')[-2]    # assuming there is no link between the tag and full article inside the blurb
      tag_a_href = tag_a[:href]
      assert_equal @a5_tag, tag_a_href.split("/")[-1]
      tag_a.click
      assert_equal tag_a_href, current_url
      visit @start
    end

    # verifies slug
    full_article_a = header_and_text.all('a')[-1]
    full_article_a_href = full_article_a[:href]
    assert_equal @a5_slug, full_article_a_href.split("/")[-1]

    # verifies follows correct url
    full_article_a.click
    assert_equal full_article_a_href, current_url

    # verifies consistent article title
    gc = find '.grid-container'
    grid_x_title = gc.all('.grid-x')[0]
    cell_title = grid_x_title.find('.cell')
    title = cell_title.find('.centered-title')
    assert_equal @a5_title, title.text

    # verifies author
    grid_x_author = gc.all('.grid-x')[1]
    cell_author = grid_x_author.find('.cell')
    byline = cell_author.find('.title-byline')
    assert_equal @a5_author, byline.text

    # verifies consistent image
    grid_x_image = gc.all('.grid-x')[2]
    cell_image = grid_x_image.find('.cell')
    image = cell_image.find('div')
    assert_equal @a5_art, image[:class]

    # verifies correct fulltext
    grid_x_fulltext = gc.all('.grid-x')[3]
    cell_fulltext = grid_x_fulltext.find('.cell')
    assert_equal @a5_fulltext, cell_fulltext.text

    # if there are links in the article, follow them and make sure they work
    links = []
    cell_fulltext.all('a').each do |a|
      links << a[:href]
    end
    # if we were to do this from one loop, the 'a' elements would become "stale" - need to put them in memory first
    links.each do |link|
      puts "following external link: #{link}"
      visit link
      assert_equal link, current_url
      visit "#{@start}articles/#{@a5_slug}"
    end

    # return home
    click_link 'The Vulnerability History Project'
  end
end
