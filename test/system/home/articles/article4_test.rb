# require "application_system_test_case"

# class Article4Test < ApplicationSystemTestCase
#   setup do
#     Capybara.app_host = "https://alpha.vulnerabilityhistory.org"
#     Capybara.run_server = false

#     @start = root_path

#     @a4_title = 'Beware of complex inputs'
#     @a4_slug = 'beware-complex-inputs'
#     @a4_art = 'vhp-art-snowflake'
#     @a4_blurb = 
#     "Don't just think about code complexity, think about input complexity." +
#     "Computers only understand numbers, so the ways in which we translate our " +
#     "inputs are quite elaborate. If your inputs are complex, errors will abound." +
#     "How should we defend against complex inputs? Read more about input complexity " +
#     "and see some examples over at our tag, Complex Inputs."
#     @a4_tag = 'complex-inputs'
#     @a4_author = 'Andy Meneely'
#     @a4_fulltext =
#     "The full text of this article can be found at the Complex Inputs tag page."
#   end

#   test 'article 4 can be accessed' do
#     visit @start
#     gc = find '.grid-container'
#     articles = gc.find(id: 'article-listing')

#     # verifies image
#     article = articles.all('.vhp-articles')[1]
#     article_2 = article.all('.blurb')[2]
#     wrapper = article_2.find('.grid-y')
#     article_image = wrapper.find('.blurb-art')
#     assert_equal @a4_art, article_image.find('div')[:class]

#     # verifies title
#     header_and_text = wrapper.find('.blurb-text')
#     article_title = header_and_text.find('h3')
#     assert_equal @a4_title, article_title.text
    
#     # verifies blurb
#     article_blurb = header_and_text.all('p')
#     article_blurb_text = ""
#     article_blurb.each do |e|
#       article_blurb_text += e.text
#     end
#     assert_equal @a4_blurb, article_blurb_text.split(".")[0...-1].join(".") + "." 

#     # tests tag link works correctly
#     if header_and_text.all('a').length > 1
#       tag_a = header_and_text.all('a')[-2]    # assuming there is no link between the tag and full article inside the blurb
#       tag_a_href = tag_a[:href]
#       assert_equal @a4_tag, tag_a_href.split("/")[-1]
#       tag_a.click
#       assert_equal tag_a_href, current_url
#       visit @start
#     end

#     # need to find our place after returning back to start
#     gc = find '.grid-container'
#     articles = gc.find(id: 'article-listing')

#     # verifies image
#     article = articles.all('.vhp-articles')[1]
#     article_2 = article.all('.blurb')[2]
#     wrapper = article_2.find('.grid-y')
#     header_and_text = wrapper.find('.blurb-text')

#     # verifies slug
#     full_article_a = header_and_text.all('a')[-1]
#     full_article_a_href = full_article_a[:href]
#     assert_equal @a4_slug, full_article_a_href.split("/")[-1]

#     # verifies follows correct url
#     full_article_a.click
#     assert_equal full_article_a_href, current_url

#     # verifies consistent article title
#     gc = find '.grid-container'
#     grid_x_title = gc.all('.grid-x')[0]
#     cell_title = grid_x_title.find('.cell')
#     title = cell_title.find('.centered-title')
#     assert_equal @a4_title, title.text

#     # verifies author
#     grid_x_author = gc.all('.grid-x')[1]
#     cell_author = grid_x_author.find('.cell')
#     byline = cell_author.find('.title-byline')
#     assert_equal @a4_author, byline.text

#     # verifies consistent image
#     grid_x_image = gc.all('.grid-x')[2]
#     cell_image = grid_x_image.find('.cell')
#     image = cell_image.find('div')
#     assert_equal @a4_art, image[:class]

#     # verifies correct fulltext
#     grid_x_fulltext = gc.all('.grid-x')[3]
#     cell_fulltext = grid_x_fulltext.find('.cell')
#     assert_equal @a4_fulltext, cell_fulltext.text

#     # if there are links in the article, follow them and make sure they work
#     links = []
#     cell_fulltext.all('a').each do |a|
#       links << a[:href]
#     end
#     # if we were to do this from one loop, the 'a' elements would become "stale" - need to put them in memory first
#     links.each do |link|
#       puts "following external link: #{link}"
#       visit link
#       assert_equal link, current_url
#       visit "#{@start}articles/#{@a4_slug}"
#     end

#     # return home
#     click_link 'The Vulnerability History Project'
#   end
# end