require "application_system_test_case"

class VulnerabilitiesTest < ApplicationSystemTestCase
  
  setup do
    @start = vulnerabilities_path
  end

  # home tab
  test 'navbar home' do
    visit @start
    tb = find('.top-bar')
    tb_left = tb.find('.top-bar-left')
    home_a = tb_left.find('a')
    home_a_href = home_a[:href]
    home_a.click
    assert_equal home_a_href, current_url
  end

  # vulnerabilities tab
  test 'navbar vulnerabilities' do
    visit @start
    tb = find('.top-bar')
    tb_right = tb.find('.top-bar-right')
    page_links = tb_right.find('.dropdown')
    single_links = page_links.all('.right')
    vulnerabilities = single_links[0]
    vulnerabilities_a = vulnerabilities.find('a')
    vulnerabilities_a_href = vulnerabilities_a[:href]
    vulnerabilities_a.click
    assert_equal vulnerabilities_a_href, current_url 
  end

  # code tab
  test 'navbar code' do
    visit @start
    tb = find('.top-bar')
    tb_right = tb.find('.top-bar-right')
    page_links = tb_right.find('.dropdown')
    single_links = page_links.all('.right')
    code = single_links[1]
    code_a = code.find('a')
    code_a_href = code_a[:href]
    code_a.click
    assert_equal code_a_href, current_url 
  end

  # articles tab
  test 'navbar articles' do
    visit @start
    tb = find('.top-bar')
    tb_right = tb.find('.top-bar-right')
    page_links = tb_right.find('.dropdown')
    single_links = page_links.all('.right')
    articles = single_links[2]
    articles_a = articles.find('a')
    articles_a_href = articles_a[:href]
    articles_a.click
    assert_equal articles_a_href, current_url 
  end

  # tags/all
  test 'navbar tags/all' do
    visit @start
    tb = find('.top-bar')
    tb_right = tb.find('.top-bar-right')
    page_links = tb_right.find('.dropdown')
    submenu_links = page_links.all('.has-submenu')
    tags = submenu_links[0]
    tags_ul = tags.find('ul', visible: false)
    tags_ul_li = tags.all('li', visible: false)
    all = tags_ul_li[0]
    all_a = all.find('a', visible: false)
    all_a_href = all_a[:href]
    visit all_a_href        # since the submenu tabs aren't easily visible, the test must visit the address. may try to automate hovering in the future
    assert_equal all_a_href, current_url 
  end

  # tags/projects
  test 'navbar tags/projects' do
    visit @start
    tb = find('.top-bar')
    tb_right = tb.find('.top-bar-right')
    page_links = tb_right.find('.dropdown')
    submenu_links = page_links.all('.has-submenu')
    tags = submenu_links[0]
    tags_ul = tags.find('ul', visible: false)
    tags_ul_li = tags.all('li', visible: false)
    projects = tags_ul_li[1]
    projects_a = projects.find('a', visible: false)
    projects_a_href = projects_a[:href]
    visit projects_a_href 
    assert_equal projects_a_href, current_url
  end

  # tags/cwes
  test 'navbar tags/cwes' do
    visit @start
    tb = find('.top-bar')
    tb_right = tb.find('.top-bar-right')
    page_links = tb_right.find('.dropdown')
    submenu_links = page_links.all('.has-submenu')
    tags = submenu_links[0]
    tags_ul = tags.find('ul', visible: false)
    tags_ul_li = tags.all('li', visible: false)
    cwes = tags_ul_li[2]
    cwes_a = cwes.find('a', visible: false)
    cwes_a_href = cwes_a[:href]
    visit cwes_a_href 
    assert_equal cwes_a_href, current_url
  end

  # tags/languages
  test 'navbar tags/languages' do
    visit @start
    tb = find('.top-bar')
    tb_right = tb.find('.top-bar-right')
    page_links = tb_right.find('.dropdown')
    submenu_links = page_links.all('.has-submenu')
    tags = submenu_links[0]
    tags_ul = tags.find('ul', visible: false)
    tags_ul_li = tags.all('li', visible: false)
    languages = tags_ul_li[3]
    languages_a = languages.find('a', visible: false)
    languages_a_href = languages_a[:href]
    visit languages_a_href 
    assert_equal languages_a_href, current_url 
  end

  # tags/lessons
  test 'navbar tags/lessons' do
    visit @start
    tb = find('.top-bar')
    tb_right = tb.find('.top-bar-right')
    page_links = tb_right.find('.dropdown')
    submenu_links = page_links.all('.has-submenu')
    tags = submenu_links[0]
    tags_ul = tags.find('ul', visible: false)
    tags_ul_li = tags.all('li', visible: false)
    lessons = tags_ul_li[4]
    lessons_a = lessons.find('a', visible: false)
    lessons_a_href = lessons_a[:href]
    visit lessons_a_href 
    assert_equal lessons_a_href, current_url 
  end

  # tags/severities
  test 'tags/severities' do
    visit @start
    tb = find('.top-bar')
    tb_right = tb.find('.top-bar-right')
    page_links = tb_right.find('.dropdown')
    submenu_links = page_links.all('.has-submenu')
    tags = submenu_links[0]
    tags_ul = tags.find('ul', visible: false)
    tags_ul_li = tags.all('li', visible: false)
    severities = tags_ul_li[5]
    severities_a = severities.find('a', visible: false)
    severities_a_href = severities_a[:href]
    visit severities_a_href 
    assert_equal severities_a_href, current_url 
  end

  # tags/subsystems
  test 'tags/subsystems' do
    visit @start
    tb = find('.top-bar')
    tb_right = tb.find('.top-bar-right')
    page_links = tb_right.find('.dropdown')
    submenu_links = page_links.all('.has-submenu')
    tags = submenu_links[0]
    tags_ul = tags.find('ul', visible: false)
    tags_ul_li = tags.all('li', visible: false)
    subsystems = tags_ul_li[6]
    subsystems_a = subsystems.find('a', visible: false)
    subsystems_a_href = subsystems_a[:href]
    visit subsystems_a_href 
    assert_equal subsystems_a_href, current_url 
  end

  # more/case studies
  test 'more/case studies' do
    visit @start
    tb = find('.top-bar')
    tb_right = tb.find('.top-bar-right')
    page_links = tb_right.find('.dropdown')
    submenu_links = page_links.all('.has-submenu')
    tags = submenu_links[1]
    tags_ul = tags.find('ul', visible: false)
    tags_ul_li = tags.all('li', visible: false)
    case_studies = tags_ul_li[0]
    case_studies_a = case_studies.find('a', visible: false)
    case_studies_a_href = case_studies_a[:href]
    visit case_studies_a_href 
    assert_equal case_studies_a_href, current_url 
  end

  # more/how to curate
  test 'more/how to curate' do
    visit @start
    tb = find('.top-bar')
    tb_right = tb.find('.top-bar-right')
    page_links = tb_right.find('.dropdown')
    submenu_links = page_links.all('.has-submenu')
    tags = submenu_links[1]
    tags_ul = tags.find('ul', visible: false)
    tags_ul_li = tags.all('li', visible: false)
    how_to_curate = tags_ul_li[1]
    how_to_curate_a = how_to_curate.find('a', visible: false)
    how_to_curate_a_href = how_to_curate_a[:href]
    visit how_to_curate_a_href
    assert_equal how_to_curate_a_href, current_url 
  end

  # more/by the numbers
  test 'more/by the numbers' do
    visit @start
    tb = find('.top-bar')
    tb_right = tb.find('.top-bar-right')
    page_links = tb_right.find('.dropdown')
    submenu_links = page_links.all('.has-submenu')
    tags = submenu_links[1]
    tags_ul = tags.find('ul', visible: false)
    tags_ul_li = tags.all('li', visible: false)
    by_the_numbers = tags_ul_li[2]
    by_the_numbers_a = by_the_numbers.find('a', visible: false)
    by_the_numbers_a_href = by_the_numbers_a[:href]
    visit by_the_numbers_a_href 
    assert_equal by_the_numbers_a_href, current_url 
  end

  # more/about us
  test 'more/about us' do
    visit @start
    tb = find('.top-bar')
    tb_right = tb.find('.top-bar-right')
    page_links = tb_right.find('.dropdown')
    submenu_links = page_links.all('.has-submenu')
    tags = submenu_links[1]
    tags_ul = tags.find('ul', visible: false)
    tags_ul_li = tags.all('li', visible: false)
    about_us = tags_ul_li[3]
    about_us_a = about_us.find('a', visible: false)
    about_us_a_href = about_us_a[:href]
    visit about_us_a_href 
    assert_equal about_us_a_href, current_url 
  end

  ensures correct page title
  test 'title' do
    visit @start
    gc = find('.grid-container')
    title = gc.all('.grid-x')[0]
    title_wrapper = title.find('.cell')
    page_title = title_wrapper.find('.centered-title')
    assert_equal 'Vulnerabilities', page_title.text
  end

  # ensures correct page description
  test 'description' do 
    visit @start
    gc = find('.grid-container')
    description = gc.all('.grid-x')[1]
    description_wrapper = description.find('.cell')
    page_description = description_wrapper.all('p')
    assert_equal(
      "These are the known vulnerabilities in our database. Every " +
      "vulnerability known to the VHP project is reported here, " +
      "regardless of what the state of its curation is.",
      page_description[0].text
    )
    assert_equal(
      "Each vulnerability is given upvotes by our curators. Upvotes are an " +
      "entirely subjective measure of how interesting the story each " +
      "curator finds the vulnerability. Everyone is encouraged to " +
      "contribute upvotes to vulnerabilities!",
      page_description[1].text
    )
  end

  test 'click on first vulnerability' do
    visit @start
    expect(page).to have_content
    click_on 'FooBar aka CVE-2011-3092'
  end

#   test 'table tab' do
#     visit @start

#     # just verifies vulnerabilities auto-loads into the table, then keeps going from #table
#     gc = find('.grid-container')
#     tabs_wrapper = gc.all('.grid-x')[2]
#     tabs = tabs_wrapper.all('.tabs-title')
#     tab_table = tabs[0]
#     assert_equal 'is-active', tab_table[:class][/is-active/]
#     assert_equal 'vhp-icon-table', tab_table.find('i')[:class]
#     assert_equal 'Table', tab_table.find('a').text
#     tab_table.find('a').click
#     puts current_path
#     # on first open, the table should be present
#     # assert_equal "presentation", tabs[1][:role]
#     # table_wrapper = gc.find('.tabs-panel')
#     # wrapper_1 = table_wrapper.find('.grid-x')
#     # wrapper_2 = wrapper_1.find('.cell')
#     # wrapper_3 = wrapper_2.find('.dataTables_wrapper')
#     # table_nav = wrapper_3.find('.table-nav')
#     # table = wrapper_3.find("table")
#     # table_head = wrapper_3.find('thead')
#     # row_wrapper = table_head.find('tr')
#     # head_columns = row_wrapper.all('th')
    
#     # # 'vulnerability' column
#     # column_vulnerability = head_columns[0]
#     # column_vulnerability_icon = column_vulnerability.find('i')
#     # assert_equal "vhp-icon-vulnerability", column_vulnerability_icon[:class]
#     # assert_equal " Vulnerability", column_vulnerability.text

#     # # 'description' column
#     # column_description = head_columns[1]
#     # column_description_icon = column_description.find('i')
#     # assert_equal "vhp-icon-info", column_description_icon[:class]
#     # assert_equal " Description", column_description.text

#     # # 'date' column
#     # column_date = head_columns[2]
#     # column_date_icon = column_date.find('i')
#     # assert_equal "vhp-icon-announce", column_date_icon[:class]
#     # assert_equal " Date", column_date.text

#     # # 'upvotes' column
#     # column_upvotes = head_columns[3]
#     # column_upvotes_icon = column_upvotes.find('i')
#     # assert_equal "vhp-icon-upvote", column_upvotes_icon[:class]

#     # # 'tags' column
#     # column_tags = head_columns[4]
#     # column_tags_icon = column_tags.find('i')
#     # assert_equal "vhp-icon-tags", column_tags_icon[:class]
#     # assert_equal " Tags", column_tags[:class]

#     # table_body = table.find("tbody")
#     # rows = table_body.all('tr')
#     # rows.each do |row|
#     #     puts "new row"
#     # end
#   end
end