require 'application_system_test_case'

# each of these will test looks and functionality
class HomeTest < ApplicationSystemTestCase

  # ensures the looks of the header
  test 'header appearance' do
    visit(root_url)

    # testing the header
    tb = find('.top-bar')

    # left side
    tb_left = tb.find('.top-bar-left')
    title = tb_left.find('a')
    assert(title[:href].split('/').length() == 3)     # should ensure the href is just /
    logo = title.find('img')
    assert_not_nil(logo)      # have no way of finding out whether or not the angler fish is the logo though
    assert_equal('The Vulnerability History Project', title.text)

    # right side
    tb_right = tb.find('.top-bar-right')
    page_links = tb_right.find('.dropdown')
    single_links = page_links.all('.right')
    link_num = 1
    single_links.each { |link|
      a = link.find('a')
      title = ''
      href = ''
      case link_num
      when 1
        title = 'Vulnerabilities'
        href = 'vulnerabilities'
      when 2
        title = 'Code'
        href = 'filepaths'
      when 3
        title = 'Articles'
        href = 'articles'
      end
      assert_equal(title, a[:text])
      assert_equal(href, a[:href].split('/')[3])
      link_num += 1
    }
    submenu_links = page_links.all('.has-submenu')
    submenu_links.each { |link|
      a = link.find('a')
      main_title = ''
      case link_num
      when 4
        main_title = 'Tags'
      when 5
        main_title = 'More'
      end
      assert_equal(main_title, a[:text])
      submenu = link.find('.submenu', visible: false)     # the submenu isn't visible until hover, so the second argument is needed
      submenu_items = submenu.all('.is-submenu-item', visible: false)
      submenu_num = 1
      submenu_items.each { |item|
        submenu_item = item.find('a', visible: false)
        submenu_title = ''
        submenu_href = ''
        case link_num
        when 4
          case submenu_num
          when 1
            submenu_title = 'All'
            submenu_href = 'tags'
          when 2
            submenu_title = 'Projects'
            submenu_href = 'tags?search=Project:'
          when 3
            submenu_title = 'CWEs'
            submenu_href = 'tags?search=CWE'
          when 4
            submenu_title = 'Languages'
            submenu_href = 'tags?search=Language'
          when 5
            submenu_title = 'Lessons'
            submenu_href = 'tags?search=Lesson'
          when 6
            submenu_title = 'Severities'
            submenu_href = 'tags?search=Severity:'
          when 7
            submenu_title = 'Subsystems'
            submenu_href = 'tags?search=Subsystem'
          end
        when 5
          case submenu_num
          when 1
            submenu_title = 'Case Studies'
            submenu_href = 'projects'
          when 2
            submenu_title = 'How to Curate'
            submenu_href = 'curate'
          when 3
            submenu_title = 'By the Numbers'
            submenu_href = 'status'
          when 4
            submenu_title = 'About Us'
            submenu_href = 'about'
          end
        end
        assert_equal(submenu_title, submenu_item[:text])
        assert_equal(submenu_href, submenu_item[:href].split('/')[3])
        submenu_num += 1
      }
      link_num += 1
    }
  end

  # ensures the looks of the footer
  test 'footer appearance' do
    visit(root_url)

    # testing the footer
    footer = find('.footer')
    footer_links = footer.find('.footer-links')
    links = footer_links.all('li')
    footer_num = 1
    links.each { |link|
      item = link.find('a')
      footer_title = ''
      footer_link = ''
      case footer_num
      when 1
        footer_title = 'About Us'
        footer_link = 'about'
      when 2
        footer_title = 'Contact'
        footer_link = 'about'
      when 3
        footer_title = 'Licensing'
        footer_link = 'about#licensing'
      when 4
        footer_title = 'Github'
        footer_link = 'https://github.com/VulnerabilityHistoryProject'
      when 5
        footer_title = 'File a Bug'
        footer_link = 'https://github.com/VulnerabilityHistoryProject/vulnerability-history/issues/new'
      when 6
        footer_title = 'Cite'
        footer_link = 'about#cite'
      end
      assert_equal(footer_title, item[:text])
      if footer_num == 4          # since the 4th and 5th links are external, I just added extra if statements to verify those instead
        assert_equal(footer_link, item[:href])
      elsif footer_num == 5
        assert_equal(footer_link, item[:href])
      else
        assert_equal(footer_link, item[:href].split('/')[3])
      end
      footer_num += 1
    }
  end

  # ensures the header links redirect correctly, submenus display on hover, and other visual elements
  test 'header functionality' do
    visit(root_url)

    # left side
    visit(root_url)
    curr_url = current_url
    click_on('The Vulnerability History Project')
    assert_equal(curr_url, current_url)

    # right side

    # vulnerabilities tab
    visit(root_url)

    tb = find('.top-bar')
    tb_right = tb.find('.top-bar-right')
    page_links = tb_right.find('.dropdown')
    single_links = page_links.all('.right')
    vulnerabilities = single_links[0]
    v_a = vulnerabilities.find('a')
    v_ah = v_a[:href]
    click_on(v_a[:text])
    assert_equal(v_ah, current_url)

    # code tab
    visit(root_url)

    tb = find('.top-bar')
    tb_right = tb.find('.top-bar-right')
    page_links = tb_right.find('.dropdown')
    single_links = page_links.all('.right')
    code = single_links[1]
    c_a = code.find('a')
    c_ah = c_a[:href]
    click_on(c_a[:text])
    assert_equal(c_ah, current_url)
    
    # articles tab
    visit(root_url)

    tb = find('.top-bar')
    tb_right = tb.find('.top-bar-right')
    page_links = tb_right.find('.dropdown')
    single_links = page_links.all('.right')
    articles = single_links[2]
    a_a = articles.find('a')
    a_ah = a_a[:href]
    click_on(a_a[:text])
    assert_equal(a_ah, current_url)

    # single_links.each { |link|
    #   visit(root_url)
    #   a = link.find('a')
    #   # title = ''
    #   # href = ''
    #   # case link_num
    #   # when 1
    #   #   title = 'Vulnerabilities'
    #   #   click_on(a[:text])
    #   #   assert_equal(a[:href], current_url)
    #   # when 2
    #   #   title = 'Code'
    #   #   href = 'filepaths'
    #   # when 3
    #   #   title = 'Articles'
    #   #   href = 'articles'
    #   # end
    #   # link_num += 1
    #   click_on(a[:text])
    #   assert_equal(a[:href], current_url)
    # }
    # submenu_links = page_links.all('.has-submenu')
    # submenu_links.each { |link|
    #   a = link.find('a')
    #   main_title = ''
    #   case link_num
    #   when 4
    #     main_title = 'Tags'
    #   when 5
    #     main_title = 'More'
    #   end
    #   assert_equal(main_title, a[:text])
    #   submenu = link.find('.submenu', visible: false)     # the submenu isn't visible until hover, so the second argument is needed
    #   submenu_items = submenu.all('.is-submenu-item', visible: false)
    #   submenu_num = 1
    #   submenu_items.each { |item|
    #     submenu_item = item.find('a', visible: false)
    #     submenu_title = ''
    #     submenu_href = ''
    #     case link_num
    #     when 4
    #       case submenu_num
    #       when 1
    #         submenu_title = 'All'
    #         submenu_href = 'tags'
    #       when 2
    #         submenu_title = 'Projects'
    #         submenu_href = 'tags?search=Project:'
    #       when 3
    #         submenu_title = 'CWEs'
    #         submenu_href = 'tags?search=CWE'
    #       when 4
    #         submenu_title = 'Languages'
    #         submenu_href = 'tags?search=Language'
    #       when 5
    #         submenu_title = 'Lessons'
    #         submenu_href = 'tags?search=Lesson'
    #       when 6
    #         submenu_title = 'Severities'
    #         submenu_href = 'tags?search=Severity:'
    #       when 7
    #         submenu_title = 'Subsystems'
    #         submenu_href = 'tags?search=Subsystem'
    #       end
    #     when 5
    #       case submenu_num
    #       when 1
    #         submenu_title = 'Case Studies'
    #         submenu_href = 'projects'
    #       when 2
    #         submenu_title = 'How to Curate'
    #         submenu_href = 'curate'
    #       when 3
    #         submenu_title = 'By the Numbers'
    #         submenu_href = 'status'
    #       when 4
    #         submenu_title = 'About Us'
    #         submenu_href = 'about'
    #       end
    #     end
    #     assert_equal(submenu_title, submenu_item[:text])
    #     assert_equal(submenu_href, submenu_item[:href].split('/')[3])
    #     submenu_num += 1
    #   }
    #   link_num += 1
    # }
  end

  # ensures the proper welcome grid title and subtitle
  test 'title and subtitle' do
    visit(root_url)

    gc = find('.grid-container')
    title_sub = gc.all('.welcome')
    title_sub_num = 1
    title_sub.each { |section|
      cell = section.find('.cell')
      case title_sub_num
      when 1
        cell.assert_selector('h1', text: 'The Vulnerability History Project')
      when 2
        subtitle = cell.all('p')
        assert_equal('A museum of mistakes', subtitle[0].text)
        assert_equal('to help us engineer secure software.', subtitle[1].text)
      end
      title_sub_num += 1
    }
  end

  # hard to test individual articles, no?
end
