require "application_system_test_case"

# each of these will test looks and functionality
class HomeTest < ApplicationSystemTestCase

  setup do
    @start = root_path    # unfortunately I can't visit the url till I'm inside the test 
  end

  # # home tab
  # test 'navbar home' do
  #   visit @start
  #   tb = find('.top-bar')
  #   tb_left = tb.find('.top-bar-left')
  #   home_a = tb_left.find('a')
  #   home_a_href = home_a[:href]
  #   home_a.click
  #   assert_equal home_a_href, current_url
  # end

  # # vulnerabilities tab
  # test 'navbar vulnerabilities' do
  #   visit @start
  #   tb = find('.top-bar')
  #   tb_right = tb.find('.top-bar-right')
  #   page_links = tb_right.find('.dropdown')
  #   single_links = page_links.all('.right')
  #   vulnerabilities = single_links[0]
  #   vulnerabilities_a = vulnerabilities.find('a')
  #   vulnerabilities_a_href = vulnerabilities_a[:href]
  #   vulnerabilities_a.click
  #   assert_equal vulnerabilities_a_href, current_url 
  # end

  # # code tab
  # test 'navbar code' do
  #   visit @start
  #   tb = find('.top-bar')
  #   tb_right = tb.find('.top-bar-right')
  #   page_links = tb_right.find('.dropdown')
  #   single_links = page_links.all('.right')
  #   code = single_links[1]
  #   code_a = code.find('a')
  #   code_a_href = code_a[:href]
  #   code_a.click
  #   assert_equal code_a_href, current_url 
  # end

  # # articles tab
  # test 'navbar articles' do
  #   visit @start
  #   tb = find('.top-bar')
  #   tb_right = tb.find('.top-bar-right')
  #   page_links = tb_right.find('.dropdown')
  #   single_links = page_links.all('.right')
  #   articles = single_links[2]
  #   articles_a = articles.find('a')
  #   articles_a_href = articles_a[:href]
  #   articles_a.click
  #   assert_equal articles_a_href, current_url 
  # end

  # # tags/all
  # test 'navbar tags/all' do
  #   visit @start
  #   tb = find('.top-bar')
  #   tb_right = tb.find('.top-bar-right')
  #   page_links = tb_right.find('.dropdown')
  #   submenu_links = page_links.all('.has-submenu')
  #   tags = submenu_links[0]
  #   tags_ul = tags.find('ul', visible: false)
  #   tags_ul_li = tags.all('li', visible: false)
  #   all = tags_ul_li[0]
  #   all_a = all.find('a', visible: false)
  #   all_a_href = all_a[:href]
  #   visit all_a_href        # since the submenu tabs aren't easily visible, the test must visit the address. may try to automate hovering in the future
  #   assert_equal all_a_href, current_url 
  # end

  # # tags/projects
  # test 'navbar tags/projects' do
  #   visit @start
  #   tb = find('.top-bar')
  #   tb_right = tb.find('.top-bar-right')
  #   page_links = tb_right.find('.dropdown')
  #   submenu_links = page_links.all('.has-submenu')
  #   tags = submenu_links[0]
  #   tags_ul = tags.find('ul', visible: false)
  #   tags_ul_li = tags.all('li', visible: false)
  #   projects = tags_ul_li[1]
  #   projects_a = projects.find('a', visible: false)
  #   projects_a_href = projects_a[:href]
  #   visit projects_a_href 
  #   assert_equal projects_a_href, current_url
  # end

  # # tags/cwes
  # test 'navbar tags/cwes' do
  #   visit @start
  #   tb = find('.top-bar')
  #   tb_right = tb.find('.top-bar-right')
  #   page_links = tb_right.find('.dropdown')
  #   submenu_links = page_links.all('.has-submenu')
  #   tags = submenu_links[0]
  #   tags_ul = tags.find('ul', visible: false)
  #   tags_ul_li = tags.all('li', visible: false)
  #   cwes = tags_ul_li[2]
  #   cwes_a = cwes.find('a', visible: false)
  #   cwes_a_href = cwes_a[:href]
  #   visit cwes_a_href 
  #   assert_equal cwes_a_href, current_url
  # end

  # # tags/languages
  # test 'navbar tags/languages' do
  #   visit @start
  #   tb = find('.top-bar')
  #   tb_right = tb.find('.top-bar-right')
  #   page_links = tb_right.find('.dropdown')
  #   submenu_links = page_links.all('.has-submenu')
  #   tags = submenu_links[0]
  #   tags_ul = tags.find('ul', visible: false)
  #   tags_ul_li = tags.all('li', visible: false)
  #   languages = tags_ul_li[3]
  #   languages_a = languages.find('a', visible: false)
  #   languages_a_href = languages_a[:href]
  #   visit languages_a_href 
  #   assert_equal languages_a_href, current_url 
  # end

  # # tags/lessons
  # test 'navbar tags/lessons' do
  #   visit @start
  #   tb = find('.top-bar')
  #   tb_right = tb.find('.top-bar-right')
  #   page_links = tb_right.find('.dropdown')
  #   submenu_links = page_links.all('.has-submenu')
  #   tags = submenu_links[0]
  #   tags_ul = tags.find('ul', visible: false)
  #   tags_ul_li = tags.all('li', visible: false)
  #   lessons = tags_ul_li[4]
  #   lessons_a = lessons.find('a', visible: false)
  #   lessons_a_href = lessons_a[:href]
  #   visit lessons_a_href 
  #   assert_equal lessons_a_href, current_url 
  # end

  # # tags/severities
  # test 'tags/severities' do
  #   visit @start
  #   tb = find('.top-bar')
  #   tb_right = tb.find('.top-bar-right')
  #   page_links = tb_right.find('.dropdown')
  #   submenu_links = page_links.all('.has-submenu')
  #   tags = submenu_links[0]
  #   tags_ul = tags.find('ul', visible: false)
  #   tags_ul_li = tags.all('li', visible: false)
  #   severities = tags_ul_li[5]
  #   severities_a = severities.find('a', visible: false)
  #   severities_a_href = severities_a[:href]
  #   visit severities_a_href 
  #   assert_equal severities_a_href, current_url 
  # end

  # # tags/subsystems
  # test 'tags/subsystems' do
  #   visit @start
  #   tb = find('.top-bar')
  #   tb_right = tb.find('.top-bar-right')
  #   page_links = tb_right.find('.dropdown')
  #   submenu_links = page_links.all('.has-submenu')
  #   tags = submenu_links[0]
  #   tags_ul = tags.find('ul', visible: false)
  #   tags_ul_li = tags.all('li', visible: false)
  #   subsystems = tags_ul_li[6]
  #   subsystems_a = subsystems.find('a', visible: false)
  #   subsystems_a_href = subsystems_a[:href]
  #   visit subsystems_a_href 
  #   assert_equal subsystems_a_href, current_url 
  # end

  # # more/case studies
  # test 'more/case studies' do
  #   visit @start
  #   tb = find('.top-bar')
  #   tb_right = tb.find('.top-bar-right')
  #   page_links = tb_right.find('.dropdown')
  #   submenu_links = page_links.all('.has-submenu')
  #   tags = submenu_links[1]
  #   tags_ul = tags.find('ul', visible: false)
  #   tags_ul_li = tags.all('li', visible: false)
  #   case_studies = tags_ul_li[0]
  #   case_studies_a = case_studies.find('a', visible: false)
  #   case_studies_a_href = case_studies_a[:href]
  #   visit case_studies_a_href 
  #   assert_equal case_studies_a_href, current_url 
  # end

  # # more/how to curate
  # test 'more/how to curate' do
  #   visit @start
  #   tb = find('.top-bar')
  #   tb_right = tb.find('.top-bar-right')
  #   page_links = tb_right.find('.dropdown')
  #   submenu_links = page_links.all('.has-submenu')
  #   tags = submenu_links[1]
  #   tags_ul = tags.find('ul', visible: false)
  #   tags_ul_li = tags.all('li', visible: false)
  #   how_to_curate = tags_ul_li[1]
  #   how_to_curate_a = how_to_curate.find('a', visible: false)
  #   how_to_curate_a_href = how_to_curate_a[:href]
  #   visit how_to_curate_a_href
  #   assert_equal how_to_curate_a_href, current_url 
  # end

  # # more/by the numbers
  # test 'more/by the numbers' do
  #   visit @start
  #   tb = find('.top-bar')
  #   tb_right = tb.find('.top-bar-right')
  #   page_links = tb_right.find('.dropdown')
  #   submenu_links = page_links.all('.has-submenu')
  #   tags = submenu_links[1]
  #   tags_ul = tags.find('ul', visible: false)
  #   tags_ul_li = tags.all('li', visible: false)
  #   by_the_numbers = tags_ul_li[2]
  #   by_the_numbers_a = by_the_numbers.find('a', visible: false)
  #   by_the_numbers_a_href = by_the_numbers_a[:href]
  #   visit by_the_numbers_a_href 
  #   assert_equal by_the_numbers_a_href, current_url 
  # end

  # # more/about us
  # test 'more/about us' do
  #   visit @start
  #   tb = find('.top-bar')
  #   tb_right = tb.find('.top-bar-right')
  #   page_links = tb_right.find('.dropdown')
  #   submenu_links = page_links.all('.has-submenu')
  #   tags = submenu_links[1]
  #   tags_ul = tags.find('ul', visible: false)
  #   tags_ul_li = tags.all('li', visible: false)
  #   about_us = tags_ul_li[3]
  #   about_us_a = about_us.find('a', visible: false)
  #   about_us_a_href = about_us_a[:href]
  #   visit about_us_a_href 
  #   assert_equal about_us_a_href, current_url 
  # end

  # # ensures the proper welcome grid title and subtitle
  # test 'title and subtitle' do
  #   visit @start
  #   gc = find('.grid-container')
  #   title_sub = gc.all('.welcome')
  #   title_sub_num = 1
  #   title_sub.each { |section|
  #     cell = section.find('.cell')
  #     case title_sub_num
  #     when 1
  #       cell.assert_selector('h1', text: 'The Vulnerability History Project')
  #     when 2
  #       subtitle = cell.all('p')
  #       assert_equal('A museum of mistakes', subtitle[0].text)
  #       assert_equal('to help us engineer secure software.', subtitle[1].text)
  #     end
  #     title_sub_num += 1
  #   }
  # end  

  # test 'article 1 can be accessed' do
  #   visit @start
  #   gc = find '.grid-container'
  #   articles = gc.find(id: 'article-listing')

  #   # verifies image
  #   article = articles.all('.vhp-articles')[0]
  #   wrapper = article.find('.grid-x')
  #   article_image = wrapper.find('.blurb-art')
  #   assert_equal 'vhp-art-beginning', article_image.find('div')[:class]

  #   # verifies title
  #   header_and_text = wrapper.find('.blurb-text')
  #   article_title = header_and_text.find('h3')
  #   assert_equal 'Test Article', article_title.text
    
  #   # verifies blurb
  #   article_blurb = header_and_text.find('p')
  #   assert_equal 'Articles are difficult to write.', 
  #                 article_blurb.text.split(". ")[0...-1].join(". ") + "."       # ... is the exclusive index

  #   # verifies slug
  #   full_article_a = header_and_text.find('a')
  #   full_article_a_href = full_article_a[:href]
  #   assert_equal 'test-article-1', full_article_a_href.split("/")[-1]

  #   # verifies follows correct url
  #   full_article_a.click
  #   assert_equal full_article_a_href, current_url

  #   # verifies consistent article title
  #   gc = find '.grid-container'
  #   grid_x_title = gc.all('.grid-x')[0]
  #   cell_title = grid_x_title.find('.cell')
  #   title = cell_title.find('.centered-title')
  #   assert_equal 'Test Article', title.text

  #   # verifies author
  #   grid_x_author = gc.all('.grid-x')[1]
  #   cell_author = grid_x_author.find('.cell')
  #   byline = cell_author.find('.title-byline')
  #   assert_equal 'Some Author', byline.text

  #   # verifies consistent image
  #   grid_x_image = gc.all('.grid-x')[2]
  #   cell_image = grid_x_image.find('.cell')
  #   image = cell_image.find('div')
  #   assert_equal 'vhp-art-beginning', image[:class]

  #   # verifies correct fulltext
  #   grid_x_fulltext = gc.all('.grid-x')[3]
  #   cell_fulltext = grid_x_fulltext.find('.cell')
  #   assert_equal(
  #     "Articles are difficult to write. How do I know that? " +
  #     "Well, I'm having difficulty trying to come up with " +
  #     "stuff for this.",
  #     cell_fulltext.text)

  #   # return home
  #   click_link 'The Vulnerability History Project'
  # end

  # test 'article 2 can be accessed' do
  #   visit @start
  #   gc = find '.grid-container'
  #   articles = gc.find(id: 'article-listing')

  #   # verifies image
  #   article = articles.all('.vhp-articles')[1]
  #   blurb = article.all('.blurb')[0]
  #   wrapper = blurb.find('.grid-y')
  #   article_image = wrapper.find('.blurb-art')
  #   assert_equal 'vhp-art-broken', article_image.find('div')[:class]

  #   # verifies title
  #   header_and_text = wrapper.find('.blurb-text')
  #   article_title = header_and_text.find('h3')
  #   assert_equal 'Why Fixtures are Important', article_title.text
    
  #   # verifies blurb
  #   article_blurb = header_and_text.find('p')
  #   assert_equal 'More fixtures are helpful in the long run.', 
  #                 article_blurb.text.split(". ")[0...-1].join(". ") + "."       # ... is the exclusive index

  #   # verifies slug
  #   full_article_a = header_and_text.find('a')
  #   full_article_a_href = full_article_a[:href]
  #   assert_equal 'test-article-2', full_article_a_href.split("/")[-1]

  #   # verifies follows correct url
  #   full_article_a.click
  #   assert_equal full_article_a_href, current_url

  #   # verifies consistent article title
  #   gc = find '.grid-container'
  #   grid_x_title = gc.all('.grid-x')[0]
  #   cell_title = grid_x_title.find('.cell')
  #   title = cell_title.find('.centered-title')
  #   assert_equal 'Why Fixtures are Important', title.text

  #   # verifies author
  #   grid_x_author = gc.all('.grid-x')[1]
  #   cell_author = grid_x_author.find('.cell')
  #   byline = cell_author.find('.title-byline')
  #   assert_equal 'Bryce Murphy', byline.text

  #   # verifies consistent image
  #   grid_x_image = gc.all('.grid-x')[2]
  #   cell_image = grid_x_image.find('.cell')
  #   image = cell_image.find('div')
  #   assert_equal 'vhp-art-broken', image[:class]

  #   # verifies correct fulltext
  #   grid_x_fulltext = gc.all('.grid-x')[3]
  #   cell_fulltext = grid_x_fulltext.find('.cell')
  #   assert_equal(
  #     "Fixtures are ways in which rails allows for sample data to be tested. " +
  #     "Although there likely won't be as many fixtures as what's actually in a database, " +
  #     "it's probably good practice to keep a few of these around so as to not make " +
  #     "test pages bland, firstly, and secondly to ensure proper behavior on more than " +
  #     "just one article, for instance.",
  #     cell_fulltext.text)

  #   # return home
  #   click_link 'The Vulnerability History Project'
  # end

  # test 'article 3 can be accessed' do
  #   visit @start
  #   gc = find '.grid-container'
  #   articles = gc.find(id: 'article-listing')

  #   # verifies image
  #   article = articles.all('.vhp-articles')[1]
  #   blurb = article.all('.blurb')[1]
  #   wrapper = blurb.find('.grid-y')
  #   article_image = wrapper.find('.blurb-art')
  #   assert_equal 'vhp-art-papers', article_image.find('div')[:class]

  #   # verifies title
  #   header_and_text = wrapper.find('.blurb-text')
  #   article_title = header_and_text.find('h3')
  #   assert_equal 'Generic Third Test Article', article_title.text
    
  #   # verifies blurb
  #   article_blurb = header_and_text.all('p')
  #   assert_equal("This is another fixture to see if it shows up on the home page.", article_blurb[0].text)

  #   assert_equal("But this one tests how multi-line behavior is.", article_blurb[1].text)

  #   # verifies slug
  #   full_article_a = header_and_text.find('a')
  #   full_article_a_href = full_article_a[:href]
  #   assert_equal 'test-article-3', full_article_a_href.split("/")[-1]

  #   # verifies follows correct url
  #   full_article_a.click
  #   assert_equal full_article_a_href, current_url

  #   # verifies consistent article title
  #   gc = find '.grid-container'
  #   grid_x_title = gc.all('.grid-x')[0]
  #   cell_title = grid_x_title.find('.cell')
  #   title = cell_title.find('.centered-title')
  #   assert_equal 'Generic Third Test Article', title.text

  #   # verifies author
  #   grid_x_author = gc.all('.grid-x')[1]
  #   cell_author = grid_x_author.find('.cell')
  #   byline = cell_author.find('.title-byline')
  #   assert_equal 'Bryce Murphy', byline.text

  #   # verifies consistent image
  #   grid_x_image = gc.all('.grid-x')[2]
  #   cell_image = grid_x_image.find('.cell')
  #   image = cell_image.find('div')
  #   assert_equal 'vhp-art-papers', image[:class]

  #   # verifies correct fulltext
  #   grid_x_fulltext = gc.all('.grid-x')[3]
  #   cell_fulltext = grid_x_fulltext.find('.cell')
  #   assert_equal(
  #     "I agree with Marianna. Articles are hard to write, especially when they " + 
  #     "are bogus test articles that don't mean anything, and aren't about anything.",
  #     cell_fulltext.text
  #   )

  #   # return home
  #   click_link 'The Vulnerability History Project'
  # end

  # test 'article 4 can be accessed' do
  #   visit @start
  #   gc = find '.grid-container'
  #   articles = gc.find(id: 'article-listing')

  #   # verifies image
  #   article = articles.all('.vhp-articles')[1]
  #   blurb = article.all('.blurb')[2]
  #   wrapper = blurb.find('.grid-y')
  #   article_image = wrapper.find('.blurb-art')
  #   assert_equal 'vhp-art-rit', article_image.find('div')[:class]

  #   # verifies title
  #   header_and_text = wrapper.find('.blurb-text')
  #   article_title = header_and_text.find('h3')
  #   assert_equal 'Four and Some More', article_title.text
    
  #   # verifies blurb
  #   article_blurb = header_and_text.find('p')
  #   assert_equal 'Especially when the article count gets longer.', 
  #                 article_blurb.text.split(". ")[0...-1].join(". ") + "."       # ... is the exclusive index

  #   # verifies slug
  #   full_article_a = header_and_text.find('a')
  #   full_article_a_href = full_article_a[:href]
  #   assert_equal 'test-article-4', full_article_a_href.split("/")[-1]

  #   # verifies follows correct url
  #   full_article_a.click
  #   assert_equal full_article_a_href, current_url

  #   # verifies consistent article title
  #   gc = find '.grid-container'
  #   grid_x_title = gc.all('.grid-x')[0]
  #   cell_title = grid_x_title.find('.cell')
  #   title = cell_title.find('.centered-title')
  #   assert_equal 'Four and Some More', title.text

  #   # verifies author
  #   grid_x_author = gc.all('.grid-x')[1]
  #   cell_author = grid_x_author.find('.cell')
  #   byline = cell_author.find('.title-byline')
  #   assert_equal 'Bryce Murphy', byline.text

  #   # verifies consistent image
  #   grid_x_image = gc.all('.grid-x')[2]
  #   cell_image = grid_x_image.find('.cell')
  #   image = cell_image.find('div')
  #   assert_equal 'vhp-art-rit', image[:class]

  #   # verifies correct fulltext
  #   grid_x_fulltext = gc.all('.grid-x')[3]
  #   cell_fulltext = grid_x_fulltext.find('.cell')
  #   assert_equal(
  #     "Studies show, the more test articles you write, the harder it becomes to find " + 
  #     "new things to say, especially when nobody but the testers will see it.",
  #     cell_fulltext.text
  #   )

  #   # return home
  #   click_link 'The Vulnerability History Project'
  # end

  # test 'article 5 can be accessed' do
  #   visit @start
  #   gc = find '.grid-container'
  #   articles = gc.find(id: 'article-listing')

  #   # verifies image
  #   article = articles.all('.vhp-articles')[1]
  #   blurb = article.all('.blurb')[3]
  #   wrapper = blurb.find('.grid-y')
  #   article_image = wrapper.find('.blurb-art')
  #   assert_equal 'vhp-art-silent', article_image.find('div')[:class]

  #   # verifies title
  #   header_and_text = wrapper.find('.blurb-text')
  #   article_title = header_and_text.find('h3')
  #   assert_equal 'Five the Tests are Still Alive', article_title.text
    
  #   # verifies blurb
  #   article_blurb = header_and_text.find('p')
  #   assert_equal("The last one I make, system tests default to using Rake.", 
  #     article_blurb.text.split(". ")[0...-1].join(". ") + ".")       # ... is the exclusive index

  #   # verifies slug
  #   full_article_a = header_and_text.find('a')
  #   full_article_a_href = full_article_a[:href]
  #   assert_equal 'test-article-5', full_article_a_href.split("/")[-1]

  #   # verifies follows correct url
  #   full_article_a.click
  #   assert_equal full_article_a_href, current_url

  #   # verifies consistent article title
  #   gc = find '.grid-container'
  #   grid_x_title = gc.all('.grid-x')[0]
  #   cell_title = grid_x_title.find('.cell')
  #   title = cell_title.find('.centered-title')
  #   assert_equal 'Five the Tests are Still Alive', title.text

  #   # verifies author
  #   grid_x_author = gc.all('.grid-x')[1]
  #   cell_author = grid_x_author.find('.cell')
  #   byline = cell_author.find('.title-byline')
  #   assert_equal 'Bryce Murphy', byline.text

  #   # verifies consistent image
  #   grid_x_image = gc.all('.grid-x')[2]
  #   cell_image = grid_x_image.find('.cell')
  #   image = cell_image.find('div')
  #   assert_equal 'vhp-art-silent', image[:class]

  #   # verifies correct fulltext
  #   grid_x_fulltext = gc.all('.grid-x')[3]
  #   cell_fulltext = grid_x_fulltext.find('.cell')
  #   assert_equal(
  #     "It's my mission to rhyme on this last of tests, I know it's time to " + 
  #     "try my best. I'll only make three tries, and then I'll cut my ties. This " +
  #     "is my attempt to make testing articles fun, and not make me want to run.",
  #     cell_fulltext.text
  #   )

  #   # return home
  #   click_link 'The Vulnerability History Project'
  # end

  # test 'article 6 can be accessed' do
  #   visit @start
  #   gc = find '.grid-container'
  #   articles = gc.find(id: 'article-listing')

  #   # verifies image
  #   article = articles.all('.vhp-articles')[2]
  #   wrapper = article.find('.grid-x')
  #   article_image = wrapper.find('.blurb-art')
  #   assert_equal 'vhp-art-stones', article_image.find('div')[:class]

  #   # verifies title
  #   header_and_text = wrapper.find('.blurb-text')
  #   article_title = header_and_text.find('h3')
  #   assert_equal 'Something Else', article_title.text
    
  #   # verifies blurb
  #   article_blurb = header_and_text.find('p')
  #   assert_equal("Sometimes you name something rehash even if it isn't a rehash of anything.", 
  #     article_blurb.text.split(". ")[0...-1].join(". ") + ".")       # ... is the exclusive index

  #   # verifies slug
  #   full_article_a = header_and_text.find('a')
  #   full_article_a_href = full_article_a[:href]
  #   assert_equal 'test-article-6', full_article_a_href.split("/")[-1]

  #   # verifies follows correct url
  #   full_article_a.click
  #   assert_equal full_article_a_href, current_url

  #   # verifies consistent article title
  #   gc = find '.grid-container'
  #   grid_x_title = gc.all('.grid-x')[0]
  #   cell_title = grid_x_title.find('.cell')
  #   title = cell_title.find('.centered-title')
  #   assert_equal 'Something Else', title.text

  #   # verifies author
  #   grid_x_author = gc.all('.grid-x')[1]
  #   cell_author = grid_x_author.find('.cell')
  #   byline = cell_author.find('.title-byline')
  #   assert_equal 'Bryce Murphy', byline.text

  #   # verifies consistent image
  #   grid_x_image = gc.all('.grid-x')[2]
  #   cell_image = grid_x_image.find('.cell')
  #   image = cell_image.find('div')
  #   assert_equal 'vhp-art-stones', image[:class]

  #   # verifies correct fulltext
  #   grid_x_fulltext = gc.all('.grid-x')[3]
  #   cell_fulltext = grid_x_fulltext.find('.cell')
  #   assert_equal(
  #     "Stones are a nice picture, aren't they? I hope you agree. Hopefully this " +
  #     "fixture goes where it should.",
  #     cell_fulltext.text
  #   )

  #   # return home
  #   click_link 'The Vulnerability History Project'
  # end
end