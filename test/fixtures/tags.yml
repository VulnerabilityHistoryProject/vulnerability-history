bounty:
  name: Bounty Awarded
  shortname: bounty
  description: A bounty was awarded to this vulnerability.
  family: bounty
defense_in_depth:
  name: A Lesson in Defense in Depth
  shortname: defense in depth
  description: This vulnerability is an example of Defense in Depth.
yagni:
  name: You Ain't Gonna Need It
  shortname: yagni
  description: This tag is applied when a lesson can be learned about the principle of "You Ain't Gonna Need It".
  icon: 'balance-scale'
  family: 'yagni'
escaped_test:
  name: Escaped Unit Test
  shortname: escaped
  description: This tag is applied to all vulnerabilities that had existing unit tests covering the vulnerable code.
lacked_test:
  name: Escaped Unit Test
  shortname: lacked
  description: This tag is applied to all vulnerabilities that lacked existing unit tests covering the vulnerable code.
escaped_test1:
  name: Escaped Unit Test
  shortname: untested
  description: This tag is applied to all vulnerabilities where the fix for the vulnerability involves adding or improving an automated test to ensure it is not repeated.
CWE_120:
  name: CWE-120 A CWE Example ('Example')
  shortname: cwe-120
  description: This tag is applied to all vulnerabilities with cwe 120
DiscoveredMethod:
  name: 'Discovered Automatically'
  shortname: 'discover-automated'
  color: '#9999ff'
  icon: 'robot'
  description: 'These are vulnerabilities that were discovered using automation. This could be an automated test like a unit test or an automated test case generator such as a fuzz tester. This tag is based on the question to our curators, specifically `How was this vulnerability discovered?`, with the option of selecting "automated".Automatically discovering vulnerabilities typically falls into two categories: [fuzz testing](/articles/what-the-fuzz) and static analysis.'
  family: 'discovered_method'
CooksMethod:
  name: 'Lesson: Too Many Cooks'
  shortname: 'cooks'
  color: '#9999ff'
  icon: 'people'
  description: 'Were there more than 10 different developers who worked on the vulnerable code in its lifetime? Familiarity is difficult to gain with code. Even for the best developers, contributing to a piece of source code for the first time means that they must understand the design decisions from previous developers, any issues the code has had historically, and the coding style. Thus, the first commit any developer makes is risky. Furthermore, research has shown a strong correlation between code that had many developers and code with vulnerabilities. Note that we used ten as an arbitrary threshold, but it is really more of a spectrum.'
  family: ''
OwnersMethod:
  name: 'Lesson: Changing Owners'
  shortname: 'owners'
  color: '#009696'
  icon: 'identity'
  description: 'Vulnerabilities with this tag have had at least 10 changes in ownership over the lifetime of the vulnerable code. A code owner is a person who is in an OWNERS or CODEOWNERS file that impacts the code. These are people who are tasked with being gatekeepers to the code, reviewing changes. Frequent changes in ownership can result in loss of institutional knowledge. Thus, we tag vulnerabilities where the code had a lot of ownership changes.'
  family: ''
RefactorsMethod:
  name: 'Lesson: Code Refactors'
  shortname: 'refactors'
  color: '#9999ff'
  icon: 'branch'
  description: 'The vulnerable code had a lot of refactors in its lifetime. A vulnerability with this tag has had at least 10 separate weeks where at least one commit mentioned the word "refactoring" in the commit message. Refactoring is generally considered to be a good practice to be doing regularly. It indicates regular maintenance and attention. While refactoring does not yield new features or fix defects, it greatly reduces the cost of them.'
  family: ''
RevertsMethod:
  name: 'Lesson: Reverting Codebase'
  shortname: 'reverts'
  color: '#9999ff'
  icon: 'rewind'
  description: 'The vulnerable code had a lot of reverts in its lifetime A vulnerability with this tag has had at least 10 separate weeks where at least one commit mentioned the word "revert" in the commit message. Reverting code is a feature of Git that allows you to completly reverse a prior commit. We believe that code with a history of frequent reverts might be indicative that the code owners are too eage to merge in changes without careful review. This hypothesis is untested, but we are curious.'
  family: ''
# DiscoveredBy:
#   name: 'Discovered Internally'
#   shortname: 'internal'
#   color: '#9999ff'
#   icon: 'internal'
#   description: ''
#   family: 'discovered_by'
# DiscussionSecurity:
#   name: 'Discussion: Security'
#   shortname: 'discussion-security'
#   color: '#00008b'
#   icon: 'discussion-sec'
#   family: 'discussed_security'
# DiscussionAny:
#   name: 'Discussion: Any'
#   shortname: 'discussion-any'
#   color: '#00468b'
#   icon: 'discussion-any'
#   family: 'discussed_any'
# ErrorOfOmission:
#   name: 'Lesson: Error of Omission'
#   shortname: 'omission'
#   color: '#009696'
#   icon: 'ghost'
#   family: 'error_of_omission'
# I18n:
#   name: 'i18n'
#   shortname: 'i18n'
#   color: '#dbe045'
#   icon: 'i18n'
#   description: 'Was the feature impacted by this vulnerability about internationalization (i18n)?'
#   family: 'i18n'
# IPC:
#   name: 'Inter-Process Communication'
#   shortname: 'ipc'
#   color: '#2e5ef3'
#   icon: 'ipc'
#   family: 'ipc'
# OrderOfOperations:
#   name: 'Order of Operations'
#   shortname: 'order-of-ops'
#   color: '#2e5ef3'
#   icon: 'order'
#   family: 'order_of_operations'
# Origin:
#   name: 'Origin Vulnerability'
#   shortname: 'Origin'
#   color: '#d845e0'
#   icon: 'origin'
#   family: 'origin'
# Project:
#   name: 'Project: X'
#   shortname: 'project-xx'
#   family: 'project'
# Sandbox:
#   name: 'Sandbox'
#   shortname: 'sandbox'
#   color: '#FFD580'
#   icon: 'sandbox'
#   family: 'sandbox'
# Specification:
#   name: 'Specification'
#   shortname: 'specification'
#   color: '#F0E68C'
#   icon: 'specification'
#   family: 'specification'
# Vouch:
#   name: 'Vouch'
#   shortname: 'vouch'
#   color: '#df73ff'
#   icon: 'vouch'
#   family: 'vouch'
