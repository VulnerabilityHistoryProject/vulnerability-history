require 'test_helper'

class TagTest < ActiveSupport::TestCase
  test 'overlaps' do

    #call overlaps method with set of shortnames that returns a set of tags
    overlapsResults = Tag.overlaps(['cooks', 'owners', 'refactors', 'reverts'])

    overlapsCVEResults = overlapsResults.map { |tag| tag['cve']}

    expected_results = "[{\"cve\":\"CVE-2011-5904\",\"nickname\":\"Another Test CVE\",\"upvotes\":1,\"project_id\":298486374,\"description\":\"This is just another description. Maybe you'll see all of it, maybe you'll see some of it. I don't know. But, hopefully it'll let you see whatever it is you need that requires fixing. That's why we do it.\",\"subdomain\":\"chromium\",\"project_name\":\"Chromium\",\"tag_json\":\"[{\\\"id\\\" : 740530971, \\\"importance\\\" : 3}, {\\\"id\\\" : 1059927844, \\\"importance\\\" : 3}, {\\\"id\\\" : 888318046, \\\"importance\\\" : 3}, {\\\"id\\\" : 182438886, \\\"importance\\\" : 3}, {\\\"id\\\" : 331230338, \\\"importance\\\" : 3}]\"},{\"cve\":\"CVE-2011-3093\",\"nickname\":\"Bad VCC/Fix\",\"upvotes\":2,\"project_id\":980190962,\"description\":\"This is some test data for the description. If the short_desc argument is working correctly, you shouldn't see this part of the description. Here's hoping!\",\"subdomain\":\"httpd\",\"project_name\":\"Apache\",\"tag_json\":\"[{\\\"id\\\" : 331230338, \\\"importance\\\" : 2}, {\\\"id\\\" : 1059927844, \\\"importance\\\" : 2}, {\\\"id\\\" : 740530971, \\\"importance\\\" : 2}, {\\\"id\\\" : 182438886, \\\"importance\\\" : 2}, {\\\"id\\\" : 888318046, \\\"importance\\\" : 2}]\"},{\"cve\":\"CVE-2016-1676\",\"nickname\":\"\",\"upvotes\":3,\"project_id\":980190962,\"description\":\"Google Chrome ~before 28.0.1500.71 allows remote attackers to cause a denial of service (out-of-bounds read) via vectors related to the handling of text.\",\"subdomain\":\"httpd\",\"project_name\":\"Apache\",\"tag_json\":\"[{\\\"id\\\" : 740530971, \\\"importance\\\" : 2}, {\\\"id\\\" : 182438886, \\\"importance\\\" : 2}, {\\\"id\\\" : 888318046, \\\"importance\\\" : 2}, {\\\"id\\\" : 1059927844, \\\"importance\\\" : 2}, {\\\"id\\\" : 343518050, \\\"importance\\\" : 2}]\"},{\"cve\":\"CVE-2013-2878\",\"nickname\":\"\",\"upvotes\":4,\"project_id\":980190962,\"description\":\"Google Chrome ~before 28.0.1500.71 allows remote attackers to cause a denial of service (out-of-bounds read) via vectors related to the handling of text.\",\"subdomain\":\"httpd\",\"project_name\":\"Apache\",\"tag_json\":\"[{\\\"id\\\" : 740530971, \\\"importance\\\" : 2}, {\\\"id\\\" : 888318046, \\\"importance\\\" : 2}, {\\\"id\\\" : 343518050, \\\"importance\\\" : 2}, {\\\"id\\\" : 1059927844, \\\"importance\\\" : 2}, {\\\"id\\\" : 182438886, \\\"importance\\\" : 2}]\"}]"
    assert_equal expected_results, @tags.to_json, 'SQL statement is not correct'
  end

  test 'tag_trends' do
    #call tag_trends method with set of families that returns a set of nodes and links
    tagTrendsResults = Tag.tag_trends(['bounty', 'lifetime', 'project', 'language'])
    tagTrendsNodesResults = tagTrendsResults[:nodes].map { |node| node[:name]}
    #binding.irb
    #validate sql statement used to generate results
    expected_results = %w(
      project-xx
      bounty
      language-d
      lifetime-10
    )
    assert_equal expected_results, tagTrendsNodesResults, 'SQL statement is not correct'
  end
end
