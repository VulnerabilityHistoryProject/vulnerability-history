require 'test_helper'
require 'coderay'
require 'yaml'
require 'kramdown'
require 'rinku'
require 'sanitize'

class ApplicationHelperTest < ActionView::TestCase

  
  # test 'bold markdown' do
  #   input    = "**Bolded**"
  #   expected = "<p><strong>Bolded</strong></p>\n"
  #   assert_equal expected, markdown(input)
  # end
  #
  # test 'links are preserved' do
  #   input =    "[Click Here](https://www.google.com)"
  #   expected = "<p><a href=\"https://www.google.com\" rel=\"nofollow\">Click Here</a></p>\n"
  #   assert_equal expected, markdown(input)
  # end
  #
  # test 'blockquotes are still honored' do
  #   input =    '> Hi'
  #   expected = "<blockquote>\n  <p>Hi</p>\n</blockquote>\n"
  #   assert_equal expected, markdown(input)
  # end
  #
  # test 'html is allowed in markdown, within reason' do
  #   input =    "<b>Foo</b>"
  #   expected = "<p><b>Foo</b></p>\n"
  #   assert_equal expected, markdown(input)
  # end
  #
  # test 'remove script tag' do
  #   input =    "<script>alert(1);</script>"
  #   expected = "\n\n"
  #   assert_equal expected, markdown(input)
  # end
  #
  # test 'link to javascript still bad' do
  #   input =    "<a href=\"javascript:alert()\">HA</a>"
  #   expected = "<p><a rel=\"nofollow\">HA</a></p>\n"
  #   assert_equal expected, markdown(input)
  # end
  #
  # test 'link onclick event removed' do
  #   input =    "<a onclick=\"javascript:alert()\">HA</a>"
  #   expected = "<p><a rel=\"nofollow\">HA</a></p>\n"
  #   assert_equal expected, markdown(input)
  # end
  #
  # test 'evil markdown still blocked' do
  #   input =    "[HA](javascript:alert(1))"
  #   expected = "<p><a rel=\"nofollow\">HA</a></p>\n"
  #   assert_equal expected, markdown(input)
  # end
  #
  # test 'auto linking for single icon' do
  #   input =    "Here is a vulnerability icon: :vulnerability:"
  #   expected = "<p>Here is a vulnerability icon: <i class=\"vhp-icon-vulnerability\"></i></p>\n"
  #   assert_equal expected, markdown(input)
  # end
  #
  # test 'auto linking for multiple icons' do
  #   input =    "Here are two icons: :vulnerability: :info:"
  #   expected = "<p>Here are two icons: <i class=\"vhp-icon-vulnerability\"></i> <i class=\"vhp-icon-info\"></i></p>\n"
  #   assert_equal expected, markdown(input)
  # end
  #
  # test 'pre-existing icon tags are allowed' do
  #   input =    "<i class=\"vhp-icon-graph-pie\"></i>"
  #   expected = "<p><i class=\"vhp-icon-graph-pie\"></i></p>\n"
  #   assert_equal expected, markdown(input)
  # end
  #
  # test 'non-icon class names in <i> are blocked' do
  #   input =    "<i class=\"nefarious\"></i>"
  #   expected = "<p><i></i></p>\n"
  #   assert_equal expected, markdown(input)
  # end
  #
  # test 'multiple classes in <i> are blocked' do
  #   input =    "<i class=\"nefarious vhp-icon-vulnerability\"></i>"
  #   expected = "<p><i></i></p>\n"
  #   assert_equal expected, markdown(input)
  # end
  #
  # test 'auto linking not done on invalid cve' do
  #   input =    "CVE-2013-665"
  #   expected = "<p>CVE-2013-665</p>\n"
  #   assert_equal expected, markdown(input)
  # end
  #
  # test 'auto linking to normal cve' do
  #   input =    "CVE-2013-6657"
  #   expected = "<p><a href=\"/cves/CVE-2013-6657\" rel=\"nofollow\"><i class=\"vhp-icon-vulnerability\"></i>CVE-2013-6657</a></p>\n"
  #   assert_equal expected, markdown(input)
  # end
  #
  # test 'auto linking to long cve' do
  #   input =    "CVE-2014-105823059"
  #   expected = "<p><a href=\"/cves/CVE-2014-105823059\" rel=\"nofollow\"><i class=\"vhp-icon-vulnerability\"></i>CVE-2014-105823059</a></p>\n"
  #   assert_equal expected, markdown(input)
  # end
  #
  # test 'auto linking to multiple CVEs' do
  #   input =    "CVE-2014-1058fooCVE-2014-1058"
  #   expected = "<p><a href=\"/cves/CVE-2014-1058\" rel=\"nofollow\"><i class=\"vhp-icon-vulnerability\"></i>CVE-2014-1058</a>foo<a href=\"/cves/CVE-2014-1058\" rel=\"nofollow\"><i class=\"vhp-icon-vulnerability\"></i>CVE-2014-1058</a></p>\n"
  #   assert_equal expected, markdown(input)
  # end
  #
  # test 'auto linking to lowercase cve' do
  #   input =    "cve-2014-9482"
  #   expected = "<p><a href=\"/cves/cve-2014-9482\" rel=\"nofollow\"><i class=\"vhp-icon-vulnerability\"></i>cve-2014-9482</a></p>\n"
  #   assert_equal expected, markdown(input)
  # end
  #
  # test 'auto linking' do
  #   input =    "https://www.google.com"
  #   expected = "<p><a href=\"https://www.google.com\" rel=\"nofollow\">https://www.google.com</a></p>\n"
  #   assert_equal expected, markdown(input)
  # end
  #
  # test 'auto linking ignores existing links' do
  #   input =    "<a href=\"https://www.google.com\">https://www.google.com</a>"
  #   expected = "<p><a href=\"https://www.google.com\" rel=\"nofollow\">https://www.google.com</a></p>\n"
  #   assert_equal expected, markdown(input)
  # end
  #
  # test 'integrating links, markdown, and included html' do
  #   input =    "<i>Hello</i> *World* https://www.example.com"
  #   expected = "<p><i>Hello</i> <em>World</em> <a href=\"https://www.example.com\" rel=\"nofollow\">https://www.example.com</a></p>\n"
  #   assert_equal expected, markdown(input)
  # end
  #
  # test 'from actual data' do
  #   input = 'How should we defend against complex inputs? See [:tag: Complex Inputs ](/tags/complex-inputs).'
  #   expected = "<p>How should we defend against complex inputs? See <a href=\"/tags/complex-inputs\" rel=\"nofollow\"><i class=\"vhp-icon-tag\"></i> Complex Inputs </a>.</p>\n"
  #   assert_equal expected, markdown(input)
  # end

  test 'friendly_cwe returns regular without nickname' do
    assert_equal 'CWE-123: Foo', friendly_cwe('CWE-123: Foo')
  end

  test 'friendly_cwe returns regular with nickname' do
    assert_equal 'Bar', friendly_cwe("CWE-123: Foo('Bar') Baz")
  end

end
