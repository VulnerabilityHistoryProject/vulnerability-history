require 'test_helper'
require 'coderay'
require 'yaml'
require 'kramdown'
require 'rinku'
require 'sanitize'

class ApplicationHelperTest < ActionView::TestCase

  test 'bold markdown' do
    input    = "**Bolded**"
    expected = "<p><strong>Bolded</strong></p>\n"
    assert_equal expected, markdown(input)
  end

  test 'links are preserved' do
    input =    "[Click Here](https://www.google.com)"
    expected = "<p><a href=\"https://www.google.com\" rel=\"nofollow\">Click Here</a></p>\n"
    assert_equal expected, markdown(input)
  end

  test 'blockquotes are still honored' do
    input =    '> Hi'
    expected = "<blockquote>\n  <p>Hi</p>\n</blockquote>\n"
    assert_equal expected, markdown(input)
  end

  test 'html is allowed in markdown, within reason' do
    input =    "<b>Foo</b>"
    expected = "<p><b>Foo</b></p>\n"
    assert_equal expected, markdown(input)
  end

  test 'remove script tag' do
    input =    "<script>alert(1);</script>"
    expected = "\n\n"
    assert_equal expected, markdown(input)
  end

  test 'link to javascript still bad' do
    input =    "<a href=\"javascript:alert()\">HA</a>"
    expected = "<p><a rel=\"nofollow\">HA</a></p>\n"
    assert_equal expected, markdown(input)
  end

  test 'link onclick event removed' do
    input =    "<a onclick=\"javascript:alert()\">HA</a>"
    expected = "<p><a rel=\"nofollow\">HA</a></p>\n"
    assert_equal expected, markdown(input)
  end

  test 'evil markdown still blocked' do
    input =    "[HA](javascript:alert(1))"
    expected = "<p><a rel=\"nofollow\">HA</a></p>\n"
    assert_equal expected, markdown(input)
  end

  test 'icons are still blocked' do
    input =    "<i class=\"material-icons\">bug_report</i>"
    expected = "<p><i>bug_report</i></p>\n"
    assert_equal expected, markdown(input)
  end

  test 'auto linking still not done on invalid cve' do
    input =    "CVE-2013-665"
    expected = "<p>CVE-2013-665</p>\n"
    assert_equal expected, markdown(input)
  end

  test 'auto linking to normal cve' do
    input =    "CVE-2013-6657"
    expected = "<p><a href=\"/cves/CVE-2013-6657\" rel=\"nofollow\">CVE-2013-6657</a></p>\n"
    assert_equal expected, markdown(input)
  end

  test 'auto linking to long cve' do
    input =    "CVE-2014-105823059"
    expected = "<p><a href=\"/cves/CVE-2014-105823059\" rel=\"nofollow\">CVE-2014-105823059</a></p>\n"
    assert_equal expected, markdown(input)
  end

  test 'auto linking to lowercase cve' do
    input =    "cve-2014-9482"
    expected = "<p><a href=\"/cves/cve-2014-9482\" rel=\"nofollow\">cve-2014-9482</a></p>\n"
    assert_equal expected, markdown(input)
  end

  test 'auto linking' do
    input =    "https://www.google.com"
    expected = "<p><a href=\"https://www.google.com\" rel=\"nofollow\">https://www.google.com</a></p>\n"
    assert_equal expected, markdown(input)
  end

  test 'auto linking ignores existing links' do
    input =    "<a href=\"https://www.google.com\">https://www.google.com</a>"
    expected = "<p><a href=\"https://www.google.com\" rel=\"nofollow\">https://www.google.com</a></p>\n"
    assert_equal expected, markdown(input)
  end

  test 'integrating links, markdown, and included html' do
    input =    "<i>Hello</i> *World* https://www.example.com"
    expected = "<p><i>Hello</i> <em>World</em> <a href=\"https://www.example.com\" rel=\"nofollow\">https://www.example.com</a></p>\n"
    assert_equal expected, markdown(input)
  end

end
