<% content_for(:title) do %>
  Tag Trends
<% end %>

<%= render('shared/title') do %>
  Tag Trends
<% end %>

<%= render('shared/grid', size: 8) do %>

	<select id="tag1">
		<%= @tags.map do |tag| %>
			<option data="<%=tag.shortname%>">
				<%= tag.name %>
			</option>
		<% end %>
	</select>

	<div id="tag-trends">


	</div>

<style>
	.node rect {
		cursor: move;
		fill-opacity: .9;
		shape-rendering: crispEdges;
	}

	.node text {
		pointer-events: none;
		text-shadow: 0 1px 0 #fff;
	}

	.link {
		fill: none;
		stroke: #000;
		stroke-opacity: .2;
	}

	.link:hover {
		stroke-opacity: .5;
	}

	</style>

	<body>
	<script src="https://d3js.org/d3.v3.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/d3-sankey/0.7.1/d3-sankey.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/4.8.0/d3.js"></script>
	<script src="https://unpkg.com/d3-shape@1"></script>


	<script>
	var units = "Widgets";

	var margin = {top: 10, right: 10, bottom: 100, left: 40},
		width = 1200 - margin.left - margin.right,
		height = 740 - margin.top - margin.bottom;

	var formatNumber = d3.format(",.0f"),    // zero decimal places
		format = function(d) { return formatNumber(d) + " " + units; },
		color = d3.scale.category20();

	// append the svg canvas to the page

	var svg = d3.select("body").append("svg")
		.attr("width", width + margin.left + margin.right)
		.attr("height", height + margin.top + margin.bottom)
	.append("g")
		.attr("transform",
			  "translate(" + margin.left + "," + margin.top + ")");

	// Set the sankey diagram properties

	var sankey = d3.sankey()
		.nodeWidth(36)
		.nodePadding(10)
		.size([width, height]);
	
	var path = sankey.linkHorizontal();

	// data stuff here

	graph = {"nodes" : [], "links" : []};

	data = [
 		{source: "Vulnerabilities", target: "CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer", value: 100},
 		{source: "Vulnerabilities", target: "CWE-121: Stack-based Buffer Overflow", value: 20},
 		{source: "Vulnerabilities", target: "CWE-200: Information Exposure", value: 20},
 		{source: "CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer", target: "CVE-2004-0751", value: 100},
	];

	data.forEach(function(d) {
		graph.nodes.push({ "name": d.source });
		graph.nodes.push({ "name": d.target });
		graph.links.push({ "source": d.source,
						   "target": d.target,
						   "value": +d.value });
		});

	// return only the distinct / unique nodes

	graph.nodes = d3.keys(d3.nest()
		.key(function (d) { return d.name; })
		.map(graph.nodes));

	// loop through each link replacing the text with its index from node

	graph.links.forEach(function (d, i) {
		graph.links[i].source = graph.nodes.indexOf(graph.links[i].source);
		graph.links[i].target = graph.nodes.indexOf(graph.links[i].target);
	});

	// now loop through each nodes to make nodes an array of objects
	// rather than an array of strings

	graph.nodes.forEach(function (d, i) {
		graph.nodes[i] = { "name": d };
	});

	sankey
		.nodes(graph.nodes)
		.links(graph.links)
		.layout(32);

	// add in the links

	var link = svg.append("g").selectAll(".link")
		.data(graph.links)
	.enter().append("path")
		.attr("class", "link")
		.attr("d", path)
		.style("stroke-width", function(d) { return Math.max(1, d.dy); })
		.sort(function(a, b) { return b.dy - a.dy; });

	// add the link titles

	link.append("title")
		.text(function(d) {
			return d.source.name + " â†’ " + 
				   d.target.name + "\n" + format(d.value); });

	// add in the nodes

	var node = svg.append("g").selectAll(".node")
		.data(graph.nodes)
	.enter().append("g")
		.attr("class", "node")
		.attr("transform", function(d) { 
			return "translate(" + d.x + "," + d.y + ")"; })
		.call(d3.behavior.drag()
			.origin(function(d) { return d; })
			.on("dragstart", function() { 
				this.parentNode.appendChild(this); })
			.on("drag", dragmove));

	// add the rectangles for the nodes

	node.append("rect")
		.attr("height", function(d) { return d.dy; })
		.attr("width", sankey.nodeWidth())
		.style("fill", function(d) { 
			return d.color = color(d.name.replace(/ .*/, "")); })
		.style("stroke", function(d) { 
			return d3.rgb(d.color).darker(2); })
		.append("title")
		.text(function(d) { 
			return d.name + "\n" + format(d.value); });

	// add in the title for the nodes

	node.append("text")
		.attr("x", -6)
		.attr("y", function(d) { return d.dy / 2; })
		.attr("dy", ".35em")
		.attr("text-anchor", "end")
		.attr("transform", null)
		.text(function(d) { return d.name; })
		.filter(function(d) { return d.x < width / 2; })
		.attr("x", 6 + sankey.nodeWidth())
		.attr("text-anchor", "start");

	// the function for moving the nodes

	function dragmove(d) {
		d3.select(this).attr("transform", 
			"translate(" + d.x + "," + (d.y = Math.max(
				0, Math.min(height - d.dy, d3.event.y))) + ")");
		sankey.relayout();
		link.attr("d", path);
	}

</script>

	</body>


<% end %>