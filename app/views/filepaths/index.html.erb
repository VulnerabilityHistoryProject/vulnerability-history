<p id="notice"><%= notice %></p>

<%= render('shared/title') do %>
  Known Offenders
<% end %>

<%= render('shared/grid', size: 6) do %>
<p>
  A <b>known offender</b> is a file that has been fixed for a vulnerabilty at any point in history.
</p>
<% end %>

<style>
#offenders_visual {
  border: 1px solid #ccc;
}

#offenders_visual p{
  color: #ccc;
  font-size: 75%;
  padding-left: 1em;
  margin-bottom: 0.2em;
}

.offenders_path_header {
  text-align: right;
  font-size: 85%;
}

.offenders_path_header a{
  text-decoration: underline;
  color: blue;
}

#offenders_path {
  font-family: Consolas, 'Liberation Mono', Courier, monospace;
}

svg path {
  cursor: pointer;
}
</style>

<%= render('shared/grid', size: 10) do %>

  <div id="offenders_visual">
    <div class="offenders_path_header">
      <span id="offenders_path">&nbsp;</span>
      <span id="offenders_path_link"></span>
    </div>
    <div id="offenders_map"></div>
    <p>
      Click on the visual to zoom in. Click on the path to learn more about the file.
    </p>
  </div>

<% end %>

<script>

$.ajax({
  url: "/api/filepaths?offenders=true",
  dataType: 'json',
  success: function(apiData) {
    // Generate parents and rearrange data
    var jsonData = { '/' : ''}; // init with root directory
    var filepathIDs = {}; // save primary keys separately
    for (filepath_and_id in apiData) {
      jsonPair = JSON.parse(filepath_and_id)
      filepath = jsonPair[0];
      filepathIDs[filepath] = jsonPair[1];
      jsonData[filepath]  = apiData[filepath_and_id]
      // Generate parent directories
      while(filepath.indexOf('/') > 0) {
        filepath = filepath.substring(0, filepath.lastIndexOf('/'));
        jsonData[filepath] = jsonData[filepath] || ''; // Ruby ||=
      }
    }
    // Convert from hash to array of hashes
    arrayData = [];
    for (filepath in jsonData) {
      arrayData.push({
        'filepath' : filepath,
        'filepath_id' : filepathIDs[filepath],
        'num' : jsonData[filepath]
      });
    }
    //Sort the data
    arrayData.sort(function(a,b){
      return (a.filepath > b.filepath) ? 1 : ((b.filepath > a.filepath) ? -1 : 0);
    });

    var stratify = d3.stratify()
      .parentId(function (d) {
        if(d.filepath == '/') return null;
        if(d.filepath.indexOf('/') > 0) { // non-root file
          return d.filepath.substring(0, d.filepath.lastIndexOf('/'));
        } else { //root file
          return '/';
        }
      })
      .id(function (d) {
        return d.filepath;
      });

    root = stratify(arrayData);

    root.sum(function(d) { return d.num });
    console.log(root)

    //Init SVG
    var width = 960,
        height = 700,
        radius = Math.min(width, height) / 2;

    var svg = d3.select("#offenders_map").append("svg:svg")
      .attr("width", width)
      .attr("height", height)
    var g = svg.append('g')
        .attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')');

    // Init scales for zooming
    var x = d3.scaleLinear()
      .range([0, 2 * Math.PI]);

    var y = d3.scaleSqrt()
      .range([0, radius]);

    //Size the arcs
    var partition = d3.partition()
    // .size([2 * Math.PI, radius]);
    partition(root)
    var arc = d3.arc()
      .startAngle(function(d) { return Math.max(0, Math.min(2 * Math.PI, x(d.x0))); })
      .endAngle(function(d) { return Math.max(0, Math.min(2 * Math.PI, x(d.x1))); })
      .innerRadius(function(d) { return Math.max(0, y(d.y0)); })
      .outerRadius(function(d) { return Math.max(0, y(d.y1)); });

    // Create color scheme
    var color = d3.scaleOrdinal(d3.schemeCategory20b);

    // Put it all together
    g.selectAll('path')
      .data(root.descendants())
      .enter().append('path')
      .attr("d", arc)
      .style('stroke', '#ccc')
      .style("fill", function (d) { return color((d.children ? d : d.parent).data.name); })
      .on("click", clicked)
      .on("mouseover", mouseovered)
      ;

    // When we click on a particular path, we zoom in
    function clicked(d) {
      svg.transition()
        .duration(750)
        .tween("scale", function() {
          var xd = d3.interpolate(x.domain(), [d.x0, d.x1]),
              yd = d3.interpolate(y.domain(), [d.y0, 1]),
              yr = d3.interpolate(y.range(), [d.y0 ? 20 : 0, radius]);
          return function(t) { x.domain(xd(t)); y.domain(yd(t)).range(yr(t)); };
        })
      .selectAll("path")
        .attrTween("d", function(d) { return function() { return arc(d); }; });
    }

    function mouseovered(d){
      if(d.data.filepath_id) {
        d3.select("#offenders_path")
          .html("<a href=\"/filepaths/" +
                 d.data.filepath_id +
                "\">" +
                d.data.filepath +
                "</a>"
               );
      } else {
        d3.select("#offenders_path").html(d.data.filepath);
      }
    }
  }
});

</script>

<!-- <%= @filepaths.to_a %> -->

<!-- <%= render 'shared/loading' =%>

<table id="datatable" class="display" width="100%">
  <thead></thead>
  <tbody></tbody>
  <tfoot></tfoot>
</table>

<%= javascript_include_tag "filepaths/index" %> -->
