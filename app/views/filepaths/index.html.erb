<p id="notice"><%= notice %></p>

<%= render('shared/title') do %>
  Known Offenders
<% end %>

<%= render('shared/grid', size: 6) do %>
<p>
  A <b>known offender</b> is a file that has been fixed for a vulnerabilty at any point in history.
</p>
<p class="text-center">
  Click on a file to learn more.
</p>
<% end %>

<style>
svg {
  font: 10px sans-serif;
  border: 1px solid #ccc;
}

svg path {
  stroke: #ccc;
}
</style>


<%= render('shared/grid', size: 10) do %>
  <div id="offenders_map"></div>
<% end %>


<script>

// function color(id) {
//   var color = d3.scaleOrdinal(d3.schemeCategory20b);
//   return '#fff';
// }

function click(d) {
  svg.transition()
      .duration(750)
      .tween("scale", function() {
        var xd = d3.interpolate(x.domain(), [d.x, d.x + d.dx]),
            yd = d3.interpolate(y.domain(), [d.y, 1]),
            yr = d3.interpolate(y.range(), [d.y ? 20 : 0, radius]);
        return function(t) { x.domain(xd(t)); y.domain(yd(t)).range(yr(t)); };
      })
    .selectAll("path")
      .attrTween("d", function(d) { return function() { return arc(d); }; });
}

$.ajax({
  url: "/api/filepaths?offenders=true",
  dataType: 'json',
  success: function(jsonData) {
    // Generate parent directories
    jsonData['/'] = ''; // root directory
    for (filepath in jsonData) {
      current = filepath;
      while(current.indexOf('/') > 0) {
        current = current.substring(0, current.lastIndexOf('/'));
        jsonData[current] = jsonData[current] || ''; // Ruby ||=
      }
    }
    // Convert from hash to array of hashes
    arrayData = [];
    for (filepath in jsonData) {
      arrayData.push({
        'filepath' : filepath,
        'num' : jsonData[filepath]
      });
    }
    //Sort the data
    arrayData.sort(function(a,b){
      return (a.filepath > b.filepath) ? 1 : ((b.filepath > a.filepath) ? -1 : 0);
    });

    var stratify = d3.stratify()
      .parentId(function (d) {
        if(d.filepath == '/') return null;
        if(d.filepath.indexOf('/') > 0) { // non-root file
          return d.filepath.substring(0, d.filepath.lastIndexOf('/'));
        } else { //root file
          return '/';
        }
      })
      .id(function (d) {
        return d.filepath;
      });

    root = stratify(arrayData);
    // .sort(function(a, b) { return b.height - a.height || b.value - a.value; });

    root.sum(function(d) { return d.num });

    // // JSON data
    // var nodeData = {
    //     "name": "TOPICS", "children": [{
    //         "name": "Topic A",
    //         "children": [{"name": "Sub A1", "size": 4}, {"name": "Sub A2", "size": 4}]
    //     }, {
    //         "name": "Topic B",
    //         "children": [{"name": "Sub B1", "size": 3}, {"name": "Sub B2", "size": 3}, {
    //             "name": "Sub B3", "size": 3}]
    //     }, {
    //         "name": "Topic C",
    //         "children": [{"name": "Sub A1", "size": 4}, {"name": "Sub A2", "size": 4}]
    //     }]
    // };
    // var root = d3.hierarchy(nodeData)
    //   .sum(function (d) { return d.size});
    console.log(root)

    //Init SVG
    var width = 960,
        height = 700,
        radius = Math.min(width, height) / 2;
    var svg = d3.select("#offenders_map").append("svg:svg")
      .attr("width", width)
      .attr("height", height)
    var g = svg.append('g')
      .attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')');

    //Size the arcs
    var partition = d3.partition().size([2 * Math.PI, radius]);
    partition(root)
    var arc = d3.arc()
      .startAngle(function (d) { return d.x0 })
      .endAngle(function (d) { return d.x1 })
      .innerRadius(function (d) { return d.y0 })
      .outerRadius(function (d) { return d.y1 });

    // Create color scheme
    var color = d3.scaleOrdinal(d3.schemeCategory20b);

    // Put it all together
    g.selectAll('path')
        .data(root.descendants())
        .enter().append('path')
        .attr("display", function (d) { return d.depth ? null : "none"; })
        .attr("d", arc)
        .style('stroke', '#ccc')
        .style("fill", function (d) { return color((d.children ? d : d.parent).data.name); });

    //
    // var svg = d3.select("#chart").append("svg:svg")
    //   .attr("width", width)
    //   .attr("height", height)
    //
    // svg.append("g")
    //    .attr("transform", "translate(" + width / 2 + "," + (height / 2) + ")");
    //
    // svg.selectAll("path")
    //     .data(partition.nodes(root))
    //   .enter().append("path")
    //     .attr("d", arc)
    //     .style("fill", function(d) { return color((d.children ? d : d.parent).name); })
    //     .on("click", click)
    //   .append("title")
    //     .text(function(d) { return d.name + "\n" + formatNumber(d.value); });
    //
    // d3.select(self.frameElement).style("height", height + "px");

    // var partitionLayout = d3.partition();
    // partitionLayout.padding(2);
    //
    // partitionLayout(root);
    //
    // d3.select('svg g')
    //   .selectAll('rect')
    //   .data(root.descendants())
    //   .enter()
    //   .append('rect')
    //   .attr('x', function(d) { return d.x0; })
    //   .attr('y', function(d) { return d.y0; })
    //   .attr('width', function(d) { return d.x1 - d.x0; })
    //   .attr('height', function(d) { return d.y1 - d.y0; });


    // var treemap = d3.treemap()
    //                 .tile(d3.treemapResquarify)
    //                 .size([width, height])
    //                 .paddingInner(1)
    //                 .round(true);
    // treemap(root);
    // console.log(root);
    //
    // var svg = d3.select("svg#source_treemap"),
    // width = +svg.attr("width"),
    // height = +svg.attr("height");
    //
    // var cell = svg.selectAll("g")
    //     .data(root.leaves())
    //     .enter().append("g")
    //       .attr("transform", function(d) { return "translate(" + d.x0 + "," + d.y0 + ")"; });
    //
    // cell.append("rect")
    //     .attr("id", function(d) { return d.data.id; })
    //     .attr("width", function(d) { return d.x1 - d.x0; })
    //     .attr("height", function(d) { return d.y1 - d.y0; })
    //     .attr("fill", function(d) { return color(d.parent.data.id); });
    //
    // cell.append("clipPath")
    //     .attr("id", function(d) { return "clip-" + d.data.id; })
    //   .append("use")
    //     .attr("xlink:href", function(d) { return "#" + d.data.id; });
    //
    // cell.append("text")
    //     .attr("clip-path", function(d) { return "url(#clip-" + d.data.id + ")"; })
    //   .selectAll("tspan")
    //     .data(function(d) { return d.data.name.split(/(?=[A-Z][^A-Z])/g); })
    //   .enter().append("tspan")
    //     .attr("x", 4)
    //     .attr("y", function(d, i) { return 13 + i * 10; })
    //     .text(function(d) { return d; });

    // d3.select("body")
    //   .selectAll(".source_treemap")
    //   .data(root.leaves())
    //   .enter().append("div")
    //     .attr("class", "node")
    //     .attr("title", function(d) { return d.id; })
    //     .style("left", function(d) { return d.x0 + "px"; })
    //     .style("top", function(d) { return d.y0 + "px"; })
    //     .style("width", function(d) { return d.x1 - d.x0 + "px"; })
    //     .style("height", function(d) { return d.y1 - d.y0 + "px"; })
    //     .style("background", function(d) { while (d.depth > 1) d = d.parent; return color(d.id); })
    //   .append("div")
    //     .attr("class", "node-label")
    //     .text(function(d) { return d.id.substring(d.id.lastIndexOf(".") + 1).split(/(?=[A-Z][^A-Z])/g).join("\n"); });
  }
});


</script>

<!-- <%= @filepaths.to_a %> -->

<!-- <%= render 'shared/loading' =%>

<table id="datatable" class="display" width="100%">
  <thead></thead>
  <tbody></tbody>
  <tfoot></tfoot>
</table>

<%= javascript_include_tag "filepaths/index" %> -->
