<% content_for(:container_css) { "tour" }%>

<% content_for(:title) do %>
Guided Tour
<% end %>

<div class="grid-x grid-margin-x grid-margin-y align-center">
  <div class="cell medium-8 centered-headers">

    <h2>A Guided Tour of Vulnerability History</h2>
    <p>by Andy Meneely</p>
  </div>
</div>

<div class="grid-x grid-margin-x grid-margin-y align-center">
  <div class="cell medium-6 centered-headers">
    <div class="vhp-art-compass"></div>
  </div>
</div>
<%#
<div class="grid-x grid-margin-x grid-margin-y align-center">
  <div class="cell medium-6 centered-headers">
    <h2>Capture the Flag</h2>
    <p>Throughout this guide, we'll give you small challenges, scavenger hunt style. : </p>
    <div class="ctf-flag" id="hello-world"></div>
  </div>
</div>
 %>

<div class="grid-x grid-margin-x grid-margin-y align-center">
  <div class="cell medium-6 centered-headers">

    <h2>About this guide</h2>
    <p>We want to show you through what the historical
      record of a vulnerability looks like. We'll be introducing key terminology and explaining our methods. Think of this like an annotated table of contents for the whole site.</p>

    <p> We'll be using the following
      vulnerabilities as running examples:</p>
    <ul>
      <li>
        <a href="/CVE-2020-13776">CVE-2020-13776 aka Mr. 0Day in systemd</a>
      </li>
      <li>
        <a href="/CVE-2013-4394">CVE-2013-4394 aka Keybord Locale Injection in
          systemd</a>
      </li>
      <li><a href="/CVE-2016-4465">CVE-2016-4465</a> in Apache Struts</li>
    </ul>

    <h2>Digging In</h2>
    <p>
      We often first find out about a vulnerability right at the end of its
      lifetime. Typically, the development team will release a <b>security
        advisory</b> saying that they recently fixed a vulnerability in their
      system and they request everyone to update. You have likely experienced
      this with your phone, your browser, your operating system, etc.
    </p>

    <p>
      As part of this process, someone along the way will register a CVE
      identifier. The <b>Common Vulnerability and Exposures</b> project is about
      providing baseline information about a vulnerability. The CVE reporter
      needs to provide a brief description and answer some questions about
      severity using the <b>Common Vulnerability Scoring System</b> (CVSS). All
      of this is stored in the <b>National Vulnerability Database</b> (NVD).
    </p>

    <p>
      For example, <a href="https://nvd.nist.gov/vuln/detail/CVE-2020-13776">Mr.
        0Day's NVD entry</a> shows links to few security advisories, and perhaps
      most importantly, a <a
        href="https://github.com/systemd/systemd/issues/15985">link to the
        original bug report</a>.
    </p>

    <p>
      An optional part of reporting to the CVE is to describe your vulnerability using the <b>Common Weakness Enumeration (CWE)</b>. The CWE is the animal kingdom of vulnerabilities: a giant taxonomy rich with examples, categories, cross-references, and all the hair-splitting you could ever want. Classifying a vulnerability in the CWE is a challenging task given how vast the CWE is. We correct as much as we can, and often this goes unreported.
    </p>

    <p>
      We must note here that the NVD/CVE database is not perfect. They provide
      no fact-checking in their reports and can often have corrections later on. In fact, we've uncovered hundreds of entries that were falsely reported by someone
      looking to boost their resume. So it's important to us that <b>all
        vulnerabilities are acknowledged by the development team</b>. Having a
      CVE entry is not enough evidence that the vulnerability actually existed.
    </p>



    <p>
      Often, a vulnerability will also be acknowledged in a project's changelog or list on their website. There you will often find verson numbers, and a sometimes credit to the person who reported it. The following VHP tags are good starting points for learning about vulnerability discoveries:
    </p>
    <ul>
      <li>Discovered Internally</li>
      <li>Discovered Externally</li>
      <li>Discovererd automatically</li>
      <li>Discovererd in contest</li>
      <li>Bounty</li>
    </ul>

    <p>From there, we find the <b>fix commit</b>. Most software projects use the version control system <b>Git</b> to manage their code, which means that every change in the system is tracked and merged. Typically, the bug report will report which commit has fixed the vulnerability, which VHP records. For example, Mr. 0Day was fixed in <a href="/commits/156a5fd297b61bce31630d7a52c15614bf784843">this commit</a>. These fix commits are also sometimes called <b>patches</b>.
    <p>

    <p>
      You can learn a lot from looking at a fix commit. The following VHP tags are good starting points for learning various properties of fix commits.
    </p>

    <ul>
      <li>Fix: Big</li>
      <li>Fix: Small</li>
      <li>Language</li>
      <li>Language</li>
    </ul>
        s the fix big or small?

      Learn more by exploring VHP tags  and Fix: Small.
    </p>


    <h2>Vulnerability Lifecycle</h2>

  </div>
</div>