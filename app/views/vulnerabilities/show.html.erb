<style>
  body{
    background-color: rgba(0, 0, 0, 0);
  }

  svg {
    font: 10px sans-serif;
    fill: #000000;
  }

  line.bin {
    stroke: #000000;
    stroke-width: 3px;
  }

  .y.axis {
    display: none;
  }


  .axis path, .axis line {
    fill: none;
    stroke: #000000;
    shape-rendering: crispEdges;
  }

</style>

<p id="notice"><%= notice %></p>

<div>
  <%= link_to 'Edit', edit_vulnerability_path(@vulnerability) %> |
  <%= link_to 'Back', vulnerabilities_path %>
</div>


<div>
<script src="//d3js.org/d3.v3.min.js"></script>
  <script src="http://labratrevenge.com/d3-tip/javascripts/d3.tip.v0.6.3.js"></script>

<script>

  // date helpers

  // get date given a jsonDate object
  function getDate(d) {
    return new Date(d);
  }
  // add date helper for padding
  function addDays(date, days) {
    var result = new Date(date);
    result.setDate(result.getDate() + days);
    return result;
  }

  // Calculate the range between two dates
  function calculateDateRange(a, b) {
    var utc1 = Date.UTC(a.getFullYear(), a.getMonth(), a.getDate());
    var utc2 = Date.UTC(b.getFullYear(), b.getMonth(), b.getDate());

    return Math.abs(Math.floor((utc2 - utc1) / (86400000)));
  }

  /** Grouping Helper */
  function getGroups(bins, slots) {
    var startDate = getDate(bins[0].jsonDate);
    var endDate = getDate(bins[bins.length - 1].jsonDate);
    var timespan = calculateDateRange(startDate, endDate);
    var increment = (timespan / slots);

    console.log(timespan);
    console.log(increment);
    var days = [];
    for (i = 0; i < slots; i ++) {
      days.push(addDays(startDate, i*increment))
    }
    days.push(endDate);
    console.log(days);
    return days;
  }

  /** Go through date list and find the nearest one */
  function getClosestDate(daysList, date) {
    closestDate = daysList[0];
    for (i = 0; i < daysList.length - 1; i ++) {
      if (calculateDateRange(daysList[i], date) < calculateDateRange(closestDate, daysList[i])) {
        closestDate = daysList[i];
      }
    }
    return closestDate;
  }


  // color helper, get type of vulnerability and assign color based on it
  function getColor(type) {
    if (type =='v' ) { // vulnerability
      // pink
      return "#E91E63";
    }
    else if (type =='p' ) { // patch
      // blue
      return "#1E88E5";
    }
    else if (type == 'b') { // bug
      // orange
      return "#FB8C00";
    }
    else if (type == 'x') {
      return "#FFFFFF";
    }
  }


  var margin = {top: 10, right: 20, bottom: 30, left: 60},
      width = 960 - margin.left - margin.right,
      height = 500 - margin.top - margin.bottom;

  var svg = d3.select("body").append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
      .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");



  d3.csv('<%= ENV["RAILS_RELATIVE_URL_ROOT"] %>/vulnerability-test-data.csv', function(error, bins) {
    if (error) throw error;

    var minDate = getDate(bins[0].jsonDate),
        maxDate = getDate(bins[bins.length - 1].jsonDate);

    var x = d3.time.scale()
        .range([0, width]);

    var y = d3.scale.linear()
        .range([height, 0]);

    var tip = d3.tip()
        .attr('class', 'd3-tip')
        .offset([-10, 0])
        .html(function(d) {
          return "<strong>Vulnerability Name:</strong> <span style='color:red'>" + d.name + "</span>";
        })

    svg.call(tip);

    // Coerce types.
    bins.forEach(function(bin) {
      bin.height = +bin.height;
    });

    // Set the scale domains.
    x.domain([minDate, addDays(maxDate, 0)]); //Todo stop adding a static amount to this
    y.domain([0, d3.max(bins.map(function(d) { return 30; }))]).nice();


    var slots = 25; // number of different
    var datePadLocations = getGroups(bins, slots);


    // Add the bins.
    svg.selectAll(".bin")
        .data(bins)
        .enter().append("svg:rect")
        .attr("class", "bin")
        .attr("x", function(d) { return x(getClosestDate(datePadLocations, getDate(d.jsonDate))); })
        .attr("y", function(d) { return y(d.height); })
        .attr("width", 20)
        .attr("height", 15)
        .attr("rx", 3)
        .attr("ry", 3)
        .attr("fill", function(d) { return getColor(d.vType)})
        .on({
          "mouseover": tip.show,
          "click": function(bins, i) {
            d3.select(this).attr("fill","#FFFFFF");
          }
        });



    svg.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")
        .call(d3.svg.axis()
            .scale(x)
            .outerTickSize(0)
            .orient("bottom"));

    svg.append("g")
        .attr("class", "y axis")
        .call(d3.svg.axis()
            .scale(y)
            .orient("left"));

  });

</script>

</div>

