<meta charset="UTF-8">

<%= stylesheet_link_tag 'reset' %> <!-- CSS reset -->

<%= stylesheet_link_tag 'timeline/timeline-styles' %> <!-- Resource style -->

<p id="notice"><%= notice %></p>

<div>
  <%= link_to 'Edit', edit_vulnerability_path(@vulnerability) %> |
  <%= link_to 'Back', vulnerabilities_path %>
</div>

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href='http://fonts.googleapis.com/css?family=Droid+Serif|Open+Sans:400,700' rel='stylesheet' type='text/css'>

  <%= javascript_include_tag "d3.v4.min.js" %>
  <%= javascript_include_tag "modernizr.js" %>
  <!-- <script src="http://labratrevenge.com/d3-tip/javascripts/d3.tip.v0.6.3.js"></script> -->
  <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>
  <%= javascript_include_tag "timeline/main.js" %> <!-- Resource jQuery -->

</head>

<body>
<header>
  <h1 id="horizontal-timeline"></h1>

  <!-- Horizontal Timeline -->
  <script>
    /**
     * Date Helper functions
     */

    // get date given a jsonDate object
    function getDate(d) {
      return new Date(d);
    }
    // add date helper for padding
    function addDays(date, days) {
      var result = new Date(date);
      result.setDate(result.getDate() + days);
      return result;
    }

    // Calculate the range between two dates
    function calculateDateRange(a, b) {
      var utc1 = Date.UTC(a.getFullYear(), a.getMonth(), a.getDate());
      var utc2 = Date.UTC(b.getFullYear(), b.getMonth(), b.getDate());

      return Math.abs(Math.floor((utc2 - utc1) / (86400000)));
    }

    //Get groups nearby the given dates
    function getGroups(bins, slots) {
      var startDate = getDate(bins[0].jsonDate);
      var endDate = getDate(bins[bins.length - 1].jsonDate);
      var timespan = calculateDateRange(startDate, endDate);
      var increment = (timespan / slots);
      var days = [];
      for (var i = 0; i < slots; i++) {
        days.push(addDays(startDate, i * increment))
      }
      days.push(endDate);
      return days;
    }

    /** Go through date list and find the nearest one */
    function getClosestDate(daysList, date) {
      closestDate = daysList[0];
      for (i = 0; i < daysList.length - 1; i++) {
        if (calculateDateRange(daysList[i], date) < calculateDateRange(closestDate, daysList[i])) {
          closestDate = daysList[i];
        }
      }
      return closestDate;
    }

    /**
     * Get the y coordinate to place the vulnerability item
     * @param date the date to check the y coordinate for
     * @param occupiedSlots (the object containing all x coordinates with the current y to place at
     * @returns the y coordinate to place tile at
     */
    function getY(date, occupiedSlots) {
      if (occupiedSlots[date] == null) {
        occupiedSlots[date] = 1;
        return 1;
      }
      else {
        occupiedSlots[date] = occupiedSlots[date] += 1;
        return occupiedSlots[date];
      }
    }

    // color helper, get type of vulnerability and assign color based on it
    function getColor(type) {
      if (type == 'v') { // vulnerability
        // pink
        return "#E91E63";
      }
      else if (type == 'p') { // patch
        // blue
        return "#1E88E5";
      }
      else if (type == 'b') { // bug
        // orange
        return "#FB8C00";
      }
      else if (type == 'x') {
        return "#FFFFFF";
      }
    }


    var margin = {top: 10, right: 20, bottom: 30, left: 60},
        width = 960 - margin.left - margin.right,
        height = 500 - margin.top - margin.bottom;

    var svg = d3.select("#horizontal-timeline").append("svg")
        .attr("width", "100%")
        .attr("viewBox", "0 0 960 500")
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");


    d3.csv('<%= ENV["RAILS_RELATIVE_URL_ROOT"] %>/vulnerability-test-data.csv', function (error, bins) {
      if (error) throw error;

      var minDate = getDate(bins[0].jsonDate),
          maxDate = getDate(bins[bins.length - 1].jsonDate);

      var x = d3.scaleTime()
          .range([0, width]);

      var y = d3.scaleLinear()
          .range([height, 0]);


      // store x, y coordinate pairs - key is x (date), value is y (used coordinates)

      // Set the scale domains.
      x.domain([minDate, maxDate]);
      y.domain([0, d3.max(bins.map(function (d) {
        return 30;
      }))]).nice();


      var slots = 25; // number of different
      var datePadLocations = getGroups(bins, slots);
      var occupiedXYValues = {};
      // Add the bins.
      svg.selectAll(".bin")
          .data(bins)
          .enter().append("svg:rect")
          .attr("class", "bin")
          .attr("x", function (d) {
            return x(getClosestDate(datePadLocations, getDate(d.jsonDate)));
          })
          .attr("y", function (d) {
            return y(getY(getClosestDate(datePadLocations, getDate(d.jsonDate)), occupiedXYValues));
          })
          .attr("width", 20)
          .attr("height", 15)
          .attr("rx", 3)
          .attr("ry", 3)
          .attr("fill", function (d) {
            return getColor(d.vType)
          })
          .on('click', function(d) {
            window.location.href = '<%=url_for %>#'+ d.name;
            d3.select(this).attr("stroke", "#00FF00")
          })
          .on("mouseover", function () {
            d3.select(this).attr("stroke", "#00FF00")
          })
          .on("mouseout", function () {
            d3.select(this).attr("stroke", "")
          });

      svg.append("g")
          .attr("class", "x axis")
          .attr("transform", "translate(0," + height + ")")
          .style("fill", "white")
          .call(d3.axisBottom(x));

      svg.append("text")
          .attr("x", (width / 2))
          .attr("y", ((height / 2) - (height / 4)))
          .attr("text-anchor", "middle")
          .style("font-family", "Open Sans")
          .style("fill", "white")
          .style("font-size", "1.5rem")
          .text("<%=@vulnerability%>");
    });
  </script>

  <!-- END HORIZONTAL TIMELINE -->

</header>
<div id="visualization">

</div>



<section id="cd-timeline" class="cd-container">

  <div style="display:none" id="hiddenArea">

    <div class="cd-timeline-img cd-default">
      <img src='<%=image_path('timeline/cd-icon-default.svg') %>' alt="Picture">
    </div> <!-- cd-timeline-img -->
    <div class="cd-timeline-content">
      <h2><a name="$NAME$">$TITLE$</a></h2>
      <p>$DESCRIPTION$</p>
      <a href="#" class="cd-read-more">Read more</a>
      <span class="cd-date">$TIMESTAMP$</span>
    </div>

  </div>

  <script>

    /**
     * Gets correct img url and CSS tags given a vulnerability type
     * @param vType the vulnerability to look up
    */
    function getCssURL(vType) {
      switch (vType) {
        case ('v'):
          return [('<%=image_path('timeline/cd-icon-vulnerability.svg') %>'), 'cd-vulnerability'];
          break;
        case('p'):
          return [('<%=image_path('timeline/cd-icon-patch.svg') %>'), 'cd-patch'];
          break;
        case('b'):
          return [('<%=image_path('timeline/cd-icon-bug.svg') %>'), 'cd-bug'];
          break;
      }
    }


    /**
     * Timeline generation script
     * @type {DocumentFragment} Stores timeline elements before adding to the HTML page
     */
    var toAdd = document.createDocumentFragment();

    d3.csv('<%= ENV["RAILS_RELATIVE_URL_ROOT"] %>/vulnerability-test-data.csv', function (error, bins) {
      if (error) throw error;
      bins.forEach(function (bin) {
        var newDiv = document.createElement('div');
        newDiv.id = bin.name;

        newDiv.className = 'cd-timeline-block';
        newDiv.innerHTML = $('#hiddenArea').html();

        newDiv.innerHTML = newDiv.innerHTML.replace("$TIMESTAMP$", bin.jsonDate);
        newDiv.innerHTML = newDiv.innerHTML.replace("$DESCRIPTION$", bin.description);
        newDiv.innerHTML = newDiv.innerHTML.replace("$TITLE$", bin.name);
        newDiv.innerHTML = newDiv.innerHTML.replace("$NAME$", bin.name);
        newDiv.innerHTML = newDiv.innerHTML.replace("<%=image_path('timeline/cd-icon-default.svg') %>", function () {
          return getCssURL(bin.vType)[0];
        });
        newDiv.innerHTML = newDiv.innerHTML.replace("$HREFURL$", '');
        newDiv.innerHTML = newDiv.innerHTML.replace("cd-default", function () {
          return getCssURL(bin.vType)[1];
        });
        toAdd.appendChild(newDiv);
      });


      document.getElementById('cd-timeline').appendChild(toAdd);

    });

  </script>

</section> <!-- cd-timeline -->
</body>


