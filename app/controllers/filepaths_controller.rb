class FilepathsController < ApplicationController
  before_action :set_filepath, except: [:index]

  # GET /filepaths
  # GET api/filepaths?offenders=true
  # GET api/filepaths?articles=true
  # GET api/filepaths
  def index
    @projects = Project.all
    @filepaths = if params[:offenders].to_s == 'true'
      Filepath.offenders
    else
      Filepath.all
    end
    @articleFilepaths = ArticleFilepath.joins(:article).distinct(:article_id).select(:title, :blurb, :art)
    render_json_for_api @filepaths
  end

  # GET /filepath/chromium?path=DEPS
  # GET /api/filepath/chromium?path=DEPS
  def show
    render_json_for_api @filepath
  end

  #GET /api/filepaths/:id/developers
  def developers
    render_json_for_api @filepath.developers
  end

  #GET /api/filepaths/:id/contributors
  def contributors
    render_json_for_api @filepath.contributors
  end

  #GET /api/filepaths/:id/commits
  def commits
    render_json_for_api @filepath.key_commits
  end

  #GET /api/filepaths/:id/vulnerabilities
  #GET /api/filepaths/:id/vulnerabilities?short_descriptions=true
  def vulnerabilities
    render_json_for_api @filepath.vulnerabilities(params[:short_descriptions])
  end

  private

    def set_filepath
      slug = params[:filepath_id]
      if Filepath.exists?(slug: slug)
        @filepath = Filepath.find_by(slug: slug)
        paths = @filepath.filepath.split('/')
        path = "#{@filepath.project.name.downcase}/"
        @fp_endpoints = paths.map do |fp|
          if fp != paths[-1]
            "<a href=\"/filepaths?search=#{path += fp != paths[0] ? "/#{fp}" : fp}#table\">#{fp}</a>"
          else
            fp
          end
        end
        # @endpoints_array.map { |a|
        #   (a != paths[-1]) ? "<a href=\""
        # }
      else
        unless slug.to_s.empty?
          flash[:error] = "ERROR Filepath not found: #{slug}"
        end
        redirect_to controller: 'filepaths', :action => 'index'
      end
    end

    # Never trust parameters from the scary internet, only allow the white list through.
    def filepath_params
      # Since this is read-only, we have no permitted strong params
    end

end
