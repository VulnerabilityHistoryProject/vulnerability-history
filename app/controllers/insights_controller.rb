class InsightsController < ApplicationController
  before action :set_tagTrends, only: [:show]

  def index
    return render_json_for_api 

  end

  # GET /insights
  # GET /insights/tag-trends
  def tag_trends
    
		@tags = Tag.select(:name, :shortname, :color, :icon)
  end

	# GET /api/insights/tag-trends
	def tag_trends_api
    # add multiple valiable
    # tag1 = first tag, maps to tag2
    # tag2 = second tag, maps to tag3
    # tag3 = third tag, maps to tag4
    # tag4 = fourth tag doens't map to anything
    # There's a total of 4 tags, possibly use connection.escape(tag1) to be safe from sql injection
    events = []
    query1 = <<~EOSQL
      SELECT t1.shortname as tag1,
		    t2.shortname as tag2, 
			  vt1.vulnerability_id as vul_id1,
			  vt2.vulnerability_id as vul_id2
		  FROM tags as t1
		  CROSS join tags as t2
		  INNER join vulnerability_tags as vt1 on t1.id = vt1.tag_id
		  INNER join vulnerability_tags as vt2 on t2.id = vt2.tag_id
	  WHERE starts_with(t1.shortname, 'cwe-119')
          AND starts_with(t2.shortname, 'owners')
		      AND vt1.vulnerability_id = vt2.vulnerability_id
    EOSQL

    query2 = <<~EOSQL
    SELECT t1.shortname as tag1,
		    t2.shortname as tag2, 
			  vt1.vulnerability_id as vul_id1,
			  vt2.vulnerability_id as vul_id2
		  FROM tags as t1
		  CROSS join tags as t2
		  INNER join vulnerability_tags as vt1 on t1.id = vt1.tag_id
		  INNER join vulnerability_tags as vt2 on t2.id = vt2.tag_id
	  WHERE starts_with(t1.shortname, '" + tag2 + "')
          AND starts_with(t2.shortname, 'owners')
		      AND vt1.vulnerability_id = vt2.vulnerability_id
    EOSQL

    query3 = <<~EOSQL
    SELECT t1.shortname as tag1,
		    t2.shortname as tag2, 
			  vt1.vulnerability_id as vul_id1,
			  vt2.vulnerability_id as vul_id2
		  FROM tags as t1
		  CROSS join tags as t2
		  INNER join vulnerability_tags as vt1 on t1.id = vt1.tag_id
		  INNER join vulnerability_tags as vt2 on t2.id = vt2.tag_id
	  WHERE starts_with(t1.shortname, 'cwe-119')
          AND starts_with(t2.shortname, 'owners')
		      AND vt1.vulnerability_id = vt2.vulnerability_id
    EOSQL
    #unions all the queries together
    query4 = <<~EOSQL
    

    EOSQL

    @logger.info 'Execute SQL query'
    begin
      ActiveRecord::Base.connection.execute 'SET statement_timeout = 3000' # 3 seconds
      results = ActiveRecord::Base.connection.execute(query1)
      ActiveRecord::Base.connection.execute 'SET statement_timeout = 10000' # default (10 seconds)
    rescue
      @logger.warn 'Error executing SQL query'
      
    end
    results = ActiveRecord::Base.connection.execute(query1)
  end

end
