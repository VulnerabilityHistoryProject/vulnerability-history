class InsightsController < ApplicationController

  # GET /insights
  # GET /insights/tag-trends
  def tag_trends
    if 
		@tags = Tag.select(:name, :shortname, :color, :icon)
    end
  end

	# GET /api/insights/tag-trends
	def tag_trends_api
    #general queries to get all of the families.
    #But will need second set of count queries to get specific family values
    events = []

    #Query 1 is first column to second column
    firstToSecond = <<~EOSQL
      SELECT t1.shortname as tag1,
		    t2.shortname as tag2, 
			  vt1.vulnerability_id as vul_id1,
			  vt2.vulnerability_id as vul_id2
		  FROM tags as t1
		  CROSS join tags as t2
		  INNER join vulnerability_tags as vt1 on t1.id = vt1.tag_id
		  INNER join vulnerability_tags as vt2 on t2.id = vt2.tag_id
	  WHERE starts_with(t1.family, ?)
          AND starts_with(t2.family, ?)
		      AND vt1.vulnerability_id = vt2.vulnerability_id
    EOSQL

    #Query 2 is second column to third column
    secondToThird = <<~EOSQL
    SELECT t1.shortname as tag1,
      t2.shortname as tag2, 
      vt1.vulnerability_id as vul_id1,
      vt2.vulnerability_id as vul_id2
    FROM tags as t1
    CROSS join tags as t2
    INNER join vulnerability_tags as vt1 on t1.id = vt1.tag_id
    INNER join vulnerability_tags as vt2 on t2.id = vt2.tag_id
  WHERE starts_with(t1.family, ?)
        AND starts_with(t2.family, ?)
        AND vt1.vulnerability_id = vt2.vulnerability_id
  EOSQL

    #Query 3 is third column to fourth column
    thirdToFourth = <<~EOSQL
    SELECT t1.shortname as tag1,
      t2.shortname as tag2, 
      vt1.vulnerability_id as vul_id1,
      vt2.vulnerability_id as vul_id2
    FROM tags as t1
    CROSS join tags as t2
    INNER join vulnerability_tags as vt1 on t1.id = vt1.tag_id
    INNER join vulnerability_tags as vt2 on t2.id = vt2.tag_id
  WHERE starts_with(t1.family, ?)
        AND starts_with(t2.family, ?)
        AND vt1.vulnerability_id = vt2.vulnerability_id
  EOSQL

    firstCount = <<~EOSQL
    SELECT COUNT(*) as num_vulns
		  FROM tags as t1
		  CROSS join tags as t2
		  INNER join vulnerability_tags as vt1 on t1.id = vt1.tag_id
		  INNER join vulnerability_tags as vt2 on t2.id = vt2.tag_id
	  WHERE starts_with(t1.family, ?)
          AND starts_with(t2.family, ?)
		      AND vt1.vulnerability_id = vt2.vulnerability_id
    EOSQL
    
    #Runs SQL query and returns results, Empty if error or no results
    begin
      resultingData = ActiveRecord::Base.sanitize_sql([firstToSecond, "lifetime", "i18n"])
      results = ActiveRecord::Base.connection.execute(resultingData)
    rescue
      results = []
    end

    #total nodes
    nodes = []

    #add all of the first column for sankey diagram
    results.each do |result|
      node1 = {name: result['tag1']}
      unless nodes.include?(node1) && firstSet.include?(node1)
        nodes << node1
      end
    end

    #add all of the second column for sankey diagram
    results.each do |result|
      node2 = {name: result['tag2']}
      unless nodes.include?(node2)
        nodes << node2
      end

    end



    render_json_for_api firstSet

  end
end
