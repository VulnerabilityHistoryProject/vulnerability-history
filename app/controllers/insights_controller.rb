class InsightsController < ApplicationController

  # GET /insights
  # GET /insights/tag-trends
  def tag_trends
    if 
		@tags = Tag.select(:name, :shortname, :color, :icon)
    end
  end

	# GET /api/insights/tag-trends
	def tag_trends_api
    #general queries to get all of the families.
    #But will need second set of count queries to get specific family values
    permitted_params = params.permit(:family)

    #family1 =
    #family2 =
    #family3 =
    #family4 = 

    #Query 1 is first column to second column
    query = <<~EOSQL
    SELECT t1.shortname as tag1,
        t2.shortname as tag2,
        count(*) as num_vals
        FROM tags as t1
        CROSS join tags as t2
        INNER join vulnerability_tags as vt1 on t1.id = vt1.tag_id
        INNER join vulnerability_tags as vt2 on t2.id = vt2.tag_id
    WHERE t1.family = ?
        AND t2.family = ?
        AND vt1.vulnerability_id = vt2.vulnerability_id
        GROUP BY t1.id, t2.id

    UNION

    SELECT t1.shortname as tag1,
      t2.shortname as tag2,
      count(*) as num_vals
      FROM tags as t1
      CROSS join tags as t2
      INNER join vulnerability_tags as vt1 on t1.id = vt1.tag_id
      INNER join vulnerability_tags as vt2 on t2.id = vt2.tag_id
    WHERE t1.family = ?
      AND t2.family = ?
      AND vt1.vulnerability_id = vt2.vulnerability_id
      GROUP BY t1.id, t2.id

    UNION

    SELECT t1.shortname as tag1,
      t2.shortname as tag2,
      count(*) as num_vals
      FROM tags as t1
      CROSS join tags as t2
      INNER join vulnerability_tags as vt1 on t1.id = vt1.tag_id
      INNER join vulnerability_tags as vt2 on t2.id = vt2.tag_id
    WHERE t1.family = ?
      AND t2.family = ?
      AND vt1.vulnerability_id = vt2.vulnerability_id
      GROUP BY t1.id, t2.id
    EOSQL

    #Runs SQL query and returns results, Empty if error or no results
    begin
      resultingData = ActiveRecord::Base.sanitize_sql([query, "cwe", "lifetime", "lifetime", "project", "project", "language"])
      results = ActiveRecord::Base.connection.execute(resultingData)
    rescue
      results = []
    end

    dataForSankey = {}
    #total nodes
    nodes = []

    #add all of the first column for sankey diagram
    results.each do |result|
      node1 = {name: result['tag1']}
      unless nodes.include?(node1)
        nodes << node1
      end
    end

    #add all of the second column for sankey diagram
    results.each do |result|
      node2 = {name: result['tag2']}
      unless nodes.include?(node2)
        nodes << node2
      end
    end

    dataForSankey[:nodes] = nodes
    
    links = []

    results.each do |result|
      link = {source: result['tag1'], target: result['tag2'], value: result['num_vals']}
      unless links.include?(link)
        links << link
      end
    end

    dataForSankey[:links] = links



    render_json_for_api dataForSankey

  end
end

