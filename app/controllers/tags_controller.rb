class TagsController < ApplicationController
  before_action :set_tag, only: [:show]

  # GET /tags
  # GET api/tags
  def index
    return render_json_for_api(Tag.map) if params[:map] == "true" && api_call?
    @tags_with_counts = Tag.
      joins(:vulnerabilities).
      group("tags.id").
      select("tags.name",
              "tags.shortname",
             "tags.color",
             "tags.icon",
             "tags.id",
             "tags.family",
             'count(*) AS num_vulns').
      having('count(*) > 1')

    @tags = Tag.order(name: :asc).
                select("
                  *,
                  substring(tags.description from 0 for 240) || '...' as short_desc
                ")
    @articleTags = ArticleTag.joins(:article).distinct(:article_id).select(:title, :blurb, :art)
    if @tags == nil
      flash[:error] = "Error: Tag not found"
      redirect_to controller: 'tags', :action => 'index'
    else
      render_json_for_api(@tags)
    end
  end

  # GET /tags/1
  # GET api/tags/1
  def show
    if @tag == nil
      flash[:error] = "Error: Tag not found"
      redirect_to controller: 'tags', :action => 'index'
      return
    end
    @vulns = Vulnerability.
      joins(:tags).
      joins(:project).
      where('vulnerability_tags.tag_id' => @tag.id).
      select('*').
      select('projects.name').
      select("
        substring(vulnerabilities.description from 0 for 280)
          || '...' as short_desc
      ").
      select('vulnerability_tags.note as tag_note').
      order('vulnerabilities.upvotes desc')
    if @vulns == nil
      flash[:error] = "Error: Tag not found"
      redirect_to controller: 'tags', :action => 'index'
    else
      render_json_for_api(@vulns)
    end
  end

  # GET /api/tags/overlaps
  def overlaps
    params.permit(:shortnames_arr)
    @permitted_vals = Tag.pluck('shortname')
    
    if params[:shortnames_arr].all? { |val| @permitted_vals.include?(val) }
      shortnames_arr = params[:shortnames_arr]
      @tags = Tag.overlaps(shortnames_arr)
      render_json_for_api(@tags)
    else
      render json: "Error: Invalid number of tags or invalid input", status: :bad_request
    end
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_tag
      if(params[:id].match(/^(\d)+$/).present?)
        begin
          @tag = Tag.find(params[:id])
        rescue ActiveRecord::RecordNotFound => e
            flash[:error] = "Error: Tag not found"
            redirect_to controller: 'tags', :action => 'index'
        end
      else
          begin
            @tag = Tag.find_by(shortname: params[:id])
          rescue ActiveRecord::RecordNotFound => e
              flash[:error] = "Error: Tag not found"
              redirect_to controller: 'tags', :action => 'index'
          end
      end
    end

    # Never trust parameters from the scary internet, only allow the white list through.
    def tag_params
      params.fetch(:tag, {}).permit(:map)
    end
end
