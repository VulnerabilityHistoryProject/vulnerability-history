class VulnerabilitiesController < ApplicationController
  before_action :set_vulnerability, only: [:show, :events]

  # GET /vulnerabilities
  # GET /api/vulnerabilities
  def index
    @announcements = []
    # FIXME: SUPER SLOW! Gr.
    # @announcements = Event.where(detail_type: 'Vulnerability')
    #                       .includes(:detail, :style)
    @vulnerabilities = Vulnerability.list_all(params[:short_descriptions])
    render_json_for_api @vulnerabilities
  end

  # GET /vulnerabilities/1
  # GET /api/vulnerabilities/1
  def show
    @vulnerable_files = Filepath.vulnerable(@vulnerability)
    render_json_for_api @vulnerability
  end

  # GET /api/vulnerabilities/1/events
  # This is an API-only route
  def events
    events = @vulnerability.events.includes(:detail, :style).map do |e|
      {
        id: e.id,
        title: e.title,
        description: view_context.markdown(e.description),
        date: e.date,
        type: e.type,
        style_color: e.style.color,
        style_icon: e.style.icon,
        detail_type: e.detail_type,
        detail_id: e.detail_id,
        detail_url: view_context.url_for(e.detail),
      }
    end
    render_json_for_api events
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_vulnerability
      id = params[:id] || params[:vulnerability_id]
      if Vulnerability.exists? id
        @vulnerability = Vulnerability.find id
      else
        flash[:error] = "Error: Vulnerability not found"
        redirect_to controller: 'vulnerabilities'
      end
    end

    # Never trust parameters from the scary internet, only allow the white list through.
    def vulnerability_params
      params.fetch(:vulnerability)
            .permit(:short_descriptions)
    end
end
