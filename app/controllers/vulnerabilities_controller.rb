class VulnerabilitiesController < ApplicationController
  before_action :set_vulnerability, only: [:show, :events, :card]

  # GET /vulnerabilities
  # GET /api/vulnerabilities
  def index
    api_call? ? api_index : web_index
  end

  # GET /api/vulnerabilities
  def api_index
    render_json_for_api Vulnerability.list_all(params[:short_descriptions])
                                     .limit(param_int_if_set(:limit))
                                     .offset(param_int_if_set(:offset))
  end

  # GET /vulnerabilities
  def web_index
    @vulnerabilities = Vulnerability.list_all(true)
                                    .limit(10) # Show 10 on the page initially
    @articleVulns = ArticleVulnerability.joins(:article)
                                        .distinct(:article_id)
                                        .select(:title, :blurb, :art)
    @tagMap = Tag.map
  end

  # GET /api/corpus
  def corpus
    results = Vulnerability.joins(:project)
                          .joins(:tags)
                          .select(:id)
                          .select(:cve)
                          .select('MAX(subdomain) AS project_name')
                          .select('vulnerabilities.description')
                          .select("vulnerabilities.notes#>'{mistakes,answer}' AS mistakes")
                          .select("JSON_AGG(JSON_BUILD_OBJECT(
                                  'id', vulnerability_tags.tag_id,
                                  'tag', tags.shortname))  AS tag_list")
                          .where("vulnerabilities.description <> ''")
                          .group('vulnerabilities.id')
    render_json_for_api results
  end

  # GET /vulnerabilities/1
  # GET /api/vulnerabilities/1
  def show
    @page_title = if @vulnerability.nickname.blank?
      @vulnerability.cve
    else
      "#{@vulnerability.cve} aka #{@vulnerability.nickname}"
    end
    @vulnerable_files = Filepath.vulnerable(@vulnerability)
    @github_edit_url = "https://github.com/VulnerabilityHistoryProject/vulnerabilities/edit/dev/cves/#{@vulnerability.project.subdomain}/#{@vulnerability.cve}.yml"
    render_json_for_api @vulnerability
  end

  # GET /api/vulnerabilities/1/same-cwe
  def sameCWE
    params.permit(:id)
    cve = params[:id]
    limit = params.key?(:limit) ? params[:limit].to_i : 10
    offset = params.key?(:offset) ? params[:offset].to_i : 0
    results = (Vulnerability.sameCWE(cve, limit, offset))
    if !results.ntuples.zero?
      return results
    else
      render status: :bad_request, json: <<~EOS
      Error: No results.
    EOS
    end
  end

  # GET /api/vulnerabilities/1/same-directory
  def sameDirectory
    params.permit(:id)
    cve = params[:id]
    limit = params.key?(:limit) ? params[:limit].to_i : 10
    offset = params.key?(:offset) ? params[:offset].to_i : 0
    results = (Vulnerability.sameDirectory(cve, limit, offset))
    if !results.ntuples.zero?
      render_json_for_api results
    else
      render status: :bad_request, json: <<~EOS
      Error: No results.
    EOS
    end
  end

  # GET /api/vulnerabilities/1/same-lessons
  def sameLessons
    params.permit(:id)
    cve = params[:id]
    limit = params.key?(:limit) ? params[:limit].to_i : 10
    offset = params.key?(:offset) ? params[:offset].to_i : 0
    results = (Vulnerability.sameLessons(cve, limit, offset))
    if !results.ntuples.zero?
      return results
    else
      render status: :bad_request, json: <<~EOS
      Error: No results.
    EOS
    end
  end

  # GET /api/vulnerabilities/1/events
  # This is an API-only route
  def events
    events = @vulnerability.events.map do |e|
      {
        id: e.id,
        title: e.title,
        description: e.description,
        date: e.date,
        event_type: e.event_type,
        color: e.color,
        icon: e.icon,
        notes: e.notes,
        start_hidden: e.start_hidden,
      }
    end
    render_json_for_api events
  end

  #GET /vulnerabilities/1/card
  def card
    @vulnData = Vulnerability.list_all(true).find @vulnerability.id
    @tagMap = Tag.map
    render layout: 'card'
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_vulnerability
      id = params[:id] || params[:vulnerability_id]
      if Vulnerability.exists? id
        @vulnerability = Vulnerability.find_by(id: id)
      elsif Vulnerability.exists?(cve: id)
        @vulnerability = Vulnerability.find_by(cve: id)
      else
        flash[:error] = "Error: Vulnerability not found"
        redirect_to controller: 'vulnerabilities'
      end
    end

    # Never trust parameters from the scary internet, only allow the white list through.
    def vulnerability_params
      params.fetch(:vulnerability)
            .permit(:short_descriptions)
            .permit(:limit)
            .permit(:offset)
    end

end
