require 'coderay'
require 'yaml'
require 'kramdown'
require 'rinku'
require 'sanitize'

module ApplicationHelper
  def markdown(source)
    # We markdownify FIRST because Rinku won't recognize markdown.
    markdownified = Kramdown::Document.new(source.to_s).to_html

    # Rinku will find any URLs not already in <a> tags and link em
    html = Rinku.auto_link(markdownified, mode=:all, link_attr=nil, skip_tags=nil)

    # Autolink all vulnerabilities following the format CVE-####-#### (case insensitive).
    # The rightmost number can be 4+ digits long according to
    # https://cve.mitre.org/about/faqs.html#cve_id_syntax_change
    html.gsub!(/(CVE-\d{4}-\d{4,})/i,'<a href="/cves/\1">\1</a>')

    # Identify all icon names placed between two colons, like :fi-camera:
    # All icon names are replaced with an <i> tag and appropriate class.
    # ":mi-bug-report:" turns into "<i class=\"vhp-icons-mi-bug-report\"></i>"
    prefix = "vhp-icon-"
    raw_icons = html.scan(/:[a-zA-Z-]*:/)
    raw_icons.each {|i| html.sub!(i.to_s,
      "<i class=\"#{prefix}#{i[1...-1].to_s}\"></i>")}

    # Transformer used by Sanitize
    icon_transformer = lambda do |env|
      return unless env[:node_name] == 'i'
      node = env[:node]
      class_name = node['class']

      # Only allow a class attribute on an <i> tag if the class starts with
      # the prefix used to designate an icon. All other attributes should
      # be removed from the tag.
      if not class_name.nil? and class_name.start_with?(prefix)
        Sanitize.node!(node, {
          :elements => ['i'],
          :attributes => {'i' => ['class']}
        })
      else
        Sanitize.node!(node, {
          :elements => ['i']
        })
      end

      {:node_whitelist => [node]}
    end

    # We sanitize AFTER everything is transformed, and Sanitize is smart enough to
    # allow only certain kinds of links. We need to allow links, hence BASIC.
    # But we also want to allow icons, so we use a transformer to accomplish this.
    # See https://github.com/rgrove/sanitize for configs.
    scrubbed = Sanitize.fragment(html, Sanitize::Config.merge(Sanitize::Config::BASIC,
      :transformers    => icon_transformer,
      :remove_contents => true
    ))
    raw(scrubbed).html_safe
  end

  def pretty_code(str)
    # the [3..-1] removes the YAML front matter, "---\n"
    CodeRay.scan(str.to_yaml[3..-1], :yaml).
            div(:line_numbers => :table)
  end

  def pretty_date(source)
    source.strftime('%a %d %b %Y')
  end
end
