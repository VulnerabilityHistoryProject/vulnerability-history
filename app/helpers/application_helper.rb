require 'coderay'
require 'yaml'
require 'kramdown'
require 'rinku'
require 'sanitize'

module ApplicationHelper
  def markdown(source)
    # We markdownify FIRST because Rinku won't recognize markdown.
    markdownified = Kramdown::Document.new(source.to_s).to_html

    # Rinku will find any URLs not already in <a> tags and link em
    html = Rinku.auto_link(markdownified, mode=:all, link_attr=nil, skip_tags=nil)

    # Autolinks all vulnerabilities following the format CVE-####-#### (case insensitive).
    # The rightmost number can be 4+ digits long according to
    # https://cve.mitre.org/about/faqs.html#cve_id_syntax_change
    cves = html.scan(/(CVE-\d{4}-\d{4,})/i)
    cves.each { |s| html.sub!(s[0].to_s, "<a href=\"/cves/#{s[0].to_s}\">#{s[0].to_s}</a>") }

    # We sanitize AFTER everything is transformed, and Sanitize is smart enough to
    # allow only certain kinds of links. We need to allow links, hence BASIC.
    # See https://github.com/rgrove/sanitize for configs.
    scrubbed = Sanitize.fragment(html, Sanitize::Config::BASIC)
    raw(scrubbed).html_safe
  end

  def pretty_code(str)
    # the [3..-1] removes the YAML front matter, "---\n"
    CodeRay.scan(str.to_yaml[3..-1], :yaml).
            div(:line_numbers => :table)
  end

  def pretty_date(source)
    source.strftime('%a %d %b %Y')
  end
end
