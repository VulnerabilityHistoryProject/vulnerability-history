/**
 * Custom implementation of dates for VHP. Wrapper for JS Date object. Helps create different String representations
 * and custom Date functionalites.
 */
export default class SimpleDate {

  constructor(date_str) {
    this.date = new Date(Date.parse(date_str));
  }

  // -----------------------
  // Custom Methods for Date
  // -----------------------

  // ----------------------------------------------
  // Different String representations for this Date
  // ----------------------------------------------

  shortDate() {
    debugger;
    return this.date.getFullYear() + "-" + this._getDoubleMonth() + "-" + this._getDoubleDay();
  }

  longDate() {
    return this._getLongMonth() + " " + this._getOrdinalDay + " " + this.date.getFullYear() + ", " + this._getMeridiemTime();
  }

  // ------------------------------------------------------------------------------------
  // Helper methods to construct String representations. Should only be called internaly.
  // ------------------------------------------------------------------------------------

  _getLongMonth() {
    switch(this.date.getMonth()) {
      case 0:
        return "January";
      case 1:
        return "February";
      case 2:
        return "March";
      case 3:
        return "April";
      case 4:
        return "May";
      case 5:
        return "June";
      case 6:
        return "July";
      case 7:
        return "August";
      case 8:
        return "September";
      case 9:
        return "October";
      case 10:
        return "November";
      case 11:
        return "December";
    }
  }

  _getShortMonth() {
    switch(this.date.getMonth()) {
      case 0:
        return "Jan";
      case 1:
        return "Feb";
      case 2:
        return "Mar";
      case 3:
        return "Apr";
      case 4:
        return "May";
      case 5:
        return "Jun";
      case 6:
        return "Jul";
      case 7:
        return "Aug";
      case 8:
        return "Sep";
      case 9:
        return "Oct";
      case 10:
        return "Nov";
      case 11:
        return "Dec";
    }
  }

  _getDoubleMonth() {
    var month = this.date.getMonth() + 1;
    if(month < 10) {
      return "0" + month;
    } else {
      return "" + month;
    }
  }  

  /**
   * Gets a string representing the ordinal day of the date.
   */
  _getOrdinalDay() {
    if(this.date.getDate() > 10 && this.date.getDate() < 20) {  // Teens have Same Suffix
      return this.date.getDate() + "th";
    } else {
      lastDigit = this.date.getDate() % 10;
      switch(lastDigit) { // Unique Cases
        case 0:
          return this.date.getDate() + "th";
        case 1:
          return this.date.getDate() + "st";
        case 2:
          return this.date.getDate() + "nd";
        case 3:
          return this.date.getDate() + "rd";
      }
      return this.date.getDate() + "th"; // Default Suffix
    }
  }

  _getDoubleDay() {
    if(this.date.getDate() < 10) {
      return "0" + this.date.getDate();
    } else {
      return "" + this.date.getDate();
    }
  }

  /**
   * Create a string representing non-military time.
   */
  _getMeridiemTime() {
    if(this.date.getHours() == 0) {
      return "12" +":" + this.date.getMinutes() + ":" + this.date.getSeconds() + " AM";
    } else if(this.date.getHours() < 12) {
        return this.date.getHours() + ":" + this.date.getMinutes() + ":" + this.date.getSeconds() + " AM";
    } else if(this.date.getHours == 12) {
      return "12" +":" + this.date.getMinutes() + ":" + this.date.getSeconds() + " PM";
    }else if (12 < this.date.getHours() < 24) {
      return (this.date.getHours() - 12) + ":" + this.date.getMinutes() + ":" + this.date.getSeconds() + " PM";
    } else {
      return "00:00:00";
    }
  }
}
