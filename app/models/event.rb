class Event < ApplicationRecord
  belongs_to :detail, polymorphic: true


  def title
    if notes_query_title.empty?
      embed_details(title_template)
    else
      detail.notes[notes_query_title]
    end
  end

  def description
    if notes_query_description.empty?
      embed_details(description_template)
    else
      detail.notes[notes_query_description]
    end
  end

  def date
    if notes_query_date.empty?
      detail.date
    else
      detail.notes[notes_query_date]
    end
  end

  def type
    if notes_query_type.empty?
      embed_details(type_template)
    else
      detail.notes[notes_query_type]
    end
  end

  def Event.by_fixes(v)
    # This works if we do the association, but Event.create breaks
    # Event.includes(:fix).
    #       where({ events: {detail_type: 'Fix'},
    #               fixes:  {vulnerability_id: v.id}})
    Event.joins( "INNER JOIN fixes ON fixes.id = events.detail_id AND events.detail_type = 'Fix'" ).
          where( fixes: { vulnerability_id: v.id } )
  end

  # Pull all events associated with this vulnerability
  #
  #  * All releases in the project
  #  * All Events where the detail is the vulnerability
  #  * TODO: VCCs to this vulnerability
  #  * TODO: Edit events to files for this vulnerability
  def Event.by_vulnerability(v)
    Event.where(detail_type: 'Release').
          or(Event.where(detail: v)) +
          Event.by_fixes(v)
  end

  private

  def embed_details(str)
    str.gsub(':title:', detail.title).
        gsub(':description:', detail.description).
        gsub(':type:', detail.type)
  end

end
