class Event < ApplicationRecord
  belongs_to :detail, polymorphic: true

  def title
    if notes_query_title.empty?
      embed_details(title_template)
    else
      detail.notes[notes_query_title]
    end
  end

  def description
    if notes_query_description.empty?
      embed_details(description_template)
    else
      detail.notes[notes_query_description]
    end
  end

  def date
    if notes_query_date.empty?
      detail.date
    else
      detail.notes[notes_query_date]
    end
  end

  def type
    if notes_query_type.empty?
      embed_details(type_template)
    else
      detail.notes[notes_query_type]
    end
  end

  # Pull all events associated with this vulnerability
  #
  #  * All releases in the project
  #  * All Events where the detail is the vulnerability
  #  * TODO: Fixes to this vulnerability
  #  * TODO: VCCs to this vulnerability
  #  * TODO: Edit events to files for this vulnerability
  def Event.find_by_vulnerability(v)
    Event.where(detail_type: 'Release').
          or(Event.where(detail: v))
  end

  private

  def embed_details(str)
    str.gsub(':title:', detail.title).
        gsub(':description:', detail.description).
        gsub(':type:', detail.type)
  end

end
