class Event < ApplicationRecord
  belongs_to :detail, polymorphic: true
  belongs_to :style

  def title
    embed_details(title_template)
  end

  def description
    embed_details(description_template)
  end

  def date
    detail.date
  end

  def type
    embed_details(type_template)
  end

  def Event.by_fixes(v)
    Event.joins("INNER JOIN fixes ON fixes.id = events.detail_id
                                  AND events.detail_type = 'Fix'" ).
          where( fixes: { vulnerability_id: v.id } )
  end

  def Event.by_vccs(v)
    Event.joins("INNER JOIN vccs ON vccs.id = events.detail_id
                                  AND events.detail_type = 'Vcc'" ).
          where( vccs: { vulnerability_id: v.id } )
  end

  def Event.edits_on_vulnerable_files(v)
    Event.joins("INNER JOIN commits
                   ON (commits.id = events.detail_id
                       AND events.detail_type = 'Commit')
                 INNER JOIN commit_filepaths
                   ON commit_filepaths.commit_id = commits.id
                 INNER JOIN filepaths
                   ON filepaths.id = commit_filepaths.filepath_id
                 INNER JOIN commit_filepaths cf2
                   ON cf2.filepath_id = filepaths.id
                 INNER JOIN commits commits_filepaths
                   ON commits_filepaths.id = cf2.commit_id
                 INNER JOIN fixes ON fixes.commit_id = commits_filepaths.id").
          where(fixes: {vulnerability_id: v.id} )
  end

  # Pull all events directly and indirectly associated with this vulnerabilty
  #
  #  * All releases in the project
  #  * All Events where the detail is the vulnerability
  #  * All Fix events that fix this vulnerability
  #  * All VCC events for this vulnerability
  #  * TODO: Edit events to files for this vulnerability
  def Event.by_vulnerability(v)
    Event.where(detail_type: 'Release').
          or(Event.where(detail: v)) +
          Event.by_fixes(v) +
          Event.by_vccs(v) +
          Event.edits_on_vulnerable_files(v)
  end

  private

  def embed_details(str)
    match = str.match(/:notes.*:/)
    if(match == nil)
       match = ""
     else
       match = match[0].to_s
    end
    notes_tag = match.scan(/~(\w+)/).flatten
    new_str = str.gsub(':title:', detail.title).
        gsub(':description:', detail.description).
        gsub(':type:', detail.type)

    unless notes_tag.empty? || detail.notes.empty?
        new_str.gsub!(/:notes.*:/, detail.notes.dig(*notes_tag).to_s)
      end
    return new_str
  end
end
