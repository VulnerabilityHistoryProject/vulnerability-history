class Developer < ApplicationRecord
  has_many :commits, foreign_key: 'author_id'

  validates :email, :uniqueness => true

end
def Developer.sanitize_validate_email dirty_email 
    begin
      email = dirty_email.gsub(/\+\w+(?=@)/, '') #strips any tags on the email
      email.downcase!
      matched_email = /([a-zA-Z0-9%._-]+)@([a-zA-Z0-9._-]+\.[a-zA-Z0-9._-]+)/.match email #groups local and domain and checks for match
      return nil, false unless matched_email  #returns [nil,false] if matched_email is invalid (nil)
      email_address = matched_email[0]
      email_local = matched_email[1]
      email_domain = matched_email[2]

      if email_domain == 'gtempaccount.com'
        #     e.g. john-doe%gmail.com@gtempaccount.com
        match = /^([\w\-]+)%(\w+.\w{3})(?=@gtempaccount.com)/.match email_address

        email_address = (match[1] + '@' + match[2])
        email_local = match[1]
        email_domain = match[2]
      end

      bad_domains = ['chromioum.org','chroimum.org','chromium.com','chromoium.org','chromium.rg','chromum.org','chormium.org','chromimum.org','chromium.orf','chromiu.org','chroium.org','chcromium.org','chromuim.org','google.com','g','chromium.or']
      if bad_domains.include? email_domain 
        email_domain = "@chromium.org"
        email_address = email_local + email_domain
      end

      return email_address, true
    end
  end