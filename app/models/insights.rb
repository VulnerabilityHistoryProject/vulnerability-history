class Insights < ApplicationRecord
    has_many :vulnerability_tags, foreign_key: 'tag_id'
    has_many :vulnerabilities, through: :vulnerability_tags
    has_many :article_tags, foreign_key: 'tag_id'
    has_many :articles, through: :article_tags

    def self.dataForSankey(family_arr)

        #Sanitize input
        family1 = ActiveRecord::Base.sanitize_sql(family_arr[0])
        family2 = ActiveRecord::Base.sanitize_sql(family_arr[1])
        family3 = ActiveRecord::Base.sanitize_sql(family_arr[2])
        family4 = ActiveRecord::Base.sanitize_sql(family_arr[3])
    
        #SQL query to get data for sankey diagram
        query = <<~EOSQL
        SELECT t1.shortname as tag1,
            t2.shortname as tag2,
            count(*) as num_vals
            FROM tags as t1
            CROSS join tags as t2
            INNER join vulnerability_tags as vt1 on t1.id = vt1.tag_id
            INNER join vulnerability_tags as vt2 on t2.id = vt2.tag_id
        WHERE t1.family = ?
            AND t2.family = ?
            AND vt1.vulnerability_id = vt2.vulnerability_id
            GROUP BY t1.id, t2.id
    
        UNION
    
        SELECT t1.shortname as tag1,
          t2.shortname as tag2,
          count(*) as num_vals
          FROM tags as t1
          CROSS join tags as t2
          INNER join vulnerability_tags as vt1 on t1.id = vt1.tag_id
          INNER join vulnerability_tags as vt2 on t2.id = vt2.tag_id
        WHERE t1.family = ?
          AND t2.family = ?
          AND vt1.vulnerability_id = vt2.vulnerability_id
          GROUP BY t1.id, t2.id
    
        UNION
    
        SELECT t1.shortname as tag1,
          t2.shortname as tag2,
          count(*) as num_vals
          FROM tags as t1
          CROSS join tags as t2
          INNER join vulnerability_tags as vt1 on t1.id = vt1.tag_id
          INNER join vulnerability_tags as vt2 on t2.id = vt2.tag_id
        WHERE t1.family = ?
          AND t2.family = ?
          AND vt1.vulnerability_id = vt2.vulnerability_id
          GROUP BY t1.id, t2.id
        EOSQL
    
        #Runs SQL query and returns results, Empty if error or no results
        begin
          sanitizedQuery = ActiveRecord::Base.sanitize_sql([query, family1, family2, family2, family3, family3, family4])
          results = ActiveRecord::Base.connection.execute(sanitizedQuery)
        rescue
          results = []
        end

        return results

    end
end
