class Filepath < ApplicationRecord
  belongs_to :project
  has_many :commit_filepaths, foreign_key: 'filepath_id'
  has_many :commits, through: :commit_filepaths
  has_many :developers, through: :commits
  has_many :article_filepaths, foreign_key: 'filepath_id'
  has_many :articles, through: :article_filepaths

  def self.compute_dir(filepath_str)
    return '/' unless filepath_str.include? '/'
    return filepath_str.match(/(.*\/).+$/).captures[0]
  end

  def self.vulnerable(v)
    Filepath.joins(commits: :fixes).
             where('fixes.vulnerability_id' => v.id).
             distinct
  end

  def self.make_slug(project_str, filepath_str)
    "#{project_str}-#{filepath_str}".parameterize
  end

  # Override from Rails for friendly urls.
  # Based on: https://gist.github.com/jcasimir/1209730
  def to_param
    slug
  end

  def key_commits
    commits.
      left_outer_joins(:vccs).
      left_outer_joins(:fixes).
      select(:id).
      select(:commit_hash).
      select(:notes).
      select(:message).
      select(:date_created).
      select('vccs.id IS NULL AS is_vcc').
      select('fixes.id IS NULL AS is_fix')
  end

  # Known "offenders" are files that have been fixed for a
  # vulnerability at any point in time. This returns filepaths with
  # the number of vulnerability fixes
  def self.offenders
    Filepath.joins(commits: [{ fixes: :vulnerability },]).
      joins(:project).
      group('filepaths.id, filepaths.project_id').
      select('filepaths.id').
      select('filepaths.slug').
      select('MAX(projects.subdomain) AS subdomain').
      select('MAX(projects.name) AS project_name').
      select('MAX(projects.id) AS project_id').
      select('MAX(filepaths.filepath) AS filepath').
      select('COUNT(fixes.id) AS num_fixes').
      select("COUNT(DISTINCT(cve)) AS num_cves").
      select("JSON_OBJECT_AGG(vulnerabilities.cve , JSON_BUILD_OBJECT(
          'nickname', vulnerabilities.nickname,
          'upvotes', vulnerabilities.upvotes )) AS cves").
      where('is_code = TRUE')
  end

  def vulnerabilities(short_descriptions)
    def vulnerabilities(short_descriptions)
      @fp = Vulnerability.
          joins([:project, fixes: {commit: :filepaths}]).
          left_outer_joins(:vulnerability_tags).
          where('filepaths.id' => id).
          select("vulnerabilities.id as id").
          select("vulnerabilities.cve as cve").
          select("vulnerabilities.announced").
          select("vulnerabilities.upvotes").
          select("vulnerabilities.nickname").
          select("max(projects.name) AS project_name").
          select("max(projects.subdomain) AS subdomain").
          select("JSON_AGG(JSON_BUILD_OBJECT(
                  'id', vulnerability_tags.tag_id,
                  'importance', vulnerability_tags.importance
                  ) ORDER BY importance DESC) AS tag_json").
          group('vulnerabilities.id').
          order('vulnerabilities.upvotes desc')
  
      if short_descriptions
        @fp.select('vulnerabilities.short_desc as short_desc')
      else
        @fp.select('vulnerabilities.description as description')
      end  
    end
  end

  def contributors
    developers.
      group('developers.id').
      select('developers.id').
      select('MAX(developers.nickname) AS nickname').
      select('MAX(developers.email) AS email').
      select('COUNT(commits.commit_hash) AS num_commits').
      select("
        SUM(to_number(commits.notes->>'insertions','99999'))::integer
        + SUM(to_number(commits.notes->>'deletions','99999'))::integer
        AS total_churn
      ").
      select("SUM(to_number(commits.notes->>'insertions','99999'))::integer AS insertions").
      select("SUM(to_number(commits.notes->>'deletions','99999'))::integer AS deletions")
  end

end
