class Filepath < ApplicationRecord
  belongs_to :project
  has_many :commit_filepaths, foreign_key: 'filepath_id'
  has_many :commits, through: :commit_filepaths
  has_many :developers, through: :commits
  has_many :article_filepaths, foreign_key: 'filepath_id'
  has_many :articles, through: :article_filepaths

  def self.compute_dir(filepath_str)
    return '/' unless filepath_str.include? '/'
    return filepath_str.match(/(.*\/).+$/).captures[0]
  end

  def self.vulnerable(v)
    Filepath.joins(commits: :fixes).
             where('fixes.vulnerability_id' => v.id).
             distinct
  end

  # Known "offenders" are files that have been fixed for a
  # vulnerability at any point in time. This returns filepaths with
  # the number of vulnerability fixes
  def self.offenders
    Filepath.joins(commits: { fixes: :vulnerability }).
             group('filepaths.id').
             select('filepaths.id').
             select('MAX(filepaths.filepath) AS filepath').
             select('COUNT(*) AS num_fixes').
             select("COUNT(DISTINCT(cve)) AS num_cves").
             select("STRING_AGG(DISTINCT(cve),', ') AS cves")
  end

  def vulnerabilities(short_descriptions)
    @fp = Vulnerability.joins([:project, :tags, fixes: {commit: :filepaths}]).
      where('filepaths.id' => id).
      select("vulnerabilities.id as id").
      select("vulnerabilities.cve as cve").
      select("vulnerabilities.announced").
      select("vulnerabilities.upvotes").
      select("vulnerabilities.nickname").
      select("projects.subdomain").
      select("projects.name").
      select("STRING_AGG(tags.name,', ') AS tag_names").
      group('vulnerabilities.id, projects.id').
      order('vulnerabilities.upvotes desc')

    if(short_descriptions)
      @fp.select("
        substring(vulnerabilities.description from 0 for 140) || '...'
        as short_desc
      ")
    else
      @fp.select('vulnerabilities.description as description')
    end
  end

  def contributors
    developers.
      group('developers.id').
      select('developers.id').
      select('MAX(developers.nickname) AS nickname').
      select('MAX(developers.email) AS email').
      select('COUNT(commits.commit_hash) AS num_commits').
      select("SUM(to_number(commits.notes->>'churn','99999'))::integer AS total_churn").
      select("SUM(to_number(commits.notes->>'insertions','99999'))::integer AS insertions").
      select("SUM(to_number(commits.notes->>'deletions','99999'))::integer AS deletions")
  end

  #def commits
   # commits.
    #    group('commits.id').
     #   select('commits.id').
     #   select('MAX(commits.title) AS title').
     #   select('MAX(commits.description) AS description').
     #   select('MAX(commits.date) AS date')
  #end

end
