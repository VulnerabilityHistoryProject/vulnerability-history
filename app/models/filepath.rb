class Filepath < ApplicationRecord
  has_many :commit_filepaths, foreign_key: 'filepath_id'
  has_many :commits, through: :commit_filepaths
  has_many :developers, through: :commits

  validates :filepath, :uniqueness => true

  def self.vulnerable(v)
    Filepath.joins(commits: :fixes).
             where('fixes.vulnerability_id' => v.id).
             distinct
  end

  # Known "offenders" are files that have been fixed for a
  # vulnerability at any point in time. This returns filepaths with
  # the number of vulnerability fixes
  def self.offenders
    Filepath.joins(commits: { fixes: :vulnerability }).
             group('filepaths.id').
             select('filepaths.id').
             select('MAX(filepaths.filepath) AS filepath').
             select('COUNT(*) AS num_fixes').
             select("COUNT(DISTINCT(cve)) AS num_cves").
             select("STRING_AGG(DISTINCT(cve),', ') AS cves")
  end

  def vulnerabilities(id)
    Filepath.joins(commits: { fixes: :vulnerability }).
            where('filepaths.id' => id).
            select("announced as announced").
            select("upvotes as upvotes").
            select('cve as cve').
            select('description as description').
            group('vulnerabilities.id')
  end

  def contributors
    developers.
      group('developers.id').
      select('developers.id').
      select('MAX(developers.nickname) AS nickname').
      select('MAX(developers.email) AS email').
      select('COUNT(commits.commit_hash) AS num_commits').
      select("SUM(to_number(commits.notes->>'churn','99999'))::integer AS total_churn").
      select("SUM(to_number(commits.notes->>'insertions','99999'))::integer AS insertions").
      select("SUM(to_number(commits.notes->>'deletions','99999'))::integer AS deletions")
  end

end
