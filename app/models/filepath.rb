class Filepath < ApplicationRecord
  belongs_to :project
  has_many :commit_filepaths, foreign_key: 'filepath_id'
  has_many :commits, through: :commit_filepaths
  has_many :developers, through: :commits
  has_many :article_filepaths, foreign_key: 'filepath_id'
  has_many :articles, through: :article_filepaths

  def self.compute_dir(filepath_str)
    return '/' unless filepath_str.include? '/'
    return filepath_str.match(/(.*\/).+$/).captures[0]
  end

  def self.vulnerable(v)
    Filepath.joins(commits: :fixes).
             where('fixes.vulnerability_id' => v.id).
             distinct
  end

  def self.make_slug(project_str, filepath_str)
    "#{project_str}-#{filepath_str}".parameterize
  end

  # Override from Rails for friendly urls.
  # Based on: https://gist.github.com/jcasimir/1209730
  def to_param
    slug
  end

  # Known "offenders" are files that have been fixed for a
  # vulnerability at any point in time. This returns filepaths with
  # the number of vulnerability fixes
  def self.offenders
    Filepath.joins(commits: { fixes: :vulnerability }).
             joins(:project).
             group('filepaths.id, filepaths.project_id').
             select('filepaths.id').
             select('filepaths.slug').
             select('MAX(projects.subdomain) AS subdomain').
             select('MAX(projects.name) AS project_name').
             select('MAX(projects.id) AS project_id').
             select('MAX(filepaths.filepath) AS filepath').
             select('COUNT(*) AS num_fixes').
             select("COUNT(DISTINCT(cve)) AS num_cves").
             select("STRING_AGG(DISTINCT(cve),', ') AS cves")
  end

  def vulnerabilities(short_descriptions)
    @fp = Vulnerability.joins([:project, :tags, fixes: {commit: :filepaths}]).
        where('filepaths.id' => id).
        select("vulnerabilities.id as id").
        select("vulnerabilities.cve as cve").
        select("vulnerabilities.announced").
        select("vulnerabilities.description").
        select("vulnerabilities.short_desc").
        select("vulnerabilities.upvotes").
        select("vulnerabilities.nickname").
        select("max(projects.name) AS project_name").
        select("max(projects.subdomain) AS subdomain").
        select("STRING_AGG(tags.name,', ') AS tag_names").
        select("JSON_AGG(JSON_BUILD_OBJECT(
              'tag_name', tags.name,
              'tag_shortname', tags.shortname,
              'tag_color', tags.color,
              'tag_icon', tags.icon
              )) AS tag_json").
        group('vulnerabilities.id').
        order('vulnerabilities.upvotes desc')
  end

  def contributors
    developers.
      group('developers.id').
      select('developers.id').
      select('MAX(developers.nickname) AS nickname').
      select('MAX(developers.email) AS email').
      select('COUNT(commits.commit_hash) AS num_commits').
      select("SUM(to_number(commits.notes->>'churn','99999'))::integer AS total_churn").
      select("SUM(to_number(commits.notes->>'insertions','99999'))::integer AS insertions").
      select("SUM(to_number(commits.notes->>'deletions','99999'))::integer AS deletions")
  end

end
