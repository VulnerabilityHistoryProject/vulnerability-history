class Tag < ApplicationRecord
    has_many :vulnerability_tags, foreign_key: 'tag_id'
    has_many :vulnerabilities, through: :vulnerability_tags
    has_many :article_tags, foreign_key: 'tag_id'
    has_many :articles, through: :article_tags

    def self.map
      tag_query = Tag.select(:id, :name, :shortname, :color, :icon)
      tag_map = tag_query.inject({}) do |map, tag|
        map[tag.id] = {
          'name' => tag.name,
          'shortname' => tag.shortname,
          'color' => tag.color,
          'icon' => tag.icon,
        };
        map
      end
    end

    def self.lessons
      joins(:vulnerability_tags).where("name LIKE 'Lesson: %'")
    end

    def self.correlogram(x, y)
      query = <<~EOSQL
        SELECT  t1.shortname AS tag1,
                t2.shortname AS tag2,
                COUNT(*) as num_vulns
        FROM tags AS t1
             CROSS JOIN tags AS t2
             INNER JOIN vulnerability_tags AS vt1 ON t1.id = vt1.tag_id
             INNER JOIN vulnerability_tags AS vt2 ON t2.id = vt2.tag_id
        WHERE starts_with(t1.shortname, $1)
          AND starts_with(t2.shortname, $2)
          AND vt1.vulnerability_id = vt2.vulnerability_id
        GROUP BY t1.shortname, t2.shortname
        ORDER BY t1.shortname, t2.shortname ASC
      EOSQL
      ActiveRecord::Base.connection.exec_query(query, "correlogram", [x, y])
    end
end
