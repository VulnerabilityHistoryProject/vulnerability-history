class Tag < ApplicationRecord
    has_many :vulnerability_tags, foreign_key: 'tag_id'
    has_many :vulnerabilities, through: :vulnerability_tags
    has_many :article_tags, foreign_key: 'tag_id'
    has_many :articles, through: :article_tags

    def self.map
      tag_query = Tag.select(:id, :name, :shortname, :color, :icon, :family)
      tag_map = tag_query.inject({}) do |map, tag|
        map[tag.id] = {
          'name' => tag.name,
          'shortname' => tag.shortname,
          'color' => tag.color,
          'icon' => tag.icon,
          'family' => tag.family,
        };
        map
      end
    end

    def self.lessons
      joins(:vulnerability_tags).where("name LIKE 'Lesson: %'")
    end

    def self.overlaps(arr_shortname)

      tag_query = <<~EOSQL
      SELECT vul.cve,
             vul.nickname,
             vul.upvotes,
             vul.project_id,
             vul.description,
             vul.short_desc,
             max(projects.subdomain) AS subdomain,
             max(projects.name) AS project_name,
             JSON_AGG(JSON_BUILD_OBJECT(
              'id', vt.tag_id,
              'importance', vt.importance
              ) ORDER BY importance DESC) AS tag_json
         FROM vulnerabilities AS vul
         JOIN vulnerability_tags AS vt ON vul.id = vt.vulnerability_id
         JOIN projects on vul.project_id = projects.id
         JOIN tags AS t on vt.tag_id = t.id
         GROUP BY vul.cve, vul.nickname, vul.upvotes, vul.project_id, vul.description, short_desc
         HAVING array_agg(t.shortname)::text[] @> ARRAY[?]
        ORDER BY vul.upvotes
      EOSQL

      sanitizedQuery = ActiveRecord::Base.sanitize_sql([tag_query, arr_shortname])
      results = ActiveRecord::Base.connection.execute(sanitizedQuery);
      return results
      
    end

    def self.tag_trends(family_list)
      #Sanitize input
      family1 = ActiveRecord::Base.sanitize_sql(family_list[0])
      family2 = ActiveRecord::Base.sanitize_sql(family_list[1])
      family3 = ActiveRecord::Base.sanitize_sql(family_list[2])
      family4 = ActiveRecord::Base.sanitize_sql(family_list[3])
  
      #SQL query to get data for sankey diagram
      query = <<~EOSQL
      SELECT t1.shortname as tag1,
          t2.shortname as tag2,
          count(*) as num_vals
          FROM tags as t1
          CROSS join tags as t2
          INNER join vulnerability_tags as vt1 on t1.id = vt1.tag_id
          INNER join vulnerability_tags as vt2 on t2.id = vt2.tag_id
      WHERE t1.family = ?
          AND t2.family = ?
          AND vt1.vulnerability_id = vt2.vulnerability_id
          GROUP BY t1.id, t2.id
  
      UNION
  
      SELECT t1.shortname as tag1,
        t2.shortname as tag2,
        count(*) as num_vals
        FROM tags as t1
        CROSS join tags as t2
        INNER join vulnerability_tags as vt1 on t1.id = vt1.tag_id
        INNER join vulnerability_tags as vt2 on t2.id = vt2.tag_id
      WHERE t1.family = ?
        AND t2.family = ?
        AND vt1.vulnerability_id = vt2.vulnerability_id
        GROUP BY t1.id, t2.id
  
      UNION
  
      SELECT t1.shortname as tag1,
        t2.shortname as tag2,
        count(*) as num_vals
        FROM tags as t1
        CROSS join tags as t2
        INNER join vulnerability_tags as vt1 on t1.id = vt1.tag_id
        INNER join vulnerability_tags as vt2 on t2.id = vt2.tag_id
      WHERE t1.family = ?
        AND t2.family = ?
        AND vt1.vulnerability_id = vt2.vulnerability_id
        GROUP BY t1.id, t2.id
      EOSQL
  
      #Runs SQL query and returns results, Empty if error or no results
      begin
        sanitizedQuery = ActiveRecord::Base.sanitize_sql([query, family1, family2, family2, family3, family3, family4])
        results = ActiveRecord::Base.connection.execute(sanitizedQuery)
      rescue
        results = []
      end

      dataForSankey = {}
      #total nodes
      nodes = []
  
      #add all of the first column for sankey diagram
      results.each do |result|
        node1 = {name: result['tag1']}
        unless nodes.include?(node1)
          nodes << node1
        end
      end
  
      #add all of the second column for sankey diagram
      results.each do |result|
        node2 = {name: result['tag2']}
        unless nodes.include?(node2)
          nodes << node2
        end
      end
  
      dataForSankey[:nodes] = nodes
      
      links = []
  
      results.each do |result|
        link = {source: result['tag1'], target: result['tag2'], value: result['num_vals']}
        unless links.include?(link)
          links << link
        end
      end
  
      dataForSankey[:links] = links


      return dataForSankey
    end
end
