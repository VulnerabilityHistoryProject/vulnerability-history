class Vulnerability < ApplicationRecord
  has_many :vccs, foreign_key: 'vulnerability_id'
  has_many :fixes, foreign_key: 'vulnerability_id'
  has_many :vulnerability_tags, foreign_key: 'vulnerability_id'
  has_many :tags, through: :vulnerability_tags
  has_many :article_vulnerabilities, foreign_key: 'vulnerability_id'
  has_many :articles, through: :article_vulnerabilities
  has_many :events
  belongs_to :project


  def self.list_all(short_descriptions)
    @vs = Vulnerability.
      left_outer_joins(:vulnerability_tags).
      joins(:project).
      select("vulnerabilities.id as id").
      select("vulnerabilities.cve as cve").
      select("vulnerabilities.announced").
      select("vulnerabilities.upvotes").
      select("vulnerabilities.nickname").
      select("max(projects.name) AS project_name").
      select("max(projects.subdomain) AS subdomain").
      select("JSON_AGG(JSON_BUILD_OBJECT(
              'id', vulnerability_tags.tag_id,
              'importance', vulnerability_tags.importance
              ) ORDER BY importance DESC) AS tag_json").
      group('vulnerabilities.id').
      order('vulnerabilities.upvotes desc')

    if short_descriptions
      @vs.select('vulnerabilities.short_desc as short_desc')
    else
      @vs.select('vulnerabilities.description as description')
    end
  end

  def self.curated
    where(" notes -> 'curated' = 'true' OR notes -> 'curation_level' <> '0'")
  end

  def self.word_count
    wc_sql = <<~EOSQL
      SUM(ARRAY_LENGTH(REGEXP_SPLIT_TO_ARRAY(description, '\s'),1)) AS word_count
    EOSQL
    # reorder removes the ORDER BY
    word_counts = all.reorder(nil).group(:id).select(wc_sql)
    word_counts.map { |v| v.word_count }.sum
  end


  def tags_by_name
    tags.order(name: :asc).
         includes(:vulnerability_tags).
         select('
           tags.id,
           tags.name,
           tags.color,
           tags.icon,
           tags.shortname,
           vulnerability_tags.note
          ')
  end

  def self.similarVulnerabilities(cve, similarity_action, limit, offset)
    if similarity_action == 'cwe'
      #Get CWE ID
      cwe_id = <<~EOSQL
        SELECT t.id
        FROM vulnerabilities v
        INNER JOIN vulnerability_tags vt ON v.id = vt.vulnerability_id
        INNER JOIN tags t ON vt.tag_id = t.id
        WHERE v.cve = ? AND t.family = 'cwe'
      EOSQL
      sanitizedQuery = ActiveRecord::Base.sanitize_sql([cwe_id, cve])
      results = ActiveRecord::Base.connection.execute(sanitizedQuery);
      cwe_ids = results.map { |result| result['id'] }
      allResults = Set.new
      #Get all vulnerabilities with the same CWE ID
      cwe_ids.each do |id|
        vulns = <<~EOSQL
          SELECT v.cve, v.description, v.project_id, v.upvotes, v.nickname
          FROM vulnerabilities v
          INNER JOIN vulnerability_tags vt ON v.id = vt.vulnerability_id
          INNER JOIN tags t ON vt.tag_id = t.id
          WHERE t.id = ?
          LIMIT ?
          OFFSET ?
        EOSQL
        sanitizedQuery = ActiveRecord::Base.sanitize_sql([vulns, id, limit, offset])
        results = ActiveRecord::Base.connection.execute(sanitizedQuery)
        results.each do |result|
          allResults << result
        end
      end
      allResults = allResults.to_a


    elsif similarity_action == 'lessons'
      #Get CWE ID
      lesson_id = <<~EOSQL
        SELECT t.id
        FROM vulnerabilities v
        INNER JOIN vulnerability_tags vt ON v.id = vt.vulnerability_id
        INNER JOIN tags t ON vt.tag_id = t.id
        WHERE v.cve = ? AND starts_with(t.name, 'Lesson')
      EOSQL
      sanitizedQuery = ActiveRecord::Base.sanitize_sql([lesson_id, cve])
      results = ActiveRecord::Base.connection.execute(sanitizedQuery);
      lesson_ids = results.map { |result| result['id'] }
      #Get all vulnerabilities with the same CWE ID
      allResults = Set.new
      lesson_ids.each do |id|
        vulns = <<~EOSQL
          SELECT v.cve, v.description, v.project_id, v.upvotes, v.nickname
	        FROM vulnerabilities v
	        INNER JOIN vulnerability_tags vt ON v.id = vt.vulnerability_id
	        INNER JOIN tags t ON vt.tag_id = t.id
	        WHERE t.id = ?
          LIMIT ?
          OFFSET ?
        EOSQL
        sanitizedQuery = ActiveRecord::Base.sanitize_sql([vulns, id, limit, offset])
        results = ActiveRecord::Base.connection.execute(sanitizedQuery)
        results.each do |result|
          allResults << result
        end
      end
      allResults = allResults.to_a

    end

  end

end
