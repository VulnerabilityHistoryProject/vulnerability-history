class Vulnerability < ApplicationRecord
  has_many :vccs, foreign_key: 'vulnerability_id'
  has_many :fixes, foreign_key: 'vulnerability_id'
  has_many :vulnerability_tags, foreign_key: 'vulnerability_id'
  has_many :tags, through: :vulnerability_tags
  has_many :article_vulnerabilities, foreign_key: 'vulnerability_id'
  has_many :articles, through: :article_vulnerabilities
  belongs_to :project

  # A vulnerability can be an event detail.
  # e.g. Bounty or Announced events
  # This relation is here, but we don't really use it on
  # vulnerabilities#index. Instead, we use the next one below.
  # has_many :events, as: :detail

  # A vulnerability also lots of events associated with it, including
  # those that don't have this vulnerability as a detail.
  # e.g. Edits, Releases, etc.
  # This is an explicit association set in the event generator
  has_many :vulnerability_events
  has_many :events, through: :vulnerability_events

  def self.list_all(short_descriptions)
    @vs = Vulnerability.
      left_outer_joins(:tags).
      joins(:project).
      select("vulnerabilities.id as id").
      select("vulnerabilities.cve as cve").
      select("vulnerabilities.announced").
      select("vulnerabilities.upvotes").
      select("vulnerabilities.nickname").
      select("max(projects.name) AS project_name").
      select("max(projects.subdomain) AS subdomain").
      select("STRING_AGG(tags.name,', ') AS tag_names").
      select("JSON_AGG(JSON_BUILD_OBJECT(
              'tag_name', tags.name,
              'tag_shortname', tags.shortname,
              'tag_color', tags.color,
              'tag_icon', tags.icon
              )) AS tag_json").
      group('vulnerabilities.id').
      order('vulnerabilities.upvotes desc')
    if short_descriptions
      @vs.select("
        substring(vulnerabilities.description from 0 for 140) || '...'
        as short_desc
      ")
    else
      @vs.select('vulnerabilities.description as description')
    end
  end

  def self.curated
    where("notes -> 'curated' = 'true'")
  end

  def tags_by_name
    tags.order(name: :asc).
         includes(:vulnerability_tags).
         select('
           tags.id,
           tags.name,
           tags.color,
           vulnerability_tags.note
          ')
  end

end
