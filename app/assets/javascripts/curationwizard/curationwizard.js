import $ from "jquery";
import Toastify from "toastify-js";
import "toastify-js/src/toastify";
const { CweManager } = require("cwe-sdk");
import "select2/dist/js/select2";

function loadProgress() {
  let wizardStatus = JSON.parse(window.localStorage.getItem("VHPWizardStatus"));
  console.log(wizardStatus);
}

function saveProgress(obj) {
  let wizardProgressObj = obj;
  console.log(wizardProgressObj);

  window.localStorage.setItem(
    "VHPWizardStatus",
    JSON.stringify(wizardProgressObj)
  );
}

async function loadQuestions(project) {
  try {
    var questionsToLoad = await fetch(
      "curationwizard/questions?project=" + project
    )
      .then((response) => response.json())
      .then((data) => {
        buildQuestion(project, data);
      });
  } catch (error) {
    console.log(error);
  }
}
async function CheckForChildren(field) {
  //TODO check for nested fields
  return true;
}
async function buildQuestion(project, questions) {
  let numericValidation = "";
  let fieldHTML = "";
  questions.forEach((q) => {
    let defaultValue = q.defaultValue ? q.defaultValue.toString() : "";

    switch (q.type) {
      case "string":
      case "input":
      case "number":
        fieldHTML +=
          "<label for='" +
          q.label.toString() +
          "'>" +
          q.label.toString() +
          (q.tooltipText != null
            ? '<i class="fa fa-question-circle" data-toggle="tooltip" data-position="right" title="' +
              q.tooltipText +
              '"></i>'
            : "") +
          '</label><input data-fieldname="' +
          q.name.toString() +
          '" ' +
          numericValidation +
          ' type="text" value="' +
          defaultValue +
          '" />';
        //fieldHTML += CheckForChildren(q.name.toString());
        break;
      case "date":
        fieldHTML +=
          "<label for='" +
          q.label.toString() +
          "'>" +
          q.label.toString() +
          (q.tooltipText != null
            ? '<i class="fa fa-question-circle" data-toggle="tooltip" data-position="right" title="' +
              q.tooltipText +
              '"></i>'
            : "") +
          '</label><input data-fieldname="' +
          q.name.toString() +
          '" ' +
          numericValidation +
          ' type="date" value="' +
          defaultValue +
          '" />';
        //fieldHTML += CheckForChildren(q.name.toString());
        break;

      case "json":
        fieldHTML +=
          "<label>" +
          q.label.toString() +
          " (JSON)" +
          (q.tooltipText != null
            ? '<i class="fa fa-question-circle" data-toggle="tooltip" data-position="right" title="' +
              q.tooltipText +
              '"></i>'
            : "") +
          "</label><textarea data-fieldname='" +
          q.name.toString() +
          "' " +
          numericValidation +
          " >" +
          JSON.stringify(defaultValue) +
          "</textarea>";
        break;

      case "textarea":
        fieldHTML +=
          "<label>" +
          q.label.toString() +
          (q.tooltipText != null
            ? '<i class="fa fa-question-circle" data-toggle="tooltip" data-position="right" title="' +
              q.tooltipText +
              '"></i>'
            : "") +
          "</label><textarea data-fieldname='" +
          q.name.toString() +
          "'>" +
          defaultValue +
          "</textarea>";
        fieldHTML += CheckForChildren(q.name.toString());
        break;

      case "wysiwyg":
        fieldHTML +=
          "<label>" +
          q.label.toString() +
          (q.tooltipText != null
            ? '<i class="fa fa-question-circle" data-toggle="tooltip" data-position="right" title="' +
              q.tooltipText +
              '"></i>'
            : "") +
          '</label><textarea class="editor" data-fieldname="' +
          q.name.toString() +
          '">' +
          defaultValue +
          "</textarea>";
        fieldHTML += CheckForChildren(q.name.toString());
        break;

      case "select":
        fieldHTML +=
          "<label>" +
          q.label.toString() +
          (q.tooltipText != null
            ? '<i class="fa fa-question-circle" data-toggle="tooltip" data-position="right" title="' +
              q.tooltipText +
              '"></i>'
            : "") +
          "</label>";
        fieldHTML +=
          '<select data-fieldname="' +
          q.name.toString() +
          '" ' +
          (q.SelectMultiple === true ? "multiple" : "") +
          (q.Required === true ? "required" : " ") +
          (q.AllowClear === true ? "data-allowclear='true' " : "") +
          (q.EnableCustomInput === true ? "data-enablecustominput" : "") +
          ">";

        if (q.SelectMultiple != true) {
          fieldHTML += `<option value="">Select One</option>`;
        }
        $.each(q.Options, function (k, v) {
          //console.log(k,v);
          fieldHTML +=
            '<option value="' +
            this.Value +
            '" ' +
            (this.Value.toString() === defaultValue ? "selected" : "") +
            ">" +
            this.Label +
            "</option>";
        });
        fieldHTML += "</select>";
        fieldHTML += CheckForChildren(q.name.toString());
        break;

      case "checkbox":
        var groupName = q.name.toString();
        var tooltipText = q.tooltipText;
        fieldHTML +=
          "<label style='display:none;'>" + q.label.toString() + "</label>";
        $.each(q.Options, function (k, v) {
          var defaultChecked = this.Value === defaultValue ? "checked" : "";
          fieldHTML += '<div class="form-check">';
          fieldHTML +=
            '<label class="form-check-label"><input class="form-check-input" data-fieldname="' +
            groupName +
            '" type="checkbox" value="' +
            this.Value +
            '" ' +
            defaultChecked +
            ">" +
            this.Label +
            (tooltipText != null
              ? '<i class="fa fa-question-circle" data-toggle="tooltip" data-position="right" title="' +
                tooltipText +
                '"></i>'
              : "") +
            "</label>";
          fieldHTML += "</div>";
          fieldHTML += CheckForChildren(q.name.toString());
        });
        break;

      case "radio":
        var groupName = q.name.toString();
        fieldHTML +=
          "<label>" +
          q.label.toString() +
          (q.tooltipText != null
            ? '<i class="fa fa-question-circle" data-toggle="tooltip" data-position="right" title="' +
              q.tooltipText +
              '"></i>'
            : "") +
          "</label>";
        $.each(q.Options, function (k, v) {
          fieldHTML += '<div class="form-check">';
          fieldHTML +=
            '<label class="form-check-label"><input class="form-check-input" data-fieldname="' +
            groupName +
            '" name="' +
            this.groupName +
            '" type="radio" value="' +
            this.Value +
            '">' +
            this.Name +
            "</label>";
          fieldHTML += "</div>";
        });
        fieldHTML += CheckForChildren(q.name.toString());
        break;
      case "cwe-selector":
        fieldHTML +=
          "<label>" +
          q.label.toString() +
          (q.tooltipText != null
            ? '<i class="fa fa-question-circle" data-toggle="tooltip" data-position="right" title="' +
              q.tooltipText +
              '"></i>'
            : "") +
          "</label>";
        fieldHTML +=
          '<span id="cwe-id-label" class="label secondary">CWE: </span> <select data-fieldname="' +
          q.name.toString() +
          '" id="' +
          q.id.toString() +
          '" class="cell small-6" aria-describedby="cwe-id-label"></select>';

        fieldHTML += "</select>";
        fieldHTML += CheckForChildren(q.name.toString());
        break;

      default:
        fieldHTML +=
          '<label>Unknown field<small>(Unknown Field Type)</small></label><input data-fieldname="' +
          q.name.toString() +
          '" type="text" value="' +
          JSON.stringify(q) +
          '" />';
        break;
    }
    if (q.instructions) {
      fieldHTML += '<span id="single-text-desc">' + q.instructions + "<span>";
    }
    document.getElementById("curationTool").setAttribute("class", "");
    document.getElementById("curationTool").innerHTML =
      "<div class='question'>" + fieldHTML + "</div>";
    bindCweSelector();
  });
}
function saveQuestion(questionId, value) {}

function bindCweSelector() {
  const cweManager = new CweManager();
  const result = cweManager.isChildOf({ weaknessId: "117", parentId: "116" });

  //Software Development CWE Category Seeding
  const cweDictArray = Object.values(cweManager.cweDictionary);
  const sdc = [
    ["API/Function Errors", "1228"],
    ["Audit/Logging Errors", "1210"],
    ["Authentication Errors", "1211"],
    ["Authorization Errors", "1212"],
    ["Bad Coding Practices", "1006"],
    ["Behavioral Problems", "438"],
    ["Business Logic Errors", "840"],
    ["Communication Channel Errors", "417"],
    ["Complexity Issues", "1226"],
    ["Concurrency Issues", "557"],
    ["Credentials Management Errors", "255"],
    ["Cryptographic Issues", "310"],
    ["Key Management Errors", "320"],
    ["Data Integrity Issues", "1214"],
    ["Data Processing Errors", "19"],
    ["Data Neutralization Issues", "137"],
    ["Documentation Issues", "1225"],
    ["File Handling Issues", "1219"],
    ["Encapsulation Issues", "1227"],
    ["Error Conditions, Return Values, Status Codes", "389"],
    ["Expression Issues", "569"],
    ["Handler Errors", "429"],
    ["Information Management Errors", "199"],
    ["Initialization and Cleanup Errors", "452"],
    ["Data Validation Issues", "1215"],
    ["Lockout Mechanism Errors", "1216"],
    ["Memory Buffer Errors", "1218"],
    ["Numeric Errors", "189"],
    ["Permission Issues", "275"],
    ["Pointer Issues", "465"],
    ["Privilege Issues", "265"],
    ["Random Number Issues", "1213"],
    ["Resource Locking Problems", "411"],
    ["Resource Management Errors", "399"],
    ["Signal Errors", "387"],
    ["State Issues", "371"],
    ["String Errors", "133"],
    ["Type Errors", "136"],
    ["User Interface Security Issues", "355"],
    ["User Session Errors", "1217"],
  ];
  const softwareDevelopmentCategories = sdc.map((s, i) => {
    return {
      id: s[1],
      text: s[0],
      children: [],
    };
  });
  softwareDevelopmentCategories.push({
    id: "2000",
    text: "Uncategorized",
    children: [],
  });

  const softwareDevelopmentViews = softwareDevelopmentCategories.map((cat) => {
    cweDictArray.map((cwe) => {
      const cweId = cwe.attr["@_ID"];
      cweManager.cweMemberships.map((mem) => {
        if (mem.weaknessId == cweId) {
          if (mem.memberships.includes(cat.id)) {
            cat.children.push({
              id: cweId,
              text: `#${cwe.attr["@_ID"]}: ${cwe.attr["@_Name"]}`,
            });
          }
        }
      });
    });
    return cat;
  });

  cweDictArray.map((cwe) => {
    const cweId = cwe.attr["@_ID"];
    const inSdv = softwareDevelopmentViews.map(({ children }) => {
      const inChildren = children.forEach((c) => {
        if (c.id === cweId) {
          return true;
        } else {
          return false;
        }
      });
      if (!inChildren) {
        return false;
      } else {
        return true;
      }
    });
    if (!inSdv.includes(true)) {
      softwareDevelopmentCategories.map((sdc, i) => {
        if (sdc.id === "2000") {
          sdc.children.push({
            id: cweId,
            text: `#${cwe.attr["@_ID"]}: ${cwe.attr["@_Name"]}`,
          });
        }
      });
    }
  });

  $("#cwe-id").select2({
    placeholder: {
      id: "-1",
      text: "--- Please select a CWE ---",
      selected: "selected",
    },
    allowClear: true,
    data: softwareDevelopmentViews,
  });
  $("#cwe-id").on("change", function () {
    let cweNum = this.value;
    const cweSelection = cweDictArray.filter(
      (cweItem) => cweItem.attr["@_ID"] === cweNum
    )[0];
    const yamlField = document.getElementById("YAMLOutput");
    yamlField.innerText = cweSelection.attr["@_ID"];
    Toastify({
      text: "CWE added to YAML.",
      duration: 3000,
      close: true,
      gravity: "top",
      position: "right",
      stopOnFocus: true,
      style: {
        background: "linear-gradient(to right, #00b09b, #96c93d)",
      },
      onClick: function () {
        $("#offCanvas").foundation(
          "open",
          event,
          $("button").data("toggle", "offCanvas")
        );
      },
    }).showToast();
  });
}
export default function curationWizard() {
  /* QUESTION PATH*/
  const projects = document.querySelectorAll("#curationTool .card");
  for (let i = 0; i < projects.length; i++) {
    projects[i].addEventListener(
      "click",
      async function () {
        const project = this.dataset.project;
        let questions = await loadQuestions(project);
        //console.log(questions);
      },
      false
    );
  }

  $("#open-menu").on("click", function () {
    setTimeout(function () {
      $("#YAMLOutput").trigger("focus");
    }, 1000);
  });

  $("#CopyYAML").on("click", function () {
    const yamlField = document.getElementById("YAMLOutput");
    const yamlOutput = yamlField.value;
    // Select the text field
    yamlField.select();
    yamlField.setSelectionRange(0, yamlOutput.length); // For mobile devices

    // Copy the text inside the text field
    navigator.clipboard.writeText(yamlOutput);
    Toastify({
      text: "YAML copied to clipboard",
      duration: 3000,
      close: true,
      gravity: "top", // `top` or `bottom`
      position: "right", // `left`, `center` or `right`
      stopOnFocus: true, // Prevents dismissing of toast on hover
      style: {
        background: "linear-gradient(to right, #00b09b, #96c93d)",
      },
      onClick: function () {}, // Callback after click
    }).showToast();
  });
}
