import * as d3 from 'd3'
import _ from 'lodash'

const defaultTags = {
	x: 'project',
	y: 'lifetime',
}
const tag_correlations_url = '/api/insights/tag-correlations';
const tags_url = "/api/tags";

export default function onCorrelogram() {
	$.when(
		// , data: defaultTags
		$.ajax({dataType: 'json', url: `${tag_correlations_url}?x=project&y=lifetime`}),
		$.ajax({dataType: "json", url: tags_url })
	).then(load_succeded, load_failed);
}

const TAG_TYPE_OPTIONS = [
	"cwe",
	"dependency",
	"discovered",
	"discussion",
	"feature",
	"fix",
	"language",
	"lesson",
	"lifetime",
	"location",
	"mistake",
	"project",
	"severity",
	"stacktrace",
	"subsystem",
	"vcc",
]

function load_succeded(corr_response, tags_response){
	const corr_data = corr_response[0]
	const tags = tags_response[0]
	console.log("INITIAL LOAD DONE!")
	console.log(corr_data)
	new Correlogram(tags).redraw(corr_data)
}

function load_failed(_corr_resp, _tags_resp) {
	//TBD
	console.log("failed!")
	console.log(_corr_resp)
	console.log(_tags_resp)
}

class Correlogram {
	constructor(tags){

		this.tags = tags

		this.selected_r = -1
		this.selected_c = -1
	}

	convertAdjacency(){
		const matrix = {}
		this.rowTags.forEach((rowTag) => {
			matrix[rowTag] = {}
			this.colTags.forEach((colTag) => {
				matrix[rowTag][colTag] = 0
			})
		})
		this.corr_data.forEach((d) => { matrix[d.tag1][d.tag2] = d.num_vulns })
		return matrix
	}

	buildOptions(viz) {
		const select1 = viz.append("select").attr("id", "tag1")
		TAG_TYPE_OPTIONS.forEach( (t) =>
			select1.append("option")
				.attr("value", t)
				.text(t)
		)
		const select2 = viz.append("select").attr("id", "tag2")
		TAG_TYPE_OPTIONS.forEach( (t) =>
			select2.append("option")
			.attr("value", t)
			.text(t)
		)

		$(`#tag1 option[value="${defaultTags.x}"]`).attr("selected", true)
		$(`#tag2 option[value="${defaultTags.y}"]`).attr("selected", true)

		$("#tag1").on("change", () => this.update())
		$("#tag2").on("change", () => this.update())
	}

	update() {
		$.ajax({
			dataType: 'json',
			url: tag_correlations_url,
			data: {
				x: $('#tag1').val(),
				y: $('#tag2').val(),
			}
		}).done((data) => this.redraw(data) )
	}

	redraw(corr_data){
		this.corr_data = corr_data
		this.rowTags = _.uniq(this.corr_data.map((r) => r.tag1))
		this.colTags = _.uniq(this.corr_data.map((r) => r.tag2))
		this.maxCount = _.max(this.corr_data.map((d) => d.num_vulns))
		const width = 1000
		const height = 1000
		const viz = d3.select('#tag-correlogram')
		$('#tag-correlogram').empty()
		this.buildOptions(viz)
		const svg = viz.append("svg")
						.attr("width", "100%")
						.attr("height", "100%")
						.attr("viewBox", `0 0 ${width} ${height}`)

		const xStart = 225
		const yStart = 125
		const cell_w = (width - xStart) / this.colTags.length
		const cell_h = (height - yStart) / this.rowTags.length
		const matrix = this.convertAdjacency()
		const radiusScale = d3.scaleLinear()
								.domain([0,this.maxCount])
								.range([0, 0.4 * Math.min(cell_w, cell_h)])
		this.rowTags.forEach((row, r) => {
			this.colTags.forEach((col, c) => {
				const x = xStart + c * cell_w
				const y = yStart + r * cell_h
				const cx = x + cell_w / 2
				const cy = y + cell_h / 2
				const g = svg.append("g").attr("class", "cor_cell")
				g.append("rect")
					.attr("x", x)
					.attr("y", y)
					.attr("width", cell_w)
					.attr("height", cell_h)
					.style("stroke", "#f00")
					.style("fill", "#fff")
				g.append("circle")
					.attr("cx", cx)
					.attr("cy", cy)
					.attr("r", radiusScale(matrix[row][col]))
					.style("fill","#ccc")
				g.append("text")
					.attr("x", cx)
					.attr("y", cy)
					.attr("text-anchor", "middle")
					.attr("font-size", "1.75em")
					.text(matrix[row][col])
			})
		})
		const colLabels = svg.append("g").attr("class", "col-labels")
		this.colTags.forEach((col, c) => {
			const x = xStart + c * cell_w + cell_w / 2
			const y = yStart
			colLabels.append("text")
					.attr("x", x)
					.attr("y", y)
					.attr("text-anchor", "left")
					.attr("transform", `rotate(-20, ${x}, ${y})`)
					.attr("font-size", "1.75em")
					.text(col)
		})
		this.rowTags.forEach((row, r) => {
			const x = xStart
			const y = yStart + r * cell_h  + cell_h / 2
			colLabels.append("text")
					.attr("x", x)
					.attr("y", y)
					.attr("text-anchor", "end")
					// .attr("transform", `rotate(-15, ${x}, ${y})`)
					.attr("font-size", "1.75em")
					.text(row)
		})
	}




}