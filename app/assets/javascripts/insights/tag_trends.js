import * as d3 from 'd3'
import { event } from 'jquery';

export default function TagTrends() {

	this.setData = function (data) {
		//add some stuff to mess with the formatting of the json
		this.data = data;
		return data;
	};
	this.init = function () {
		var margin = {top: 10, right: 10, bottom: 10, left: 10},
			width = 750 - margin.left - margin.right,
			height = 780 - margin.top - margin.bottom;
		
		var d3Sankey = require("d3-sankey");
		var d3 = require("d3");
		
		var svg = d3.select("#tag-trends2").append("svg")
			.attr("width", width + margin.left + margin.right)
			.attr("height", height + margin.top + margin.bottom)
			.append("g")
			.attr("transform",
				"translate(" + margin.left + "," + margin.top + ")");
			
			//Color scale
		var color = d3.scaleOrdinal(d3.schemeCategory10);

		var sankey_diagram = d3Sankey.sankey()
			.nodeWidth(36)
			.nodePadding(260)
			.size([width, height]);
		var graph = sankey_diagram(require("./test.json"));

		sankey_diagram
			.nodes(graph.nodes)
			.links(graph.links);

		// add in the links
		var link = svg.append("g").selectAll(".link")
			.data(graph.links)
			.enter().append("path")
			.attr("class", "link")
			.attr("d", d3Sankey.sankeyLinkHorizontal())
			.style("stroke-width", function (d) { return Math.max(1, d.value); })
			.sort(function (a, b) { return (b.y1 - b.y0 ) - (a.y1 - a.y0); })
			.append("title")
			.text(function (d) { return d.source.name + " â†’ " + d.target.name + "\n" + "Total Vulnerabilities: " + d.value; });


		//add in the nodes
		var node = svg.append("g").selectAll(".node")

			.data(graph.nodes)
			.enter().append("g")
			.attr("class", "node")
			.attr("transform", function (d) {  return "translate(" + (d.x0) + "," + (d.y0) + ")"; })
			.call(d3.drag()
				.subject(function (d) { return d; })
				.on("start", function () { this.parentNode.appendChild(this); })
				.on("drag", dragmove));

		// add the rectangles for the nodes
		node.append("rect")
			.attr("height", function (d) { console.log(d); return (d.y1 - d.y0); })
			.attr("width", sankey_diagram.nodeWidth())
			.style("fill", function (d) { return d.color = color(d.name.replace(/ .*/, "")); })
			.style("stroke", function (d) { return d3.rgb(d.color).darker(2); })
			
			//hover text
			.append("title")
			.text(function (d) { return d.name + "\n" + "Total: " + d.value; });

		// add in the title for the nodes
		node.append("text")
			.attr("x", -6)
			.attr("y", function (d) { return Math.abs((d.y1 - d.y0) / 2); })
			.attr("dy", ".35em")
			.attr("text-anchor", "end")
			.attr("transform", null)
			.text(function (d) { return d.name; })
			.filter(function (d) { return (d.x0) < width / 2; })
			.attr("x", 6 + sankey_diagram.nodeWidth())
			.attr("text-anchor", "start");

		// the function for moving the nodes
		function dragmove(d) {
			d3.select(this)
				.attr("transform",
					"translate("
					+ d.x0 + ","
					+ (d.y0 = Math.max(0, Math.min(height - (d.y1 - d.y0), d3.event.y))
					) + ")");
			sankey.relayout();
			link.attr("d", d3Sankey.sankeyLinkHorizontal());
		}

		function nodePosition(node) {
			return {
				x: round(node.x0),
				dx: round(node.x1 - node.x0),
				y: round(node.y0),
				dy: round(node.y1 - node.y0)
			};
		}

		function linkPosition(link) {
			return{
				source: nodePosition(link.source),
				target: nodePosition(link.target),
				dy: round(link.width),
				sy: round(link.y0 - link.source.y0 - link.width / 2),
				ty: round(link.y1 - link.target.y0 - link.width / 2)
			};
		}

		function round(x) {
			return Math.round(x * 10) / 10;
		}
	};
}

export function onInsightsTagTrends() {
	//const sankeyChart = new TagTrends().works();
	const sankeyChart = new TagTrends().init();
	d3.select('#tag-trends').append("p").html("I'm in d3!")
}





