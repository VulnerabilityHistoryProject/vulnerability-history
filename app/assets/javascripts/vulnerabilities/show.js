function initHTimeline(){
  window.filters = [];
  settings = {
    margin: { top: 10, bottom: 45, left: 60, right: 60},
    minChicHeight: 10,
    maxChicHeight: 15,
    chicWidth: 20,
    cLowerLim: 15,
    cUpperLim: 25,
    zoom: false,
    hiddenTypes: [],
    xAxisHeight: 43,
    fade_ms: 700,
  }

  var h = new HorizontalTimeline(settings);
  h.init();

  // bindDataToggleCallback(h, sEvents, cLowerLim, cUpperLim, minChicHeight, maxChicHeight, chicWidth, zoom,
  //     minDate, maxDate, eVcc, eVuln, lFix, height, width, margin);
  // bindCdTimelineEvents();
  // bindWindowEvents();
  // bindScrollEvents();
  // bindZoomEvents(h, sEvents, cLowerLim, cUpperLim, minChicHeight, maxChicHeight, chicWidth, minDate, maxDate,
  //     eVcc, eVuln, lFix, height, width, margin);
  return h;
}

// Find the following dates:
//   * minDate - maximum vulnerability event date, used in zoom-out
//   * maxDate - maximum vulnerability event date, used in zoom-out
//   * minZoomDate - earliest Vcc
//   * maxZoomDate - latest Fix
//   * zoom comment - title text of what you're zooming into
function findImportantDates(vuln_events){
  minDate = vuln_events[0].date;
  maxDate = vuln_events[vuln_events.length - 1].date;
  minZoomDate = minDate; // might be overwritten
  maxZoomDate = maxDate; // might be overwritten
  vuln_events.forEach(function(e) {
    if(e.type == 'vcc'){
      minZoomDate = (e.date > minZoomDate) ? e.date : minZoomDate;
    } else if (e.type == 'fix') {
      maxZoomDate = (e.date < maxZoomDate) ? e.date : maxZoomDate;
    }
  });
  return {
    minDate: minDate,
    maxDate: maxDate,
    minZoomDate: minZoomDate,
    maxZoomDate: maxZoomDate,
    zoomComment: 'Zoom to the vulnerability origins and fixes'
  }
}

function populateHTimeline(hTimeline, vuln_events) {
    if(vuln_events.length == 0) { return; }
    vuln_events = sortEvents(vuln_events);
    importantDates = findImportantDates(vuln_events);
    hTimeline.update(vuln_events, importantDates);
}

function populateVTimeline(vuln_events) {
  for (let e of vuln_events) {
    block = $('#vtimeline-template').clone();
    block.attr('id', 'event_block_' + e.id);
    block.attr('data-id', e.id);
    block.find('.vtimeline-anchor').attr('id',"event_" + e.id);
    block.find('#title').html(e.title);
    block.find('#description').html(e.description);
    block.find('#isodate').html(e.date);
    block.find('#pretty_date').html(moment(e.date).format('MMMM DD, YYYY'));
    block.find('#timeline-icon').html(e.style_icon);
    block.find('.vtimeline-img').css('background-color', e.style_color);
    $('#vtimeline').append(block);
    block.show();
  }
  $('#vtimeline-template').remove(); // remove so we start upper-left
}



$( document ).ready( function() {
  var hTimeline = initHTimeline();
  var events = []; // global to the page for resizing

  $.ajax({
    url: "/api/vulnerabilities/" + vulnerability_id + "/events",
    dataType: 'json',
  }).done(function(vuln_events){
    $('#vtimeline_loading').remove();
    populateVTimeline(vuln_events);
  }).done(function(vuln_events) {
    $('#loading').remove();
    events = [ // temporary
      new Event1(1, 'Event 1', 'hi.', new Date('2013-03-05T05:11:22.000+00:00'), 'Vulnerability', '#f0f', 'icon'),
      new Event1(2, 'Event 2', 'hi.', new Date('2014-03-05T05:11:22.000+00:00'), 'Fix', '#f0f', 'icon'),
      new Event1(3, 'Event 3', 'hi.', new Date('2014-03-05T05:11:22.000+00:00'), 'Fix', '#ff0', 'icon'),
      new Event1(4, 'Event 4', 'hi.', new Date('2014-03-05T05:11:22.000+00:00'), 'Fix', '#ccc', 'icon'),
      new Event1(5, 'Event 5', 'hi.', new Date('2015-03-05T05:11:22.000+00:00'), 'Vcc', '#cfc', 'icon'),
      new Event1(6, 'Event 6', 'hi.', new Date('2016-03-05T05:11:22.000+00:00'), 'Vulnerability', '#cfc', 'icon'),
    ];
    populateHTimeline(hTimeline, events);
  });

  window.onresize = function() {
    hTimeline = initHTimeline();
    populateHTimeline(hTimeline, events);
  }

});
