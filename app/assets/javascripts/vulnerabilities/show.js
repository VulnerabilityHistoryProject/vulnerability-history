function initHTimeline(defaultZoom = 'vcc_to_fix'){
  window.filters = [];

  settings = {
    margin: { top: 10, bottom: 45, left: 60, right: 60},
    chicHeight: 14,
    chicWidth: 20,
    cLowerLim: 13,
    cUpperLim: 15,
    hiddenTypes: [],
    xAxisHeight: 43,
    fade_ms: 700,
    defaultZoomValue: defaultZoom,
  }

  var h = new timelines(settings);
  h.init();
  return h;
}

/**
 * sort the events by date oldest to newest
 * @param events - array of hashes with a "date" object
 * @returns {*} - array of sorted event hashes
 */
function sortEvents(events) {
    events.sort(function(a, b) {
        var a = new Date(a.date);
        var b = new Date(b.date);
        return b.getTime() - a.getTime();
    });
    return events;
}

function populateHTimeline(hTimeline, vulnEvents) {
  if(vulnEvents.length == 0) { return; }
  vulnEvents = sortEvents(vulnEvents);

  var zoomLevels = new Map();
  zoomLevels.set('VCC to Fix', 'vcc_to_fix');
  zoomLevels.set('First to Last', 'first_to_last');
  zoomLevels.set('All Time', 'all');

  hTimeline.populateTimelines(vulnEvents, zoomLevels);

  $('body').on('change', '.htimeline_toggle', () => hTimeline.filterToggled());

  // The dropdown list isn't guaranteed to exist at this point, so we put the
  // event handler on the body with an additional selector of "#zoom-dropdown"
  // that will be checked only after the event is triggered.
  $('body').on('change', '#zoom-dropdown', function(event) {
    switch (event.currentTarget.value) {
      case 'all':
        hTimeline.zoomChanged(new Date(0), new Date());
        break;
      case 'vcc_to_fix':
        var minDate = vulnEvents[vulnEvents.length - 1].date;
        var maxDate = vulnEvents[0].date;

        for (var i = 0; i < vulnEvents.length; i++) {
          if (vulnEvents[i].event_type == 'fix') {
            // Get last fix
            maxDate = new Date(vulnEvents[i].date);
            break;
          }
        }
        for (var i = vulnEvents.length - 1; i >= 0; i--) {
          if (vulnEvents[i].event_type == 'vcc') {
            // Get first VCC
            minDate = new Date(vulnEvents[i].date);
            break;
          }
        }

        hTimeline.zoomChanged(minDate, maxDate);
        break;
      case 'first_to_last':
        for (var i = vulnEvents.length - 1; i >= 0; i--) {
          var type = vulnEvents[i].event_type;
          if (type != 'Same Directory' && type != 'Same CWE') {
            var minDate = vulnEvents[i].date;
            break;
          }
        }

        var maxDate = vulnEvents[0].date;
        hTimeline.zoomChanged(minDate, maxDate);
        break;
      default:
        hTimeline.zoomChanged(new Date(0), new Date());
    }
  });

  $('#zoom-dropdown').change();
}

function populateVTimeline(vulnEvents) {
  vulnEvents = sortEvents(vulnEvents);
  for (let e of vulnEvents) {
    block = $('#vtimeline-template').clone();
    block.attr('id', 'event_block_' + e.id);
    block.attr('data-id', e.id);
    block.attr('data-type', e.event_type);
    block.find('.vtimeline-anchor').attr('id',"event_" + e.id);
    block.find('#title').html(e.title);
    block.find('#description').html(e.description);
    block.find('#description').addClass('shortened'); // applies fading
    block.find('#isodate').html(e.date);
    const event_date = moment(e.date,'YYYY-MM-DD hh:mm:ss Z')
                       .format('MMMM DD, YYYY');
    block.find('#pretty_date').html(event_date);
    block.find('#timeline-icon').html(e.style_icon);
    block.find('.vtimeline-img').css('background-color', e.style_color);
    $('#vtimeline').append(block);
    block.show();

    // Hide "See More" and "See Less" elements if the description
    // is small enough or if there is a trivial amount of overflow
    desc = block.find('#description');
    if (desc.prop('scrollHeight') - desc.prop('clientHeight') < 75) {
      desc.removeClass('shortened');
      desc.css('height', 'initial');
      block.find('.see_more').remove();
      block.find('.see_less').remove();
    }
  }
  $('#vtimeline-template').remove(); // remove so we start upper-left

  // Expand event description when clicked
  $('.see_more').click(function() {
    $(this).attr('hidden', 'true');
    $(this).parent().find('#description').css('height', 'initial');
    $(this).parent().find('#description').toggleClass('shortened');
    $(this).parent().find('.see_less').removeAttr('hidden');
  });

  // Shorten event description when clicked
  $('.see_less').click(function() {
    $(this).attr('hidden', 'true');
    $(this).parent().find('#description').css('height', '');
    $(this).parent().find('#description').toggleClass('shortened');
    $(this).parent().find('.see_more').removeAttr('hidden');
  });
}

$(document).ready( function() {
  var hTimeline = initHTimeline();
  var events = []; // global to the page for resizing

  $.ajax({
    url: "/api/vulnerabilities/" + vulnerability_id + "/events",
    dataType: 'json',
  }).done(function(vulnEvents){
    $('#vtimeline_loading').remove();
    populateVTimeline(vulnEvents);
  }).done(function(vulnEvents) {
    for(let e of vulnEvents) {
        e.date = new Date(e.date); //Rails AR date string to JS date object
        events.push(e); //set to global events
    }
    $('#htimeline-loading').hide();
    populateHTimeline(hTimeline, events);
  });

  window.onresize = function() {
    // Maintain zoom level when resizing
    var zoomValue = $('#zoom-dropdown').val();

    $('#htimeline-loading').show();
    hTimeline = initHTimeline(zoomValue);
    $('#htimeline-loading').hide();
    populateHTimeline(hTimeline, events);
  }

});
