/**
 * Object representation of the horizontal timeline
 *
 * @param events - collection of events from backend
 * @param cLimit (int) - max number of events in a column
 * @param minChicHeight (int) - min height of a chiclet
 * @param maxChicHeight (int) - max height of a chiclet
 * @param chicWidth (int) - width of a chiclet
 * @param zoom (boolean) - zoomed in or out view of horizontal timeline
 * @param eDict (Dict<Date, Array<Event1>>) - dict representing the columns
 *  of the horizontal timeline
 * @param minDate (Date) - absolute minimum date from all events
 * @param maxDate (Date) - absolute maximum date from all events
 * @param eVcc (Date) - date of earliest VCC
 * @param eVuln (Date) - date of earliest vulnerability
 * @param lFix (Date) - date of latest fix
 * @param svgHeight (int) - height of svg
 * @param svgWidth (int) - width of svg
 * @param svgMargin (object) - margins for svg
 * @constructor
 */
function HorizontalTimeline(events, cLimit, minChicHeight, maxChicHeight, chicWidth, zoom, minDate, maxDate, eVcc,
                            eVuln, lFix, svgHeight, svgWidth, svgMargin) {
    //instance variables
    this.events = events;
    this.cLimit = cLimit;
    this.minChicHeight = minChicHeight;
    this.maxChicHeight = maxChicHeight;
    this.chicHeight = maxChicHeight;
    this.chicWidth = chicWidth;
    this.zoom = zoom;
    this.absMinDate = minDate;
    this.absMaxDate = maxDate;
    this.eVcc = eVcc;
    this.eVuln = eVuln;
    this.lFix = lFix;
    this.svgHeight = svgHeight;
    this.svgWidth = svgWidth;
    this.svgMargin = svgMargin;
    this.numCols = width / chicWidth;
    this.validTypes = [];
    this.eDict = {};
    this.svg;

    //methods
    this.toString = function() {
        return 'Events: ' + this.events;
    };

    this.initEDict = function() {
        //initialize the timeline values
        //get the column ids(dates) based on numCols and zoom
        //add them as keys to eDict
    };

    this.generateData = function() {
        //loop through all events (zoom)
            //if the event is within min max dates
                //add them to the eDict with the closest key (date)
                //add the event's type to validTypes;
        return;
    };

    this.calcChicHeight = function() {
        //determine tallest column in eDict
            //if tallest column is greater than cLimit, reduce chicHeight for all columns accordingly
    };


    this.generateTimeline = function() {
        //removeSVG

        //initialize svg

        //plot events
            //loop through eDict columns (keys). y in each column is cumulative for each event. x is cumulative for the keys
                //if event type is release
                    //draw flag
                //else
                    //draw rectangle

        //plot x-axis
        return;
    };

    this.generateFilters = function() {
        //draw filters (see generateTypeSwitches()
        //callback for filters to update horizontal timeline on change
        return;
    };

    this.updateVerticalTimeline = function() {
        //update vertical timeline based on toggled filters
        return;
    };

    this.setup = function() {
        this.initEDict();
        this.generateData();
        this.calcChicHeight();
    }

    this.generate = function() {
        this.generateTimeline();
        this.generateFilters();
        this.updateVerticalTimeline();
    }
}