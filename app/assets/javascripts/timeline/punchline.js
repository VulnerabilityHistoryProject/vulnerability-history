/**
 * Object representation of the punchline used to show levels of activity
 * (e.g., a developer's commit activity)
 *
 * @param chicHeight (int) - height of a chiclet in pixels
 * @param chicWidth (int) - width of a chiclet in pixels
 * @param minDate (Date) - absolute minimum date from all activities
 * @param maxDate (Date) - absolute maximum date from all activities
 * @constructor
 */
function punchline(settings) {
    this.chicHeight = settings.chicHeight;
    this.chicWidth = settings.chicWidth;
    this.iconCornerRadius = 4;
    this.separatorHeight = 3;
    this.min = settings.minDate;
    this.max = settings.maxDate;
    this.xAxisHeight = settings.xAxisHeight;
    this.svg;
    this.x;
    this.y;

    /**
     * Initialize the SVG, but don't draw events yet.
     */
    this.init = function() {
        this.removeSVG();
        this.initSVG();
        this.numCols = Math.floor(this.svgWidth / this.chicWidth) - 1;
        this.fadeInSVG();
    };

    this.removeSVG = function() {
        d3.select("#hPunchline").remove();
    };

    this.initXAxisScale = function() {
        this.x = d3.scaleTime()
                   .domain([1, 53])
                   .range([0, this.svgWidth - this.chicWidth]);
    };

    this.initYAxisScale = function() {
        var delta = this.max.getFullYear() - this.min.getFullYear();
        var maxDomain = delta * this.separatorHeight;
        this.y = d3.scaleLinear()
                   .domain([0, maxDomain])
                   .range([0, this.svgHeight - this.chicHeight]);
    };

    this.initSVG = function() {
        this.svg = d3.select('#horizontal-punchline').append("div")
            .attr("class", "tooltip")
            .style("opacity", 0);

        var totalYears = this.max.getFullYear() - this.min.getFullYear() + 1;
        var pxPerYear = this.chicHeight + this.separatorHeight;
        this.svg = d3.select('#horizontal-punchline').append("svg")
            .attr("id", "hPunchline")
            .attr('opacity', 0)
            // SVG width is dynamic, stretched to container - so not set.
            // SVG height is hardcoded to 6ems (e.g. 256px)
            // viewBox is not used either (unlike our other SVGs)
            // i.e. so our aspect ratio is not fixed at all
            .attr('width', '100%')
            .attr('height', (totalYears * pxPerYear) + "px");

        this.svgWidth = parseInt(this.svg.style('width')); // compute px
        this.svgHeight = parseInt(this.svg.style('height')); // compute px
        this.initXAxisScale();
        this.initYAxisScale();
    };

    // Do a CSS fade in
    this.fadeInSVG = function() {
        d3.select('#hPunchline')
          .transition()
          .duration(750)
          .attr('opacity', 1);
    };

    // Do a CSS fade in
    this.fadeOutSVG = function() {
        d3.select('#hPunchline')
          .transition()
          .duration(750)
          .attr('display', "none");
    };

    this.drawChic = function(date, count = 0) {
        var self = this;
        this.svg.append("svg:rect") // draw the chiclets
            .attr("class", "bin")
            .attr("x", function () {
                // Get the week of the year.
                var xDate = moment(date);
                var xValue = xDate.week();
                // In the event of a wrap-around (like 12/26/2010 being counted
                // as in the first week of 2011), ensure wrap-arounds get
                // displayed in the 53rd week.
                if (xValue == 1 && xDate.date() > 7) {
                    xValue = 53;
                }
                // map through d3's scaleTime(), center on chiclet
                return self.x(xValue);
            })
            .attr("y", function () {
                // map through d3's scaleLinear()
                // each year will be visually separated from the others
                delta = date.getFullYear() - self.min.getFullYear();
                return self.y(delta * self.separatorHeight);
            })
            .attr("width", self.chicWidth - 3) // adjust for gap
            .attr("height", self.chicHeight - 3) // ajdust for gap
            .attr("rx", self.iconCornerRadius)
            .attr("ry", self.iconCornerRadius)
            .attr("fill", (count == 0 ? "lightgray" : "green"))
            .on("mouseenter", function (e) {
                beginWeek = moment(date);
                endWeek = beginWeek.clone().add(6, 'days');
                dateDisplay = beginWeek.format("MM/DD/YYYY") + " - " + endWeek.format("MM/DD/YYYY");
                d3.select(this).attr("stroke", "#000");
                d3.select('#horizontal-punchline div')
                    .transition()
                    .duration(100)
                    .style("opacity", 0.9);
                d3.select('#horizontal-punchline div')
                    .html(dateDisplay + "<br>" + count + " commit(s)")
                    .style("left", (d3.event.pageX - document.getElementById('horizontal-punchline').getBoundingClientRect().x) + "px")
                    .style("top", (d3.event.pageY + 15) + "px");
            })
            .on("mouseleave", function () {
                d3.select(this).attr("stroke", "");
                d3.select('#horizontal-punchline div')
                    .transition()
                    .duration(100)
                    .style("opacity", 0);
            });
    };

    this.plotActivities = function(dates) {
        max = moment(this.max);
        for (var weekDate = moment(this.min); max.isAfter(weekDate); weekDate.add(1, 'weeks')) {
            punch.drawChic(weekDate.toDate(), dates[weekDate.format("YYYY-WW")]);
        }
    }
}
