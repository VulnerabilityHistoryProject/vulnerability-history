/**
 * Object representation of the punchline used to show levels of activity
 * (e.g., a developer's commit activity)
 *
 * @param chicHeight (int) - height of a chiclet
 * @param chicWidth (int) - width of a chiclet
 * @param minDate (Date) - absolute minimum date from all activities
 * @param maxDate (Date) - absolute maximum date from all activities
 * @constructor
 */
function punchline(settings) {
    this.chicHeight = settings.chicHeight;
    this.chicWidth = settings.chicWidth;
    this.iconCornerRadius = 4;
    this.min = settings.minDate;
    this.max = settings.maxDate;
    this.xAxisHeight = settings.xAxisHeight;
    this.svg;
    this.x;
    this.y;

    /**
     * Initialize the SVG, but don't draw events yet.
     */
    this.init = function() {
        this.removeSVG();
        this.initSVG();
        this.numCols = Math.floor(this.svgWidth / this.chicWidth) - 1;
        this.fadeInSVG();
    };

    this.removeSVG = function() {
        d3.select("#hPunchline").remove();
    };

    this.initXAxisScale = function() {
        halfChicWidth = this.chicWidth / 2;
        this.x = d3.scaleTime()
                   .domain([this.min, this.max])
                   .range([halfChicWidth, this.svgWidth - halfChicWidth]);
    };

    this.initYAxisScale = function() {
        this.cLim = Math.floor(this.svgHeight / (this.chicHeight + 1));
        this.y = d3.scaleLinear()
                   .domain([0, this.cLim])
                   .range([this.svgHeight, this.chicHeight]);
    };

    this.initSVG = function() {
        this.svg = d3.select('#horizontal-punchline').append("div")
            .attr("class", "tooltip")
            .style("opacity", 0);

        this.svg = d3.select('#horizontal-punchline').append("svg")
            .attr("id", "hPunchline")
            .attr('opacity', 0)
            // SVG width is dynamic, stretched to container - so not set.
            // SVG height is hardcoded to 16ems (e.g. 256px)
            // viewBox is not used either (unlike our other SVGs)
            // i.e. so our aspect ratio is not fixed at all
            .attr('width', '100%')
            .attr('height', '6em');

        this.svgWidth = parseInt(this.svg.style('width')); // compute px
        this.svgHeight = parseInt(this.svg.style('height')); // compute px
        this.initXAxisScale();
        this.initYAxisScale();
    };

    // Do a CSS fade in
    this.fadeInSVG = function() {
        d3.select('#hPunchline')
          .transition()
          .duration(750)
          .attr('opacity', 1);
    };

    // Do a CSS fade in
    this.fadeOutSVG = function() {
        d3.select('#hPunchline')
          .transition()
          .duration(750)
          .attr('display', "none");
    };

    this.drawChic = function(week, yIndex, date, count = 0) {
        var self = this;
        this.svg.append("svg:rect") // draw the chiclets
            .attr("class", "bin ")
            .attr("x", function () {
                // map through d3's scaleTime(), center on chiclet
                return self.x(week);
            })
            .attr("y", function () {
                // map through d3's scaleLinear()
                // yIndex + 1 to be 1-chiclet above timeline
                return self.y(yIndex) + 1;
            })
            .attr("width", self.chicWidth - 3) // adjust for gap
            .attr("height", self.chicHeight - 3) // ajdust for gap
            .attr("rx", self.iconCornerRadius)
            .attr("ry", self.iconCornerRadius)
            .attr("fill", (count == 0 ? "lightgray" : "green"))
            .on("mouseenter", function (e) {
                d3.select(this).attr("stroke", "#000");
                d3.select('#horizontal-punchline div')
                    .transition()
                    .duration(100)
                    .style("opacity", 0.9);
                d3.select('#horizontal-punchline div')
                    .html(date + "<br>" + count + " commits")
                    //.style("left", (d3.mouse(this)[0] + $('#horizontal-punchline div').attr("left")) + "px")
                    //.style("top", (d3.mouse(this)[1] + $('#horizontal-punchline div').attr("top")) + "px");
                    //.style("top", (d3.event.pageY - $('#horizontal-punchline div').attr("top")) + "px")
                    .style("left", (d3.event.pageX - document.getElementById('horizontal-punchline').getBoundingClientRect().x) + "px")
                    .style("top", (d3.event.pageY) + "px");
            })
            .on("mouseleave", function () {
                d3.select(this).attr("stroke", "");
                d3.select('#horizontal-punchline div')
                    .transition()
                    .duration(100)
                    .style("opacity", 0);
            });
    };

    this.plotActivities = function(dates) {
        // 52 rows, 7 columns
        for (let date = moment(this.min); date.diff(this.max) < 0; date.add(7, 'days')) {
            for (var y = 1; y <= 7; y++) {
                s = moment(date.clone().add(y, 'days')).format("MM/DD/YYYY");
                punch.drawChic(date, y, s, dates[s]);
            }
        }
    }
}
