/**
 * bind event listeners to the filters
 */
function bindDataToggleCallback(h, sEvents, cLowerLim, cUpperLim, minChicHeight, maxChicHeight, chicWidth, zoom,
                                minDate, maxDate, eVcc, eVuln, lFix, height, width, margin) {
    $(document).on("change", ".data-toggles", function () {
        var zoom;
        if ($('#zoom-bool').val() == "true") {
            zoom = true;
        } else {
            zoom = false;
        }
        h = {};
        h = new HorizontalTimeline(
            sEvents,
            cLowerLim,
            cUpperLim,
            minChicHeight,
            maxChicHeight,
            chicWidth,
            zoom,
            minDate,
            maxDate,
            eVcc,
            eVuln,
            lFix,
            height,
            width,
            margin,
            []
        );
        h.setup();
        h.generate();
    });
}

/**
 * bind event listeners to '#zoom-button'
 */
function bindZoomEvents(h, sEvents, cLowerLim, cUpperLim, minChicHeight, maxChicHeight, chicWidth, minDate, maxDate,
    eVcc, eVuln, lFix, height, width, margin) {
    $('#zoom-button').click(function() {
        var zoom = $('#zoom-bool').val();
        if ($('#zoom-bool').val() == "true") {
            $('#zoom-bool').val("false");
            $('#zoom-button').text('zoom_in');
            zoom = false;
        } else {
            $('#zoom-bool').val("true");
            $('#zoom-button').text('zoom_out');
            zoom = true;
        }
        var hiddenTypes = getFilterState();
        $('#toggle-block').empty();
        h = {};
        h = new HorizontalTimeline(
            sEvents,
            cLowerLim,
            cUpperLim,
            minChicHeight,
            maxChicHeight,
            chicWidth,
            zoom,
            minDate,
            maxDate,
            eVcc,
            eVuln,
            lFix,
            height,
            width,
            margin,
            hiddenTypes
        );
        h.setup();
        h.generate();
    });
}

/**
 * return an array of all the unchecked filters
 * @returns {Array}
 */
function getFilterState() {
    var hiddenTypes = [];
    $('#toggle-block').children('span').each(function() {
        if (!($(this).children("input[type='checkbox']:first").is(":checked")
            )) {
            var type = $(this).children("input[type='checkbox']:first").attr('id');
            type = type.split('-')[0];
            hiddenTypes.push(type);
        }
    });

    return hiddenTypes;
}


/**
 * sort the events by date oldest to newest
 * @param events - array of Event1 objects
 * @returns {*} - array of sorted Event1 objects
 */
function sortEvents(events) {
    events.sort(function(a, b) {
        return a.date - b.date;
    });
    return events;
}

/**
 * Init filters of all Event types
 * @param e (event)
 */
function createFilters(importantDates, events) {
    var exists = false;
    window.filters.forEach(function(filter) {
        if(filter.type === e.type) {
            exists = true;
        }
    });
    if(!exists) {
        var newFilter = new Filter(e.type, true);
        window.filters.push(newFilter);
    }
}
