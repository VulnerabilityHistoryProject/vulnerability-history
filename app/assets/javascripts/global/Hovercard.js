import $ from "jquery";

/**
 * Set a hovercard to load and present the selected vulnerability.
 * @param {*} elementSelect The class name of the elements that will have a hovercard.
 */
export default function setHovercard(elementSelect) {
  // Force cve links to stay on same line
  $(elementSelect).css("white-space", "nowrap");
  // Add hovercard div to elements with the given selector
  $(elementSelect).append('<div class="hover-card" id="unpopulated"></div>');

  // Initiate the hovercard element style and hide it
  $(".hover-card")
    .css({
      "white-space": "normal", // hovercard contents wrap
      display: "inline-flex",
      position: "absolute",
      backgroundColor: "#23232c",
      borderRadius: "15pt",
      borderLeft: "4pt solid #98e3b7",
      padding: "1.2em",
      height: "fit-content",
      width: "fit-content",
      fontSize: "12pt", //TODO fixed size or relative?
      color: "#98e3b7",
    })
    .hide();

  // Show the hovercard when hovering over the given elements and hide it when
  // hovering off it and the hovercard
  $(elementSelect).hover(
    function (e) {
      // when hovering over a link
      if ($(this).find(".hover-card").attr("id") === "unpopulated") {
        // if the card is not already populated make ajax request and change to populated
        ajaxReq($(this));
        $(this).find(".hover-card").attr("id", "populated");
      }
      $(this)
        .find(".hover-card")
        .delay(450) // wait 450ms before displaying card
        .css({
          // spawn the hovercard centered at the cursor right below the chosen element
          left: e.pageX - 100, // center with the cursor //TODO fixed size or relative?
          top: $(this)[0].getBoundingClientRect().bottom + window.scrollY - 3, // right below the element
        })
        .fadeIn(100); // make card visible
    },
    function () {
      // when hovering off the link
      $(this)
        .find(".hover-card")
        .stop(true) // if hover off before delay timer don't display card at all
        .fadeOut(100); // fade card away
    },
  );
}

// Populate hover card from given result json
function populateHovercard(result, element, cve) {
  const monthNames = [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec",
  ];
  let nicknameText;
  const titleText =
    result["nickname"] === ""
      ? cve // if there is no nickname the title is the cve
      : (() => {
          //if there is a nickname it becomes the title and the cve becomes the nickname
          nicknameText = cve;
          return result["nickname"];
        })();
  const title = $("<div></div>").text(titleText).css({
    display: "flex",
    flexDirection: "column",
    fontWeight: "bold",
    textAlign: "left",
  });
  const title_description_div = $("<div></div>").css({
    display: "flex",
    flexDirection: "column",
    alignItems: "flex-start",
    gap: "1em",
  });
  const nickname = $("<span></span>").text(nicknameText).css({
    fontSize: "0.8em",
    fontWeight: "100",
    fontStyle: "italic",
  });
  // TODO Add the date of last event
  // let date = new Date(result["announced"].substring(0, 10));
  // const announced =
  //   monthNames[date.getMonth()] +
  //   " " +
  //   date.getDate() +
  //   ", " +
  //   date.getFullYear();
  // const announced_date = $("<span></span>").text(announced).css({
  //   fontSize: "0.6em",
  //   fontWeight: "650",
  //   color: "#ea5f49",
  // });
  // TODO Fetch and insert tag elements
  const tags_array = [
    ...new Set(result["tags_array"].slice(2, -2).split('","')),
  ].reverse();
  const tags = $("<div></div>").css({
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "space-between",
    fontSize: "1.6em",
    paddingRight: "1em",
  });
  tags_array.length = 6;
  $.each(tags_array, function (index, tag) {
    tag = tag.slice(1, -1).split(",");
    tags.append(`<i class="vhp-icon-${tag[0]}" style="color: ${tag[1]}"></i>`);
  });
  const description = $("<p></p>")
    .text(truncateWords(result["description"], 40))
    .css({
      fontSize: "0.8em",
      textAlign: "left",
      color: "white",
      lineHeight: "1.5em",
      maxWidth: "27ch",
    });
  // title.append(nickname, announced_date);
  title.append(nickname);
  title_description_div.append(title, description);
  $(element).find(".hover-card").append(tags, title_description_div);
}

// fetch request for vulnerability data
function ajaxReq(element) {
  const regexp = /(CVE-\d{4}-\d{4,})/gi;
  const cve = element.text().match(regexp)[0];
  $.ajax({
    url: "/api/vulnerabilities/gettags/" + cve,
    success: (response) => {
      populateHovercard(response[0], element, cve);
    },
  });
}

// Truncate given text to a given number of words
function truncateWords(text, maxWords) {
  const words = text.split(" ");
  if (words.length > maxWords) {
    return words.slice(0, maxWords).join(" ") + "...";
  }
  return text;
}
