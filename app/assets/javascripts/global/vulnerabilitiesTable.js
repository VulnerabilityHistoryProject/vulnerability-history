function columnsInfo(){
    return [
      {
        title: '<i class="vhp-icon-vulnerability"></i> Vulnerability',
        data: null,
        defaultContent: '',
        class:'text-center',
        responsivePriority: 1,
        render: (data, type, row) => renderAsLink(vulnProject(data) + vulnName(data), row)
      },
      {
        title: '<i class="vhp-icon-info"></i> Description',
        data: 'short_desc',
        defaultContent: '',
        class:'text-left',
        responsivePriority: 3,
        render: (data, type, row) => renderAsLink(data, row)
      },
      {
        title: '<i class="vhp-icon-announce"></i> Date',
        data: 'announced',
        defaultContent: '',
        class:'text-center',
        responsivePriority: 5,
        render: (data, type, row) => renderDateColumn(data, type, row, 'MMMM DD, YYYY', true)
      },
      {
        title: '<i class="vhp-icon-upvote"></i>',
        data: 'upvotes',
        defaultContent: '0',
        class:'text-center',
        responsivePriority: 2,
        render: (data, type, row) => renderAsLink(data, row)
      },
      {
        title: '<i class="vhp-icon-tags"></i> Tags',
        data: 'tag_json',
        defaultContent: '',
        class:'text-left',
        responsivePriority: 4,
        render: (data, type, row) => renderAsLink(renderTags(data, row), row)
      }
    ];
}
function languageInfo() {
    return {
        search: "", // nothing in the placeholder;
        searchPlaceholder: 'Search',
        lengthMenu: "Show _MENU_",
        info: "Showing _START_ to _END_ of _TOTAL_ vulnerabilities",
        infoEmpty: "Showing 0 to 0 of 0 entries",
        infoFiltered: "(filtered from _MAX_ total vulnerabilities)",
    };
}

function buildTopNav() {
    $('#datatable_wrapper').prepend('<div id="table-nav-top"></div>');
    var nav = $('#table-nav-top');
    nav.addClass('table-nav grid-x');

    var nav_length = $('#datatable_length');
    nav_length.addClass('table-nav-show-entries cell small-2')
    nav.append(nav_length);

    nav.append(
        '<div class="table-nav-filter cell small-3">' +
        '  <select id="tag_filters" name="tag_filters" class="tag-filter">' +
        '    <option selected></option>'+
        '    <option disabled value> --- Filter by Tags --- </option>'+
        '  </select>' +
        '</div>'
    );

    nav.append(
        '  <div class="table-nav-more-about text-center cell small-4">' +
            // ajax call to /api/tags will populate here
        '  </div>'
    );

    var nav_search = $('#datatable_filter label');
    nav_search.addClass('table-nav-search cell small-3')
    nav.append(nav_search);
}

function renderAsLink(data, row) {
    return '<a class="dt_row" href="/vulnerabilities/' + row.id + '">' + data + '</a>';
}

function renderTags(data, row) {
    str = "<span class='tag-list'>";
    for (let t of data) {
      str +=
      `<span class='tag-list-item'>
         <i class='vhp-icon-${t.tag_icon}' style='color: ${t.tag_color}'></i>
          ${t.tag_name}
       </span>`;
    }
    str += "</span>"
    return str;
}

function vulnTable(jsonData, tableName = '#datatable'){
  $(tableName).DataTable({
      responsive: true,
      destroy: true,
      data: jsonData,
      order: [[3, "desc"]], /* Default sort */
      columnDefs: [
        { "width": "14%", "targets": 0 },
        { "width": "20%", "targets": 1 }
      ],
      columns: columnsInfo(),
      language: languageInfo(),
      initComplete: function () {
          $('#loading').remove();
          buildTopNav();
          this.api().columns(4).every( function () {
              var column = this;
              $('#tag_filters').on( 'change', function () {
                  column.search($(this).val()).draw();
                  $('.table-nav-more-about-link').hide();
                  var tag_id = $(this).find(':selected').data('tag-id');
                  $('#table-nav-tag-' + tag_id).show();
              } );
              $.ajax({
                  url: "/api/tags",
                  dataType: "json",
                  success: function (data) {
                      data.sort(function(a, b) {
                         return a.name.localeCompare(b.name);
                      });
                      $.each(data, function ( index, d ) {
                          $('#tag_filters').append(
                            '<option value="' + d.name + '"' +
                            '        data-tag-id="'+ d.id +'">'
                              + d.name +
                             '</option>'
                          );
                          $('.table-nav-more-about').append(
                            '<a href="/tags/' + d.id + '" ' +
                              ' class="table-nav-more-about-link"' +
                              ' id="table-nav-tag-' + d.id + '">'+
                              '<i class="vhp-icon-' + d.icon +
                              '"/></i> Learn about ' + d.name +
                            '</a>');
                      } );
                      $('.table-nav-more-about-link').hide();
                  }
              });
          } );
      }
  });
  $(tableName).on('mouseover', 'tbody tr', function() {
      $(this).css({
         'cursor': 'pointer',
          'color': 'blue'
      });
  })

  $(tableName).on('mouseout', 'tbody tr', function() {
      $(this).css({
          'cursor': 'default',
          'color': 'inherit'
      });
  })
}
