function in_tag_list(name) {
  return !name.startsWith('CWE')
      && !name.startsWith('Project:')
}

//Simplifies the CWE name if it has a nickname in parentheses
function friendlyCWE(name) {
  // "I do not want this ('I want this') not this" --> "I want this"
  // "Just a string" --> "Just a string"
  const match = name.match(/.*\(\'(.+)\'\).*/);
  if(match){
    return match[1]; //[0] is the full string, [1] is the actual match
  } else {
    return name;
  }
}

function vulnCards(jsonData, container = '#vuln_cards'){
  for (let v of jsonData) {
    card = $('#vuln_card_template').clone();
    card.attr('id', '');
    card.attr('href', `/vulnerabilities/${v.id}`);
    if(v.nickname.trim()) {
      card.find('.title-space').append(`
        <div class="title">
          <span class="${v.subdomain + '-inline-logo'}"></span>
          ${v.nickname}
        </div>
        <div class="subtitle">${v.cve}</div>
      `);
    } else {
      card.find('.title-space').append(`
        <div class="title-only">
          <span class="${v.subdomain + '-inline-logo'}"/>
          ${v.cve}
        </div>
      `);
    }

    card.find('.date')
        .attr('title', v.announced)
        .html(moment(v.announced).fromNow());
    if(v.upvotes > 0) {
      card.find('.upvote-number').html(v.upvotes);
      card.find('.upvotes i')
          .attr('title', `${v.upvotes} upvotes`)
          .attr('class', 'vhp-icon-upvote');
    }
    for(let t of v.tag_json){
      if(t.tag_name.startsWith('CWE')){
        card.find('.cwe').html(friendlyCWE(t.tag_name.split(':')[1].trim()));
      }
    }
    for(let t of v.tag_json){
      if(in_tag_list(t.tag_name)){
        card.find('.icons').append(`
          <i title="${t.tag_name}"
             class="vhp-icon-${t.tag_icon}"
             style="color: ${t.tag_color}" ></i>
        `)
       }
    }

    $(container).append(card);
  }
}
