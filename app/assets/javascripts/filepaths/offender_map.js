import $ from 'jquery'
import * as d3 from 'd3'
import _ from 'lodash'
import { ellipsizedFilepath } from '../global/dataToPrettyStrings'

export default function OffenderMap() {
  this.project_id = 0; //project_id 0 is "all" projects
  this.cutoff = 2; // number of fixes we need to actually show this. TODO make this configurable
  this.color_mode = 'project'
  this.cves_color_max = 15
  this.churn_max = 500
  this.upvotes_max = 30
  // need insertions and deletions max

  // is gear select open
  this.gear_open = false;
  this.first_select_complete = false;

  this.max_color = '#F4083E'
  this.min_color = '#CCCCCC'

  this.init = function () {
    this.initVisualDiv();
    this.initSVG();
    this.registerHandlers();
    const color_scale = d3.interpolateRgb(this.min_color, this.max_color)
    this.heatColorScale = d3.scaleSequential(color_scale)
      .domain([0, this.cves_color_max]);
    this.churnColorScale = d3.scaleSequential(color_scale)
      .domain([0, this.churn_max]);
    this.upvotesColorScale = d3.scaleSequential(color_scale)
      .domain([0, this.upvotes_max]);
    return this;
  }

  this.toggleGearSelect = function () {
    // appends select element
    if (!this.gear_open && !this.first_select_complete) {
      this.gear_open = true;
      this.first_select_complete = true;
      let div = d3.select("#offenders_visual")
      let gearSelect = d3.select("#gearSelect")
      let changer1 = gearSelect.style("display", "none");
      let changer2 = div.append('div').attr('id', 'gearMenu')
      let gearMenu = d3.select('#gearMenu')
      let changer3 = gearMenu.append('select').html(`
        <option value='project'>Project</option>
        <option value='cves'>Vulnerabilities</option>
        <option value='upvotes'>Upvotes</option>
        <option value='churn'>Fix Churn (Total)</option>
        <option value='insertions'>Fix Churn (Insertions)</option>
        <option value='deletions'>Fix Churn (Deletions)</option>
        <option value='net_churn'>Fix Churn (Net)</option>
      `)
        .attr('id', 'colorChanger')
        .attr('size', '7')
        .style('width', '145px')
      $('#colorChanger').on("change", (e) => this.colorChanged(e.target.value))
    }
    // makes select element reappear
    else if (!this.gear_open && this.first_select_complete) {
      this.gear_open = true;
      let gearSelect = d3.select("#gearSelect")
      let changer1 = gearSelect.style("display", "none");
      d3.select('#colorChanger')
        .style('display', 'block')
      $('#colorChanger').on("change", (e) => this.colorChanged(e.target.value))
    }
  }

  this.initVisualDiv = function () {
    let div = d3.select("#offenders_visual")
    let changer = div.append('button').html(`
      <i class="vhp-icon-gear"></i>
    `)
      .attr('id', 'gearSelect')
      .style('position', 'absolute')
      .style('top', '0.5em')
      .style('right', '1em')
      .style('font-size', '40px')
      .style('color', '#9E9E9E')
    $('#gearSelect').on("click", (e) => this.toggleGearSelect())
  }

  this.initSVG = function () {
    const width = 700 //internal coordinates
    const height = 700
    this.radius = Math.min(width, height) / 2;
    this.svg = d3.select("#offender-map-svg")
    // .append("svg:svg")
    // // svg width and height NOT set for responsiveness here!!
    // // viewBox is the internal coordinate system and then this
    // // scales to fit its container
    // .attr("viewBox", `0 0 ${width} ${height}`)
    // .attr("preserveAspectRatio", "xMidYMid meet")
    this.addFilepathLink();
    this.g = this.svg.append('g')
      .attr('transform', `translate(${width / 2}, ${height / 2})`);
    this.addHelpText('Click to zoom', 650);
    this.addHelpText('Ctrl+Click leaf node to visit', 665);
    this.addHelpText('Click center to go up', 680);
  }

  this.setData = function (offenders, projects) {
    this.offenders = offenders
    this.projects = projects
    this.projectJSONToMap()
    this.prependProjectName()
    this.initLegends()
    this.rebuild()
  }

  // e.g. Chromium's foo/bar.c --> chromium/foo/bar.c
  this.prependProjectName = function () {
    this.offenders = this.offenders.map(function (f) {
      f.filepath = `${f.subdomain}/${f.filepath}`;
      return f
    })
  }

  // Draw the help text at the given y coordinate
  this.addHelpText = function (str, y) {
    this.svg.append('text')
      .attr('x', 480)
      .attr('y', y)
      .attr('font-size', 15)
      .attr('style', 'fill: #aaa')
      .html(str)
  }

  this.addFilepathLink = function () {
    this.filepathLink = this.svg.append('text')
      .attr('x', 0)
      .attr('y', 15)
      .attr('font-size', 14)
      .attr('font-family', "Consolas, 'Liberation Mono', Courier, monospace")
      .attr('style', 'fill: #000')
    this.filepathInfo = this.svg.append('text')
      .attr('x', 0)
      .attr('y', 30)
      .attr('font-size', 14)
      .attr('font-family', "Consolas, 'Liberation Mono', Courier, monospace")
      .attr('style', 'fill: #000')
  }

  this.registerHandlers = function () {
    $('select.project-choice').on("change", (e) => {
      this.project_id = $("select.project-choice option:selected")
        .attr('value');
      this.rebuild();
    });
  }

  this.initLegends = function () {
    this.initProjectLegend()
    this.initCVESLegend()
    this.initUpvotesLegend()
    this.initChurnLegend()
    this.initInsertionsLegend()
    this.initDeletionsLegend()
    this.initNetChurnLegend()
  }

  this.initProjectLegend = function () {
    const line_height = 17
    let y = 700 - 2 * line_height
    let svg = this.svg
    let projGroup = svg.append('g').attr("id", "project-legend")
    this.projects.forEach(function (p) {
      projGroup.append('text')
        .attr('x', 0)
        .attr('y', y)
        .attr('font-size', 15)
        .attr('font-weight', 'bold')
        .style('fill', p.bg_color)
        .html(p.name)
      y -= line_height
    })
  }

  this.initCVESLegend = function () {
    this.svg.append('defs').html(`
        <linearGradient id="CountGradient" x1="0" y1="1" x2="0" y2="0">
          <stop stop-color="${this.min_color}" offset="0%" />
          <stop stop-color="${this.max_color}" offset="100%" />
        </linearGradient>
      `)
    let newGroup = this.svg.append('g').attr("id", "cves-legend")
    newGroup.style("opacity", 0.0)
    newGroup.append('text')
      .attr('x', 50)
      .attr('y', 575)
      .style('font-size', 18)
      .style('font-weight', 'bold')
      .style('fill', '#8a8a8a')
      .html(`${this.cves_color_max}+`)
    newGroup.append('rect')
      .attr('x', 46)
      .attr('y', 580)
      .attr('width', 30)
      .attr('height', 80)
      .style("fill", 'url(#CountGradient)')
    newGroup.append('text')
      .attr('x', 55)
      .attr('y', 675)
      .style('font-size', 18)
      .style('font-weight', 'bold')
      .style('fill', '#8a8a8a')
      .html('0')
    newGroup.append('text')
      .attr('x', 465)
      .attr('y', 88)
      .style('font-size', 15)
      .style('fill', '#8a8a8a')
      .html('Number of vulnerabilities fixed')
  }

  this.initUpvotesLegend = function () {
    this.svg.append('defs').html(`
        <linearGradient id="CountGradient" x1="0" y1="1" x2="0" y2="0">
          <stop stop-color="${this.min_color}" offset="0%" />
          <stop stop-color="${this.max_color}" offset="100%" />
        </linearGradient>
      `)
    let newGroup = this.svg.append('g').attr("id", "upvotes-legend")
    newGroup.style("opacity", 0.0)
    newGroup.append('text')
      .attr('x', 50)
      .attr('y', 575)
      .style('font-size', 18)
      .style('font-weight', 'bold')
      .style('fill', '#8a8a8a')
      .html(`${this.upvotes_max}+`)
    newGroup.append('rect')
      .attr('x', 46)
      .attr('y', 580)
      .attr('width', 30)
      .attr('height', 80)
      .style("fill", 'url(#CountGradient)')
    newGroup.append('text')
      .attr('x', 55)
      .attr('y', 675)
      .style('font-size', 18)
      .style('font-weight', 'bold')
      .style('fill', '#8a8a8a')
      .html('0')
    newGroup.append('text')
      .attr('x', 500)
      .attr('y', 85)
      .style('font-size', 15)
      .style('fill', '#8a8a8a')
      .html('Number of user upvotes')
  }

  this.initChurnLegend = function () {
    this.svg.append('defs').html(`
        <linearGradient id="CountGradient" x1="0" y1="1" x2="0" y2="0">
          <stop stop-color="${this.min_color}" offset="0%" />
          <stop stop-color="${this.max_color}" offset="100%" />
        </linearGradient>
      `)
    let newGroup = this.svg.append('g').attr("id", "churn-legend")
    newGroup.style("opacity", 0.0)
    newGroup.append('text')
      .attr('x', 50)
      .attr('y', 575)
      .style('font-size', 18)
      .style('font-weight', 'bold')
      .style('fill', '#8a8a8a')
      .html(`${this.churn_max}+`)
    newGroup.append('rect')
      .attr('x', 46)
      .attr('y', 580)
      .attr('width', 30)
      .attr('height', 80)
      .style("fill", 'url(#CountGradient)')
    newGroup.append('text')
      .attr('x', 55)
      .attr('y', 675)
      .style('font-size', 18)
      .style('font-weight', 'bold')
      .style('fill', '#8a8a8a')
      .html('0')
    newGroup.append('text')
      .attr('x', 500)
      .attr('y', 85)
      .style('font-size', 15)
      .style('fill', '#8a8a8a')
      .html('Number of total churns')
    newGroup.append('text')
      .attr('x', 500)
      .attr('y', 100)
      .style('font-size', 15)
      .style('fill', '#8a8a8a')
      .html('(Insertions + Deletions)')
  }

  this.initInsertionsLegend = function () {
    this.svg.append('defs').html(`
        <linearGradient id="CountGradient" x1="0" y1="1" x2="0" y2="0">
          <stop stop-color="${this.min_color}" offset="0%" />
          <stop stop-color="${this.max_color}" offset="100%" />
        </linearGradient>
      `)
    let newGroup = this.svg.append('g').attr("id", "insertions-legend")
    newGroup.style("opacity", 0.0)
    newGroup.append('text')
      .attr('x', 50)
      .attr('y', 575)
      .style('font-size', 18)
      .style('font-weight', 'bold')
      .style('fill', '#8a8a8a')
      .html(`${this.churn_max}+`)
    newGroup.append('rect')
      .attr('x', 46)
      .attr('y', 580)
      .attr('width', 30)
      .attr('height', 80)
      .style("fill", 'url(#CountGradient)')
    newGroup.append('text')
      .attr('x', 55)
      .attr('y', 675)
      .style('font-size', 18)
      .style('font-weight', 'bold')
      .style('fill', '#8a8a8a')
      .html('0')
    newGroup.append('text')
      .attr('x', 500)
      .attr('y', 88)
      .style('font-size', 15)
      .style('fill', '#8a8a8a')
      .html('Number of insertions')
  }

  this.initDeletionsLegend = function () {
    this.svg.append('defs').html(`
        <linearGradient id="CountGradient" x1="0" y1="1" x2="0" y2="0">
          <stop stop-color="${this.min_color}" offset="0%" />
          <stop stop-color="${this.max_color}" offset="100%" />
        </linearGradient>
      `)
    let newGroup = this.svg.append('g').attr("id", "deletions-legend")
    newGroup.style("opacity", 0.0)
    newGroup.append('text')
      .attr('x', 50)
      .attr('y', 575)
      .style('font-size', 18)
      .style('font-weight', 'bold')
      .style('fill', '#8a8a8a')
      .html(`${this.churn_max}+`)
    newGroup.append('rect')
      .attr('x', 46)
      .attr('y', 580)
      .attr('width', 30)
      .attr('height', 80)
      .style("fill", 'url(#CountGradient)')
    newGroup.append('text')
      .attr('x', 55)
      .attr('y', 675)
      .style('font-size', 18)
      .style('font-weight', 'bold')
      .style('fill', '#8a8a8a')
      .html('0')
    newGroup.append('text')
      .attr('x', 500)
      .attr('y', 88)
      .style('font-size', 15)
      .style('fill', '#8a8a8a')
      .html('Number of deletions')
  }

  this.initNetChurnLegend = function () {
    this.svg.append('defs').html(`
        <linearGradient id="CountGradient" x1="0" y1="1" x2="0" y2="0">
          <stop stop-color="${this.min_color}" offset="0%" />
          <stop stop-color="${this.max_color}" offset="100%" />
        </linearGradient>
      `)
    let newGroup = this.svg.append('g').attr("id", "net_churn-legend")
    newGroup.style("opacity", 0.0)
    newGroup.append('text')
      .attr('x', 50)
      .attr('y', 575)
      .style('font-size', 18)
      .style('font-weight', 'bold')
      .style('fill', '#8a8a8a')
      .html(`${this.churn_max}+`)
    newGroup.append('rect')
      .attr('x', 46)
      .attr('y', 580)
      .attr('width', 30)
      .attr('height', 80)
      .style("fill", 'url(#CountGradient)')
    newGroup.append('text')
      .attr('x', 55)
      .attr('y', 675)
      .style('font-size', 18)
      .style('font-weight', 'bold')
      .style('fill', '#8a8a8a')
      .html('0')
    newGroup.append('text')
      .attr('x', 500)
      .attr('y', 85)
      .style('font-size', 15)
      .style('fill', '#8a8a8a')
      .html('Number of net churns')
    newGroup.append('text')
      .attr('x', 500)
      .attr('y', 100)
      .style('font-size', 15)
      .style('fill', '#8a8a8a')
      .html('(Insertions - Deletions)')
  }

  this.rebuild = function () {
    const cluster = this.rebuildDataHierarchy();
    this.rebuildVisualization(cluster);
  }

  // Convert from the JSON response from the API to a formatted needed for //
  // D3's hierarchical clustering.
  // 1. Filter out according to project & num_fixes cutoff
  // 2. Prepend the project name to the filepath
  // 2. Parentify - add parent directories to the data and keep it sorted
  // 3. Clusterify - convert to D3's clustered hierarchy data structure,
  // 4. Partition - append data structure with layout X's & Y's
  this.rebuildDataHierarchy = function () {
    const filtered = this.offenders.filter( //accept only filepaths
      f => (f.project_id == this.project_id || this.project_id == 0)
        && f.num_fixes >= this.cutoff
    );
    const cluster = this.clusterify(this.parentify(filtered));
    var partition = d3.partition();
    partition(cluster);
    return cluster
  }

  /*
  Given a D3 partition()'d cluster hierarchy, draw stuff partition() computed
  X's and Y's for us, but it's in its own coordinate space AND uses a
  traditional rectangle-based hierarchy. So we need to map those numbers to a
  circular pattern in our own coordinate system. Then do styling with colors
  and other visual fanciness.
  */
  this.rebuildVisualization = function (cluster) {
    this.x = d3.scaleLinear().range([0, 2 * Math.PI]);
    this.y = d3.scaleSqrt().range([0, this.radius]);

    this.arc = d3.arc() //from rectangles to divided circles
      .startAngle(d => Math.max(0, Math.min(2 * Math.PI, this.x(d.x0))))
      .endAngle(d => Math.max(0, Math.min(2 * Math.PI, this.x(d.x1))))
      .innerRadius(d => Math.max(0, this.y(d.y0)))
      .outerRadius(d => Math.max(0, this.y(d.y1)));

    const colorScale = d3.interpolateRgb('#774b70', '#ce6dbd')
    const cluster_depth = cluster.height;
    const color = d3.scaleSequential(colorScale).domain([0, cluster_depth]);

    this.g.selectAll('path').remove(); // remove previous if there
    this.g.selectAll('path')
      .data(cluster.descendants())
      .enter().append('path')
      .attr("d", this.arc)
      .style('stroke', '#fff')
      .style('stroke-width', '0.25px')
      .style("fill", d => this.computeColor(d))
      .on("click", d => this.clicked(d, this))
      .on("mouseover", d => this.mouseovered(d, this))
      .attr("transform", "scale(0.05)")
      .transition().attr("transform", "scale(1.1)").duration(200) //ms
      .transition().attr("transform", "scale(1.0)").duration(300) //ms
      ;
  }

  // D3's stratify method needs the parent directories, and sorted
  // e.g. filepath: foo/bar/baz.c
  //         ---converts too---
  //     /
  //     /foo
  //     /foo/bar
  //     /foo/bar/baz.c
  // We also need to make sure this is all unique,
  // (e.g. there's only one /foo), so we use hashes
  this.parentify = function (offenderList) {
    const parents = { '/': 0 }; // init with root directory, purple
    offenderList.forEach(function (entry) {
      let filepath = entry.filepath;
      while (filepath.indexOf('/') > 0) {
        filepath = filepath.substring(0, filepath.lastIndexOf('/'));
        parents[filepath] = entry.project_id;
      }
    });
    for (let key in parents) {
      offenderList.push({
        'filepath': key,
        'id': null, // there is no filepath ID for this, it's a directory!
        'num_cves': null, //init this to null - it'll be updated later
        'churn': 0, //init this to 0 for dirs
        'net_churn': 0,
        'insertions': 0,
        'deletions': 0,
        'upvotes': 0,
        'project_id': parents[key]
      });
    }
    offenderList.sort(function (a, b) { // sort these alphabetically
      return (a.filepath > b.filepath) ? 1 :
        ((b.filepath > a.filepath) ? -1 : 0);
    });
    return offenderList;
  }

  // Given filepath data with parents, generate a cluster hierarchy
  // Also: add up the values of each parent
  this.clusterify = function (data) {
    const stratify = d3
      .stratify()
      .parentId(function (d) {
        if (d.filepath == '/') return null;
        if (d.filepath.indexOf('/') > 0) { // non-root file
          return d.filepath.substring(0, d.filepath.lastIndexOf('/'));
        } else { //root file
          return '/';
        }
      })
      .id(function (d) {
        return d.filepath;
      });
    let root = stratify(data);
    root.sum(function (d) { return d.num_cves });
    return root;
  }

  // Ctrl+Click means we go to the page
  // Click means we zoom in
  this.clicked = function (d, map) {
    if ((d3.event.ctrlKey || d3.event.metaKey) && d.data.slug !== undefined) {
      location.href = `/filepaths/${d.data.slug}`
    } else {
      this.zoom(d, map)
    }
  }

  // Zooming is accomplished by changing how the xy's are interpolated
  this.zoom = function (d, map) {
    map.svg.transition()
      .duration(750) // ms
      .tween("scale", function () {
        var xd = d3.interpolate(map.x.domain(), [d.x0, d.x1]),
          yd = d3.interpolate(map.y.domain(), [d.y0, 1]),
          yr = d3.interpolate(map.y.range(), [d.y0 ? 20 : 0, map.radius]);
        return function (t) { map.x.domain(xd(t)); map.y.domain(yd(t)).range(yr(t)); };
      })
      .selectAll("path")
      .attrTween("d", function (d) { return function () { return map.arc(d); }; });
  }

  // Init a lookup table for project colors
  this.projectJSONToMap = function () {
    const reducer = function (pcMap, jsonRow) {
      pcMap[jsonRow.id] = jsonRow.bg_color
      return pcMap
    }
    this.projectColors = _.reduce(this.projects, reducer, { 0: '#F53663' })
  }

  // If we're coloring by project, look up the project color
  // If we're coloring by num_cves, compute
  this.computeColor = function (d) {
    if (this.color_mode == 'cves') {
      return this.heatColorScale(d.data.num_cves)
    } else if (this.color_mode == "upvotes") {
      return this.upvotesColorScale(d.data.upvotes)
    } else if (this.color_mode == "churn") {
      return this.churnColorScale(d.data.churn)
    } else if (this.color_mode == "insertions") {
      return this.churnColorScale(d.data.insertions)
    } else if (this.color_mode == "deletions") {
      return this.churnColorScale(d.data.deletions)
    } else if (this.color_mode == "net_churn") {
      return this.churnColorScale(d.data.net_churn)
    } else {
      return this.projectColors[d.data.project_id]
    }
  }

  this.mouseovered = function (d, self) {
    if (d.data.id) { //is this a filepath?
      self.filepathLink
        .style("visibility", "visible")
        .style("opacity", "100")
        .style("top", d3.event.pageY + "px")
        .style("left", d3.event.pageX + "px")
        .html(`
                <a href=/filepaths/${d.data.slug}>
                  ${ellipsizedFilepath(d.data.filepath, 40, 75)[1]}
                </a>`)
      self.filepathInfo
        .style("visibility", "visible")
        .style("opacity", "100")
        .style("top", d3.event.pageY + "px")
        .style("left", d3.event.pageX + "px")
        .html(`
                <a href=/filepaths/${d.data.slug}>
                  ${d.data.num_cves} Vulnerabilities | ${d.data.num_fixes} Fixes | ${d.data.churn} Churns | ${d.data.upvotes} Upvotes
                </a>`)
    } else {  // or a directory?
      self.filepathLink
        .style("visibility", "visible")
        .style("opacity", "100")
        .style("top", d3.event.pageY + "px")
        .style("left", d3.event.pageX + "px")
        .html(ellipsizedFilepath(d.data.filepath, 40, 75)[1]);
    }
  }

  this.colorChanged = function (mode) {
    this.color_mode = mode
    this.g.selectAll('path')
      .transition()
      .style('fill', (d) => this.computeColor(d)).duration(1200)

    d3.select('#colorChanger')
      .style('display', 'none')

    let gearSelect = d3.select("#gearSelect")
    let changer1 = gearSelect.style("display", "block");
    this.gear_open = false;

    d3.select('#project-legend')
      .transition()
      .style('opacity', mode == 'project' ? 1.0 : 0.0)
      .duration(1200)

    d3.select('#cves-legend')
      .transition()
      .style('opacity', mode == 'cves' ? 1.0 : 0.0)
      .duration(1200)

    d3.select('#upvotes-legend')
      .transition()
      .style('opacity', mode == 'upvotes' ? 1.0 : 0.0)
      .duration(1200)

    d3.select('#churn-legend')
      .transition()
      .style('opacity', mode == 'churn' ? 1.0 : 0.0)
      .duration(1200)

    d3.select('#insertions-legend')
      .transition()
      .style('opacity', mode == 'insertions' ? 1.0 : 0.0)
      .duration(1200)

    d3.select('#deletions-legend')
      .transition()
      .style('opacity', mode == 'deletions' ? 1.0 : 0.0)
      .duration(1200)

    d3.select('#net_churn-legend')
      .transition()
      .style('opacity', mode == 'net_churn' ? 1.0 : 0.0)
      .duration(1200)

  }
}
