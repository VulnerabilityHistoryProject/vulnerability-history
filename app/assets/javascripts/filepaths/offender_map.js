// Add parents to the data
// D3's stratify needs the parent directories, and sorted
function parentify(apiData){
  parents = { '/' : ''}; // init with root directory
  apiData.forEach(function(entry) {
    filepath = entry.filepath;
    while(filepath.indexOf('/') > 0) {
      filepath = filepath.substring(0, filepath.lastIndexOf('/'));
      parents[filepath] = parents[filepath] || ''; // Ruby ||=
    }
  });
  for(parent in parents) {
    apiData.push({
      'filepath' : parent,
      'id' : null,
      'num_fixes' : null
    });
  }
  apiData.sort(function(a,b){
    return (a.filepath > b.filepath) ? 1 : ((b.filepath > a.filepath) ? -1 : 0);
  });
  return apiData;
}


// Given filepath data with parents, generate a cluster hierarchy
// Also: add up the values of each parent
function clusterify(data){
  stratify = d3.stratify()
    .parentId(function (d) {
      if(d.filepath == '/') return null;
      if(d.filepath.indexOf('/') > 0) { // non-root file
        return d.filepath.substring(0, d.filepath.lastIndexOf('/'));
      } else { //root file
        return '/';
      }
    })
    .id(function (d) {
      return d.filepath;
    });
  root = stratify(data);
  root.sum(function(d) { return d.num_fixes });
  return root;
}

$( document ).ready( function() {
  $.ajax({
    url: "/api/filepaths?offenders=true",
    dataType: 'json',
    success: function(apiData) {
      parentedData = parentify(apiData);
      root = clusterify(parentedData);
      console.log(root);

      //Init SVG
      var width = 700,
          height = 700,
          radius = Math.min(width, height) / 2;

      var svg = d3.select("#offenders_map")
                  .append("svg:svg")
                  // svg width and height NOT set for responsiveness here!!
                  // viewBox is the internal coordinate system and then this
                  // scales to fit its container
                  .attr("viewBox", "0 0 " + width + " " + height)
                  .attr("preserveAspectRatio", "xMidYMid meet")
      var g = svg.append('g')
          .attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')');

      // Init scales for zooming
      var x = d3.scaleLinear()
        .range([0, 2 * Math.PI]);

      var y = d3.scaleSqrt()
        .range([0, radius]);

      //Size the arcs
      var partition = d3.partition()
      partition(root)
      var arc = d3.arc()
        .startAngle(function(d) { return Math.max(0, Math.min(2 * Math.PI, x(d.x0))); })
        .endAngle(function(d) { return Math.max(0, Math.min(2 * Math.PI, x(d.x1))); })
        .innerRadius(function(d) { return Math.max(0, y(d.y0)); })
        .outerRadius(function(d) { return Math.max(0, y(d.y1)); });

      // Create color scheme
      purpleScale = d3.interpolateRgb('#774b70','#ce6dbd')
      var color = d3.scaleSequential(purpleScale)
                    .domain([0,root.height])
                    ;

      // Put it all together
      $('#loading_map').remove();
      g.selectAll('path')
        .data(root.descendants())
        .enter().append('path')
        .attr("d", arc)
        .style('stroke', '#de9ed6')
        .style('stroke-width', '0.25px')
        .style("fill", d => color(d.depth))
        .on("click", clicked)
        .on("mouseover", mouseovered)
        ;

      // When we click on a particular path, we zoom in
      function clicked(d) {
        svg.transition()
          .duration(750)
          .tween("scale", function() {
            var xd = d3.interpolate(x.domain(), [d.x0, d.x1]),
                yd = d3.interpolate(y.domain(), [d.y0, 1]),
                yr = d3.interpolate(y.range(), [d.y0 ? 20 : 0, radius]);
            return function(t) { x.domain(xd(t)); y.domain(yd(t)).range(yr(t)); };
          })
        .selectAll("path")
          .attrTween("d", function(d) { return function() { return arc(d); }; });
      }

      function mouseovered(d){
        if(d.data.id) {
          d3.select("#offenders_path")
            .html("<a href=\"/filepaths/" +
                   d.data.id +
                  "\">" +
                  d.data.filepath +
                  "</a>"
                 );
        } else {
          d3.select("#offenders_path").html(d.data.filepath);
        }
      }
    }
  });

});
