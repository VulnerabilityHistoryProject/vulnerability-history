// manual data input
// ajax call will go here
const nodeData = {
    filepath: "chrome/app",
    children: [
        {
            filepath: "test",
            children: [
                { filepath: "url_elider.cc", id: 1 },
                { filepath: "bug.cc", id: 2 },
                { filepath: "view.cc", id: 2 },
                { filepath: "bug.cc", id: 2 },
                { filepath: "model.cc", id: 2 },
                { filepath: "view.cc", id: 2 },
                { filepath: "controller.cc", id: 2 },
            ]
        },
        {
            filepath: "no_bugs",
            children: [
                { filepath: "serious_bug.cc", id: 3 },
                { filepath: "serious_bug.cc", id: 3 },
                { filepath: "serious_bug.cc", id: 3 },
                { filepath: "serious_bug.cc", id: 3 },
                { filepath: "serious_bug.cc", id: 3 },
                { filepath: "serious_bug.cc", id: 3 },
            ]
        },
        {
            filepath: "no_bugs",
            children: [
                { filepath: "serious_bug.cc", id: 3 },
                { filepath: "serious_bug.cc", id: 3 },
                { filepath: "serious_bug.cc", id: 3 },
            ]
        },
    ]
}


const svg = d3.select("svg"),
    width = +svg.attr("width"),
    height = +svg.attr("height");


const color = d3.scaleOrdinal(d3.schemeCategory10);


// each partition stuff
const partition = d3.partition()
    .size([height, width])
    .padding(1)
    .round(true);

// making a root node
const root = d3.hierarchy(nodeData)
    .sum(() => 1)
    .sort((a, b) => b.height - a.height || b.value - a.value);

// mark the root to apply partition
partition(root);

const cell = svg
    .selectAll(".node")
    .data(root.descendants())
    .enter().append("g")
    .attr("class", d => "node" + (d.children ? " node--internal" : " node--leaf"))
    .attr("transform", d => "translate(" + d.y0 + "," + d.x0 + ")");


cell.append("rect")
    .attr("id", d => "rect-" + d.data.filepath)
    .attr("width", d => d.y1 - d.y0)
    .attr("height", d => d.x1 - d.x0)
    .filter(d => !d.children)
    .style("fill", d => color(d.data.filepath));


cell.append("text")
    .attr("x", 4)
    .selectAll("tspan")
    .data((d) => d.data.filepath)
    .enter().append("tspan")
    .attr("y", 13)
    .text(d => d);
