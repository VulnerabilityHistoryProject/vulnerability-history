// manual data input
// ajax call will go here
const actualData = [
    {
        "id": 1,
        "filepath": "chrome/common/gfx/url_elider.cc",
        "note": ""
    },
    {
        "id": 2,
        "filepath": "chrome/app/chrome_dll_main.cc",
        "note": ""
    },
    {
        "id": 3,
        "filepath": "chrome/common/ipc_message_unittest.cc",
        "note": ""
    },
    {
        "id": 4,
        "filepath": "chrome/common/ipc_message_utils.cc",
        "note": ""
    },
    {
        "id": 5,
        "filepath": "chrome/common/common.vcproj",
        "note": ""
    },
    {
        "id": 6,
        "filepath": "chrome/common/ipc_logging.cc",
        "note": ""
    },
    {
        "id": 7,
        "filepath": "chrome/common/ipc_logging.h",
        "note": ""
    },
    {
        "id": 8,
        "filepath": "chrome/common/ipc_message_utils.h",
        "note": ""
    },
    {
        "id": 9,
        "filepath": "chrome/common/plugin_messages.h",
        "note": ""
    },
    {
        "id": 10,
        "filepath": "chrome/common/render_messages_internal.h",
        "note": ""
    },
    {
        "id": 11,
        "filepath": "chrome/test/automation/automation_messages_internal.h",
        "note": ""
    },
    {
        "id": 12,
        "filepath": "chrome/browser/render_widget_host_view_win.cc",
        "note": ""
    },
    {
        "id": 13,
        "filepath": "chrome/browser/render_widget_host_view_win.h",
        "note": ""
    },
    {
        "id": 31,
        "filepath": "chrome/browser/automation/automation_provider.cc",
        "note": ""
    },
    {
        "id": 32,
        "filepath": "chrome/browser/browser_accessibility.cc",
        "note": ""
    },
    {
        "id": 33,
        "filepath": "chrome/browser/browser_accessibility.h",
        "note": ""
    },
    {
        "id": 34,
        "filepath": "chrome/browser/browser_accessibility_manager.cc",
        "note": ""
    },
    {
        "id": 35,
        "filepath": "chrome/browser/browser_accessibility_manager.h",
        "note": ""
    },
    {
        "id": 36,
        "filepath": "chrome/browser/printing/print_view_manager.cc",
        "note": ""
    }
]

// get currentFile from the #show variable somehow
const currentFile = "chrome/browser/browser_accessibility.cc"
const parent = currentFile.split("/")[0]

// check if given filepath is a child of current filepath's root directory
const isChildOf = (child, parent) => {
    if (child === parent) return false;
    const parentTokens = parent.split('/').filter(i => i.length)
    return parentTokens.every((t, i) => child.split('/')[i] === t)
}

// filter out the unnecessary filepaths
const reducedData = actualData.filter(d => isChildOf(d.filepath, parent))

// extract parent directories
const parentPaths = new Set()

reducedData.forEach(d => {
    const subs = d.filepath.split("/")
    let curr = parent
    parentPaths.add(curr)
    subs.forEach(fp => {
        if(fp !== parent && !fp.includes(".")) {
            curr = curr + "/" + fp
            parentPaths.add(curr)
        }
    })
})

parentPaths.forEach(d => reducedData.push({ filepath: d }))

// stratify the parsed data
// cooking the data for hierarchy compliant json format
const parsedData = d3.stratify()
    .id(d => d.filepath)
    .parentId(d => d.filepath.substring(0, d.filepath.lastIndexOf("/")))
    (reducedData)

// selecting the svg to display the pedigree at
const svg = d3.select("svg"),
    width = +svg.attr("width"),
    height = +svg.attr("height");

// switch color helper function
const color = d3.scaleOrdinal(d3.schemeCategory10);


// partition helper function
const partition = d3.partition()
    .size([height, width])
    .padding(1)
    .round(true)

// make root node
const root = parsedData
    .sum(() => 1)
    .sort((a, b) => b.height - a.height || b.value - a.value)

// apply partition to the root node
partition(root)

// customized and configure each cell
const cell = svg
    .selectAll(".node")
    .data(root.descendants())
    .enter().append("g")
    .attr("class", d => "node" + (d.children ? " node--internal" : " node--leaf"))
    .attr("transform", d => "translate(" + d.y0 + "," + d.x0 + ")")


cell.append("rect")
    .attr("id", d => "rect-" + d.data.filepath)
    .attr("width", d => d.y1 - d.y0)
    .attr("height", d => d.x1 - d.x0)
    .filter(d => !d.children)
    .style("fill", d => color(d.data.filepath.split(".").slice(-1)[0]))


cell.append("text")
    .attr("x", 4)
    .selectAll("tspan")
    .data((d) => d.data.filepath.split("/").slice(-1)[0])
    .enter().append("tspan")
    .attr("y", 13)
    .text(d => d)
