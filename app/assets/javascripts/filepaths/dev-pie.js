$( document ).ready( function() {
  $.ajax({
    url: "/api/filepaths/" +
          window.location.pathname.split("/").pop() +
          "/contributors",
    dataType: 'json',
    success: function(data) {
      var width = 650,
          height = 650,
          radius = 0.95 * Math.min(width, height) / 2; // 95% for scale transform
      var svg = d3.select("#dev-pie-chart")
                  .append("svg:svg")
                    // svg width and height NOT set for responsiveness here!!
                    // viewBox is the internal coordinate system and then this
                    // scales to fit its container
                    .attr("viewBox", "0 0 650 650")
                    .attr("preserveAspectRatio", "xMidYMid meet")
                  .append("g")
                     .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");
      spectrum = d3.interpolateRgbBasis(['#C2D7B6','#3A6024','#C2D7B6'])
      var color = d3.scaleSequential(spectrum).domain([0,data.length])

      var pie = d3.pie()
                  .value(d => d.num_commits)
                  .sort(null);

      var arc = d3.arc()
                  .innerRadius(radius / 2)
                  .outerRadius(radius);

      toggled('num_commits'); // initially set to this

      devPieInfo = svg.append('text')
                      .attr('x', 0)
                      .attr('y', 0)
                      .attr('text-anchor', 'middle')
                      .attr('width', radius / 3.25)
                      .attr('height', radius / 3.25)
                      .attr('id','dev-pie-info');
      devPieInfo.append('tspan')
                .attr('id', 'dev-pie-nickname')
                .attr('x', '0')
                ;
      devPieInfo.append('tspan')
                .attr('id', 'dev-pie-commits')
                .attr('x', '0')
                .attr('dy', '1.2em')
                ;
      devPieInfo.append('tspan')
                .attr('id', 'dev-pie-churn')
                .attr('x', '0')
                .attr('dy', '1.2em')
                ;

      d3.selectAll("#dev-pie-toggle input")
        .on("change", toggled);

      function toggled(val = this.value) {
        pie.value((d) => d[val]);  // set to num_commits, total_churn, etc.
        path = svg.selectAll('path')
                  .data(pie(data));
        path.enter()
            .append('a')
              .attr('href', d => '/developers/' + d.data.id)
              .attr('class', 'dev-pie-link')
              .on("mouseover", mousedOver)
              .on("mouseout", mousedOut)
            .append('path')
              .attr('d', arc)
              .attr('fill', (d, i) => color(i))
              .attr('stroke', '#fff')
              .attr('stroke-width', '5px')
              .each(function(d) { this._current = d; })
            ;
        path.transition().duration(750).attrTween("d", arcTween);
      }

      function mousedOver(d){
        d3.select('#dev-pie-nickname').text(d.data.nickname)
        d3.select('#dev-pie-commits').text(d.data.num_commits + " commits")
        churn_text = d.data.total_churn + ' lines edited (+' +
                     d.data.insertions + ' -' + d.data.deletions + ')'
        d3.select('#dev-pie-churn').text(churn_text)
      }

      function mousedOut(d){
        // d3.select('#dev-pie-nickname').text('')
        // d3.select('#dev-pie-commits').text('')
        // d3.select('#dev-pie-churn').text('')
      }

      // Store the displayed angles in _current.
      // Then, interpolate from _current to the new angles.
      // During the transition, _current is updated in-place by d3.interpolate.
      function arcTween(a) {
        var i = d3.interpolate(this._current, a);
        this._current = i(0);
        return function(t) {
          return arc(i(t));
        };
      }

    }
  });
});
